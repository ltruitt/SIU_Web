using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using SIU.Web.UI.WebControls;


public partial class Forms_QualCodes : System.Web.UI.Page
{
#region Private/Protected Members

    protected bool m_bAllowEditInDetailsView = false;
    protected ViewMode m_ViewMode = ViewMode.GridView;
    protected enum ViewMode { Unknown, GridView, DetailsView }
    private const string DATETIME_FORMAT = "MM/dd/yyyy";
    private const char NavisionMM = '\x0005';

#endregion

#region Public Properties

    public bool AllowEditInDetailsView
    {
        get
        {
            return m_bAllowEditInDetailsView;
        }

        set
        {
            m_bAllowEditInDetailsView = value;
        }
    }
    public bool AllowRecordSorting
    {
        get
        {
            return gvQualCodes.AllowSorting;
        }

        set
        {
            gvQualCodes.AllowSorting = value;
        }
    }
    public bool AllowRecordSelection
    {
        get
        {
            return gvQualCodes.AutoGenerateSelectButton;
        }

        set
        {
            gvQualCodes.AutoGenerateSelectButton = value;
        }
    }
    public bool AllowRecordInserting
    {
        get
        {
            return dvQualCode.AutoGenerateInsertButton;
        }

        set
        {
            dvQualCode.AutoGenerateInsertButton = value;
            lblBtnShowDetail.Visible = value;
        }
    }
    public bool AllowRecordEditing
    {
        get
        {
            return gvQualCodes.AutoGenerateEditButton;
        }

        set
        {
            gvQualCodes.AutoGenerateEditButton = value;
        }
    }
    public bool AllowRecordDeleting
    {
        get
        {
            return gvQualCodes.AutoGenerateDeleteButton;
        }

        set
        {
            gvQualCodes.AutoGenerateDeleteButton = value;
        }
    }

    private string SortDirection
    {
        get
        {
            if (ViewState["SortDirection"] != null)
                return (string)ViewState["SortDirection"];
            else
                return "ASC";
        }
        set
        {
            if (ViewState["SortDirection"] == null)
            {
                ViewState.Add("SortDirection", value);
            }
            else
            {
                ViewState["SortDirection"] = value;
            }
        }
    }
    private string SortExpression
    {
        get
        {
            if (ViewState["SortExpression"] != null)
                return (string)ViewState["SortExpression"];
            else
                return string.Empty;
        }
        set
        {
            if (ViewState["SortExpression"] == null)
            {
                ViewState.Add("SortExpression", value);
            }
            else
            {
                ViewState["SortExpression"] = value;
            }
        }
    }

#endregion


    protected void Page_Load(object sender, EventArgs e)
    {
        string Method = "Forms_QualCodes.PageLoad";

        AllowRecordSorting = true;
        AllowRecordInserting = true;
        AllowRecordSelection = false;
        AllowEditInDetailsView = true;

        BindDataViews();

        //ShowFooterInsertControls(false);
    }
    protected void SetBehavior()
    {
        bool bHasGridRows = (gvQualCodes.Rows.Count > 0);
        if ((bHasGridRows == false) && (AllowRecordInserting == true))
        {
            m_ViewMode = ViewMode.DetailsView;
        }

        switch (m_ViewMode)
        {
            case ViewMode.Unknown:
                pnlGridView.Visible = bHasGridRows;
                pnlDetailsView.Visible = !bHasGridRows;
                break;

            case ViewMode.GridView:
                pnlGridView.Visible = true;
                pnlDetailsView.Visible = false;
                lblBtnShowDetail.Visible = AllowRecordInserting;
                break;

            case ViewMode.DetailsView:
                pnlGridView.Visible = false;
                pnlDetailsView.Visible = true;
                lblBtnShowDetail.Visible = false;
                gvQualCodes.EditIndex = -1;
                break;
        }
    }
    protected void SetBehavior(ViewMode vmNewViewMode)
    {
        m_ViewMode = vmNewViewMode;
        SetBehavior();
    }


#region Instance Specific GridView Helper Methods
    private Label GetGridViewLabelControl(GridViewRow row, string CtlName)
    {
        Label _ctl = (Label)row.FindControl(CtlName);
        if (_ctl == null)
        {
            throw new Exception("Get Grid View Control Field: Could not find control key control");
        }

        return _ctl;
    }
#endregion


#region Not Implemented Events 
    protected void ShowFooterInsertControls(bool bShowControls)
    {
        //if (dvQualCode.CurrentMode == DetailsViewMode.Insert)
        //    lblBtnUpdateDetail.Visible = bShowControls;
        //else
        //    lblBtnInsertDetail.Visible = bShowControls;

        //lblBtnCancelDetail.Visible = bShowControls;
        //gvQualCodes.ShowFooter = bShowControls;
        //lblBtnShowDetail.Visible = (bShowControls == false);

        //BindDataViews();
    }
    protected void gvQualCodes_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
        throw new Exception("THis Code Should Not Be Called: gvQualCodes_RowCancelingEdit ");
        gvQualCodes.EditIndex = -1;
        BindDataViews();
    }
    protected void gvQualCodes_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        //SelfSortingGrid _row = (SelfSortingGrid)((Control)e.CommandSource);

        //// route and handle the command
        //switch (e.CommandName.ToUpper())
        //{
        //    case "EDIT":
        //        foreach (Control xxx in _row.Controls)
        //        {
        //            string yyy = xxx.ID;
        //        }
        //        Label _ctl = (Label)_row.FindControl("lblCode");
        //        BindDataViews(_ctl.Text);
        //        break;
        //} 

    }


    protected void gvQualCodes_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {
        throw new Exception("THis Code Should Never Execute: gvQualCodes_RowUpdating  ");
        //CIF.Business.Northwind.Orders _Orders = new CIF.Business.Northwind.Orders();
        //CIF.Business.Northwind.OrdersItem _OrdersItem = new CIF.Business.Northwind.OrdersItem();

        //GridViewRow gvrEditRow = gvOrders.Rows[e.RowIndex];
        //_OrdersItem.OrderID = GetGridViewRowOrderID(gvrEditRow);

        //_OrdersItem.CustomerID = (GetGridViewRowTextValue(gvrEditRow, "txtEditCustomerID") != string.Empty) ? GetGridViewRowTextValue(gvrEditRow, "txtEditCustomerID") : "HILAA";
        //_OrdersItem.EmployeeID = (GetGridViewRowTextValue(gvrEditRow, "txtEditEmployeeID") != string.Empty) ? Convert.ToInt32(GetGridViewRowTextValue(gvrEditRow, "txtEditEmployeeID")) : 1;
        //_OrdersItem.OrderDate = (GetGridViewRowTextValue(gvrEditRow, "txtEditOrderDate") != string.Empty) ? Convert.ToDateTime(GetGridViewRowTextValue(gvrEditRow, "txtEditOrderDate")) : System.DateTime.Now;
        //_OrdersItem.RequiredDate = (GetGridViewRowTextValue(gvrEditRow, "txtEditRequiredDate") != string.Empty) ? Convert.ToDateTime(GetGridViewRowTextValue(gvrEditRow, "txtEditRequiredDate")) : System.DateTime.Now;
        //_OrdersItem.ShippedDate = (GetGridViewRowTextValue(gvrEditRow, "txtEditShippedDate") != string.Empty) ? Convert.ToDateTime(GetGridViewRowTextValue(gvrEditRow, "txtEditShippedDate")) : System.DateTime.Now;
        //_OrdersItem.ShipVia = (GetGridViewRowTextValue(gvrEditRow, "txtEditShipVia") != string.Empty) ? Convert.ToInt32(GetGridViewRowTextValue(gvrEditRow, "txtEditShipVia")) : 1;
        //_OrdersItem.ShipName = GetGridViewRowTextValue(gvrEditRow, "txtEditShipName");
        //_OrdersItem.ShipAddress = GetGridViewRowTextValue(gvrEditRow, "txtEditShipAddress");
        //_OrdersItem.ShipCity = GetGridViewRowTextValue(gvrEditRow, "txtEditShipCity");
        //_OrdersItem.ShipRegion = GetGridViewRowTextValue(gvrEditRow, "txtEditShipRegion");
        //_OrdersItem.ShipPostalCode = GetGridViewRowTextValue(gvrEditRow, "txtEditShipPostalCode");
        //_OrdersItem.ShipCountry = GetGridViewRowTextValue(gvrEditRow, "txtEditShipCountry");

        //_OrdersItem.IsNew = false;
        //_Orders.OrdersItem = _OrdersItem;
        //_Orders.Save();

        //gvOrders.EditIndex = -1;
        //BindDataViews();
    }


#endregion

#region Gridview Event Handlers
    protected void gvQualCodes_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        GridViewRow gvrEditRow = gvQualCodes.Rows[e.RowIndex];

        string _QualCode = GetGridViewLabelControl(gvrEditRow, "lblCode").Text;
        SqlServer_Impl.DeleteBandC_QualCode(_QualCode);

        BindDataViews();
    }

    //////////////////////////////////////////
    // "Edit" Command Called.               //
    // Either Open Detail View In Edit More //
    // Or Allow Edit In Place               //
    //////////////////////////////////////////
    protected void gvQualCodes_RowEditing(object sender, GridViewEditEventArgs e)
    {
        if (m_bAllowEditInDetailsView == true)
        {
            gvQualCodes.EditIndex = -1;
            gvQualCodes.SelectedIndex = e.NewEditIndex;
            dvQualCode.ChangeMode(DetailsViewMode.Edit);
            string _QualCode = GetGridViewLabelControl(gvQualCodes.SelectedRow, "lblCode").Text;
            BindDetailView(_QualCode);

            SetBehavior(ViewMode.DetailsView);
            e.Cancel = true;
        }
        else
        {
            gvQualCodes.EditIndex = e.NewEditIndex;
            BindDataViews();
        }
    }





    ///////////////////////////////////////////////////////////////////
    // This Must Be Here So That You Can Set SelectedIndex From Code //
    ///////////////////////////////////////////////////////////////////
    protected void gvQualCodes_SelectedIndexChanged(object sender, EventArgs e)
    {
        //if (gvQualCodes.SelectedIndex < 0)
        //    return;

        //dvQualCode.ChangeMode(DetailsViewMode.ReadOnly);

        //string  _QualCode = GetGridViewControl(gvQualCodes.SelectedRow, "lblCode");
        //BindDataViews(_QualCode);
    }

    protected void gvQualCodes_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        gvQualCodes.PageIndex = e.NewPageIndex;
        BindDataViews();
    }
    protected void gvQualCodes_Sorting(object sender, GridViewSortEventArgs e)
    {
        if (SortExpression != e.SortExpression)
        {
            SortExpression = e.SortExpression;
            SortDirection = "ASC";
        }
        else
        {
            if (SortDirection == "ASC")
            {
                SortDirection = "DESC";
            }
            else
            {
                SortDirection = "ASC";
            }
        }

        gvQualCodes.PageIndex = 0;
        BindDataViews();
    }
#endregion


#region LinkCommands At Bottom Of Griv and Detail View
    ////////////////////////////////////////////////////////////////////////////////////////////////
    // This Button Always Sits Below The Summary Grid Allowing A User To Start The Insert Process //
    ////////////////////////////////////////////////////////////////////////////////////////////////
    protected void lblBtnAddDetail_Click(object sender, EventArgs e)
    {
        //Shermco_Qualification NewQual = new Shermco_Qualification();

        if (m_bAllowEditInDetailsView == true)
        {
            string[] KeyNames = new string[] { "Code" };

            dvQualCode.DataSource = null;
            dvQualCode.DataBind();
            dvQualCode.ChangeMode(DetailsViewMode.Insert);
            dvQualCode.DataKeyNames = KeyNames;
            SetBehavior(ViewMode.DetailsView);
        }
        else
        {
            ShowFooterInsertControls(true);
        }
    }
    //protected void lblBtnCancelDetail_Click(object sender, EventArgs e)
    //{
    //    SetBehavior(ViewMode.GridView);
    //    gvQualCodes.EditIndex = -1;
    //}
    protected void btnSearch_Click(object sender, EventArgs e)
    {
        SetBehavior(ViewMode.GridView);
        gvQualCodes.EditIndex = -1;
    }
#endregion


#region DetailView Event Handlers
    protected void dvQualCode_ItemDeleting(object sender, DetailsViewDeleteEventArgs e)
    {
    }
    protected void dvQualCode_ItemInserting(object sender, DetailsViewInsertEventArgs e)
    {
        dvQualCode_InsertOrUpdate(e.Values);
    }

    protected void dvQualCode_ItemUpdating(object sender, DetailsViewUpdateEventArgs e)
    {
        //////////////////////////////////////
        // Modify Qualification Code Record //
        //////////////////////////////////////
        dvQualCode_InsertOrUpdate(e.NewValues);

        ///////////////////////////////////////////////
        // Update Any Employee Qualification Records //
        ///////////////////////////////////////////////
        SqlServer_Impl.RecordBandC_EmplCodes(e.NewValues);
    }
    private void dvQualCode_InsertOrUpdate(System.Collections.Specialized.IOrderedDictionary Values)
    {
        Shermco_Qualification NewCode = new Shermco_Qualification();

        NewCode.Code = Values["Code"].ToString().ToUpper();
        NewCode.Description = Values["Description"].ToString().ToUpper();
        NewCode.Duration_of_Certification = Values["Duration_of_Certification"].ToString().ToUpper() + NavisionMM;
        NewCode.Category = Values["Category"].ToString().ToUpper();
        NewCode.Type = "X";
        NewCode.Do_Not_Use = 0;
        SqlServer_Impl.RecordBandC_QualCode(NewCode);

        SetBehavior(ViewMode.GridView);
        BindDataViews();        
    }

    //////////////////////////////////////////////
    // Must Be Implemented For Commands To Work //
    //////////////////////////////////////////////
    protected void dvQualCode_ModeChanging(object sender, DetailsViewModeEventArgs e) { }



#endregion






#region Data Binding Methods and Data Bound Events
    protected void ClearDataViews()
    {
        gvQualCodes.DataSource = null;
        gvQualCodes.DataBind();

        dvQualCode.DataSource = null;
        dvQualCode.DataBind();
    }
    protected void BindDataViews()
    {
        BindDataViews(txtSearchCode.Text, ddSearchCategory.Text);
    }
    protected void BindDataViews(string _QualCode, string _Category)
    {
        ////////////////////////////////////////////////////////////////
        //// Get List Of Qualification Codes Based On Search Criteria //
        ////////////////////////////////////////////////////////////////
        var CodesList = SqlServer_Impl.GetBandC_QualCodes(_QualCode, (_Category == "Category Selection" ) ? "" : _Category                         );

        gvQualCodes.DataSource = CodesList;
        gvQualCodes.DataBind();
        SetBehavior();
        
    }
    protected void BindDetailView(string _QualCode)
    {
        SetBehavior(ViewMode.DetailsView);
        dvQualCode.DataSource = SqlServer_Impl.GetBandC_QualCode(_QualCode);
        dvQualCode.DataBind();
    }

    protected void gvQualCodes_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        ///////////////////////////////////
        // Ignore Header And Footer Rows //
        ///////////////////////////////////
        if (e.Row.RowType != DataControlRowType.DataRow)
            return;

        /////////////////////////////////////////////////////////////////
        // Add Number Of Employees With Qualification Code Certificate //
        // To Each Row Showing Usage (or Non) Of Code                  //
        /////////////////////////////////////////////////////////////////
        Label _lblCode = (Label)GetGridViewLabelControl(e.Row, "lblCode");
        Label _lblEmpCnt = (Label)GetGridViewLabelControl(e.Row, "lblCodeEmpCnt");

        _lblEmpCnt.Text = SqlServer_Impl.GetBandC_EmpCntByCode(_lblCode.Text).ToString();
    }
    protected void dvQualCode_DataBound(object sender, EventArgs e)
    {
        if (dvQualCode.DataItem == null)
            return;

        ///////////////////////////////////////////////
        // Strip Navision Month Synbol From Duration //
        ///////////////////////////////////////////////
        TextBox _txtDur = (TextBox)dvQualCode.FindControl("txtEditDuration");
        if (_txtDur != null)
            _txtDur.Text = _txtDur.Text.TrimEnd(new char[] { NavisionMM });
    }

    ////////////////////////////////////////////////////////////
    // Perform AutoCOmpletion For Category During Insert Form //
    ////////////////////////////////////////////////////////////
    [System.Web.Services.WebMethod]
    [System.Web.Script.Services.ScriptMethod]
    public static string[] GetCompletionList(string prefixText, int count)
    {
        return SqlServer_Impl.GetBandC_QualCategories(prefixText).Take(count).ToArray();
    }  
#endregion







    static byte[] GetBytes(string str)
    {
        byte[] bytes = new byte[str.Length * sizeof(char)];
        System.Buffer.BlockCopy(str.ToCharArray(), 0, bytes, 0, bytes.Length);
        return bytes;
    }
    static string GetString(byte[] bytes)
    {
        char[] chars = new char[bytes.Length / sizeof(char)];
        System.Buffer.BlockCopy(bytes, 0, chars, 0, bytes.Length);
        return new string(chars);
    } 
    public string FormatDateTime(object dtvalue)
    {
        string sDateTime = Convert.ToString(dtvalue);

        if (IsDateTime(sDateTime) == true)
        {
            System.DateTime dt = System.DateTime.Parse(sDateTime);
            if (dt == new DateTime(1900, 1, 1))
                sDateTime = string.Empty;
            else
                sDateTime = dt.ToString(DATETIME_FORMAT);
        }

        return sDateTime;
    }
    public static bool IsDateTime(object value)
    {
        try
        {
            if (value == null)
                return false;

            DateTime dateTime = DateTime.Parse(value.ToString());
            return true;
        }
        catch (FormatException)
        {
            return false;
        }
    }

}