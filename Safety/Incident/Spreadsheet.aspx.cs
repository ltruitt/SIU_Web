using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.Linq;
using System.Reflection;
using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Spreadsheet;

using SpreadsheetLight;
using SpreadsheetLight.Charts;

public partial class Safety_Incident_Spreadsheet : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e)
    {

    }

    protected void btn_SSL_Click(object sender, EventArgs e)
    {
        int rowCount;

        //////////////////////////////////
        // Build The Document Framework //
        //////////////////////////////////
        SLDocument sl = new SLDocument
        {
            DocumentProperties =
            {
                Creator = "Larry Truitt",
                ContentStatus = "Generated " + DateTime.Now,
                Title = "Incident and Accident Tracking",
                Description = "Incident and Accident tracking report generated by SiYOU.Shermco.Com"
            }
        };

        //////////////////////
        // Setup The Sheets //
        //////////////////////
        sl.RenameWorksheet(SLDocument.DefaultFirstSheetName, "Incident Log");
        sl.AddWorksheet("Master Summary");
        sl.AddWorksheet("January");
        sl.AddWorksheet("February");
        sl.AddWorksheet("March");
        sl.AddWorksheet("April");
        sl.AddWorksheet("May");
        sl.AddWorksheet("June");
        sl.AddWorksheet("July");
        sl.AddWorksheet("August");
        sl.AddWorksheet("September");
        sl.AddWorksheet("October");
        sl.AddWorksheet("November");
        sl.AddWorksheet("December");

        IEnumerable<object> incAccRcds = SqlServer_Impl.GetIncidentAccident();
        List<SIU_ReportingChain> oshaData = SqlServer_Impl.GetOshaDeptData();

        ///////////////////////////////////////////
        // Build The Incident Accident Worksheet //
        ///////////////////////////////////////////
        sl.SelectWorksheet("Incident Log");
        rowCount = BuildIAData(ref sl, ref incAccRcds);
        BuildIAHeader(ref sl, rowCount);
        
        ///////////////////////////////////////////
        // Build The Incident Accident Worksheet //
        ///////////////////////////////////////////
        int monNo = 1;
        int startRow = 1;
        int endRow = 1;
        foreach (string workSheet in new List<string>() {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"  }  )
        {
            sl.SelectWorksheet(workSheet);
            startRow = 1;

            startRow = BuildSumHeader(ref sl, startRow);
            endRow = BuildMonSumData(ref sl, monNo++, ref incAccRcds, ref oshaData, startRow);
            BuildSumSum(ref sl, startRow, endRow);            
        }

        ///////////////////////////////////////////
        // Build The Incident Accident Worksheet //
        ///////////////////////////////////////////
        sl.SelectWorksheet("Master Summary");
        startRow = 1;

        startRow = BuildSumHeader(ref sl, startRow);
        endRow = BuildMasterSumData(ref sl, ref oshaData, startRow);
        BuildSumSum(ref sl, startRow, endRow);

        ////////////////////////////
        // Select FIrst Worksheet //
        ////////////////////////////
        sl.SelectWorksheet("Incident Log");

        /////////////////////////////////
        // And Send Back A Spreadsheet //
        /////////////////////////////////
        Response.Clear();
        Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
        Response.AddHeader("Content-Disposition", "attachment; filename=IncidentAccident.xlsx");
        sl.SaveAs(Response.OutputStream);
        Response.End();

    }

    private void BuildIAHeader(ref SLDocument sl, int rowCount)
    {
        rowCount += 2;

        SLStyle styleHeaderA1 = sl.CreateStyle();
        styleHeaderA1.SetWrapText(true);
        styleHeaderA1.Font.FontName = "Arial";
        styleHeaderA1.Font.FontSize = 11;
        styleHeaderA1.Font.FontColor = System.Drawing.Color.Blue;
        styleHeaderA1.Alignment.Horizontal = HorizontalAlignmentValues.Center;
        styleHeaderA1.Alignment.Vertical = VerticalAlignmentValues.Bottom;

        sl.SetCellStyle("A1", "AG2", styleHeaderA1);

        sl.SetRowHeight(1, 30);
        sl.SetRowHeight(2, 57);

        sl.SetColumnWidth("A", 9.43);
        sl.SetColumnWidth("B", 9.43);
        sl.SetColumnWidth("C", 13);
        sl.SetColumnWidth("D", 9.43);
        sl.SetColumnWidth("E", 9.43);
        sl.SetColumnWidth("F", 13);
        sl.SetColumnWidth("G", 13);
        sl.SetColumnWidth("H", 13);
        sl.SetColumnWidth("I", 13);
        sl.SetColumnWidth("J", 11);
        sl.SetColumnWidth("K", 9.43);
        sl.SetColumnWidth("W", 50);
        sl.SetColumnWidth("X", 50);
        sl.SetColumnWidth("Y", 10);
        sl.SetColumnWidth("Z", 50);
        sl.SetColumnWidth("AA", 50);
        sl.SetColumnWidth("AB", 20);
        sl.SetColumnWidth("AC", 50);

        sl.MergeWorksheetCells("A1", "A2");
        sl.MergeWorksheetCells("B1", "B2");
        sl.MergeWorksheetCells("C1", "C2");
        sl.MergeWorksheetCells("D1", "D2");
        sl.MergeWorksheetCells("M1", "M2");
        sl.MergeWorksheetCells("R1", "R2");
        sl.MergeWorksheetCells("V1", "V2");
        sl.MergeWorksheetCells("W1", "W2");
        sl.MergeWorksheetCells("X1", "X2");
        sl.MergeWorksheetCells("Y1", "Y2");
        sl.MergeWorksheetCells("Z1", "Z2");
        sl.MergeWorksheetCells("AA1", "AA2");
        sl.MergeWorksheetCells("AB1", "AB2");
        sl.MergeWorksheetCells("AC1", "AC2");


        sl.MergeWorksheetCells("E1", "G1");
        sl.MergeWorksheetCells("H1", "L1");
        sl.MergeWorksheetCells("N1", "Q1");
        sl.MergeWorksheetCells("S1", "U1");
        sl.MergeWorksheetCells("AD1", "AG1");


        sl.SetCellValue("A1", "Shermco Number");
        sl.SetCellValue("B1", "Claim Number");
        sl.SetCellValue("C1", "Date of Occurance");
        sl.SetCellValue("D1", "Open Closed");

        sl.SetCellValue("E1", "Type of Incident");
        sl.SetCellValue("E2", "Type");
        sl.SetCellValue("F2", "Description");
        sl.SetCellValue("G2", "Location");

        sl.SetCellValue("H1", "OSHA 300 Log Information");
        sl.SetCellValue("H2", "Medically Recordable");
        sl.SetCellValue("I2", "Restricted Duty");
        sl.SetCellValue("J2", "Number of Restricted Days");
        sl.SetCellValue("K2", "Lost Time");
        sl.SetCellValue("L2", "Number of Lost Time Days");

        sl.SetCellValue("M1", "Drug / Breath Alcohol Test");

        sl.SetCellValue("N1", "Employee");
        sl.SetCellValue("N2", "Dept");
        sl.SetCellValue("O2", "Number");
        sl.SetCellValue("P2", "Last Name");
        sl.SetCellValue("Q2", "First Name");

        sl.SetCellValue("R1", "Unit Number");

        sl.SetCellValue("S1", "Supervisor");
        sl.SetCellValue("S2", "Number");
        sl.SetCellValue("T2", "Last Name");
        sl.SetCellValue("U2", "First Name");

        sl.SetCellValue("V1", "Project Number");
        sl.SetCellValue("W1", "Description of Occurance");
        sl.SetCellValue("X1", "Unsafe Act or Condition");
        sl.SetCellValue("Y1", "Discipline Issued");
        sl.SetCellValue("Z1", "Discipline Description");
        sl.SetCellValue("AA1", "Actions to Prevent ReOccurance");
        sl.SetCellValue("AB1", "Responsible Party");
        sl.SetCellValue("AC1", "Additional Comments");

        sl.SetCellValue("AD1", "Cost");
        sl.SetCellValue("AD2", "In-House");
        sl.SetCellValue("AE2", "Incurred");
        sl.SetCellValue("AF2", "Reserve");
        sl.SetCellValue("AG2", "Total");


        SLStyle styleColumnGroup1 = sl.CreateStyle();
        styleColumnGroup1.Fill.SetPatternType(PatternValues.Solid);
        styleColumnGroup1.Fill.SetPatternForegroundColor(System.Drawing.Color.FromArgb(100, 230, 230, 230));
        sl.SetCellStyle("A1", "D" + rowCount, styleColumnGroup1);
        sl.SetCellStyle("H1", "L" + rowCount, styleColumnGroup1);
        sl.SetCellStyle("N1", "Q" + rowCount, styleColumnGroup1);
        sl.SetCellStyle("S1", "U" + rowCount, styleColumnGroup1);
        sl.SetCellStyle("W1", "W" + rowCount, styleColumnGroup1);
        sl.SetCellStyle("Y1", "Z" + rowCount, styleColumnGroup1);
        sl.SetCellStyle("AC1", "AC" + rowCount, styleColumnGroup1);

        SLStyle borderAllCell = sl.CreateStyle();
        borderAllCell.Border.RightBorder.BorderStyle = BorderStyleValues.Thin;
        borderAllCell.Border.BottomBorder.BorderStyle = BorderStyleValues.Thin;
        borderAllCell.Border.RightBorder.Color = System.Drawing.Color.FromArgb(100, 192, 192, 192);
        borderAllCell.Border.BottomBorder.Color = System.Drawing.Color.FromArgb(100, 192, 192, 192);
        sl.SetCellStyle("A1", "AG" + rowCount, borderAllCell);

        SLStyle borderBottomBlack = sl.CreateStyle();
        borderBottomBlack.Border.BottomBorder.BorderStyle = BorderStyleValues.Thin;
        borderBottomBlack.Border.LeftBorder.Color = System.Drawing.Color.Black;
        sl.SetCellStyle("A1", "AG1", borderBottomBlack);

        borderBottomBlack.Border.BottomBorder.BorderStyle = BorderStyleValues.Medium;
        sl.SetCellStyle("A2", "AG2", borderBottomBlack);

        SLStyle borderRightBlack = sl.CreateStyle();
        borderRightBlack.Border.RightBorder.BorderStyle = BorderStyleValues.Medium;
        borderRightBlack.Border.LeftBorder.Color = System.Drawing.Color.Black;
        sl.SetCellStyle("D1", "D" + rowCount, borderRightBlack);
        sl.SetCellStyle("G1", "G" + rowCount, borderRightBlack);
        sl.SetCellStyle("L1", "L" + rowCount, borderRightBlack);
        sl.SetCellStyle("M1", "M" + rowCount, borderRightBlack);
        sl.SetCellStyle("Q1", "Q" + rowCount, borderRightBlack);
        sl.SetCellStyle("R1", "R" + rowCount, borderRightBlack);
        sl.SetCellStyle("R1", "R" + rowCount, borderRightBlack);
        sl.SetCellStyle("U1", "U" + rowCount, borderRightBlack);
        sl.SetCellStyle("V1", "V" + rowCount, borderRightBlack);
        sl.SetCellStyle("W1", "W" + rowCount, borderRightBlack);
        sl.SetCellStyle("X1", "X" + rowCount, borderRightBlack);
        sl.SetCellStyle("Z1", "Z" + rowCount, borderRightBlack);
        sl.SetCellStyle("AB1", "AB" + rowCount, borderRightBlack);
        sl.SetCellStyle("AC1", "AC" + rowCount, borderRightBlack);

        ///////////////////////////
        // Freeze the top 2 rows //
        ///////////////////////////
        sl.FreezePanes(2, 0);
    }
    private int BuildIAData(ref SLDocument sl, ref IEnumerable<object> IncRcds)
    {
        //////////////////////////////////////////////////////////////////
        // Lind Of Messy But Also A Little Cool                         //
        // Linq Returning an Anonymous Object Array                     //
        // So Using An Expando Object To Break It Out Into A Dictionary //
        //////////////////////////////////////////////////////////////////
        dynamic incidentAccidentRcdDict = new ExpandoObject();
        var dict = (IDictionary<string, object>)incidentAccidentRcdDict;

        ////////////////////
        // Start at Row 3 //
        ////////////////////
        int row = 3;

        foreach (var incidentAccidentRcd in IncRcds)
        {
            foreach (PropertyInfo propertyInfo in incidentAccidentRcd.GetType().GetProperties(BindingFlags.Instance | BindingFlags.Public))
                dict[propertyInfo.Name] = propertyInfo.GetValue(incidentAccidentRcd, null);

            //////////////////////////
            // Incident Disposition //
            //////////////////////////
            sl.SetCellValueNumeric(row, 1, (incidentAccidentRcdDict.iaList.UID).ToString() );
            sl.SetCellValue(row, 2, (string)incidentAccidentRcdDict.iaList.Claim_ID );
            if ( incidentAccidentRcdDict.iaList.Inc_Occur_Date != null )
                sl.SetCellValue(row, 3, ((DateTime)incidentAccidentRcdDict.iaList.Inc_Occur_Date).ToShortDateString() );
            sl.SetCellValue(row, 4, (string)incidentAccidentRcdDict.iaList.Disposition);

            /////////////////////////////
            // Incident Classification //
            /////////////////////////////
            if (incidentAccidentRcdDict.iaList.Inc_Type != null)
                sl.SetCellValue(row, 5, (string)incidentAccidentRcdDict.iaList.Inc_Type);

            if (incidentAccidentRcdDict.iaList.Inc_Type_Sub != null)
                sl.SetCellValue(row, 6, (string)incidentAccidentRcdDict.iaList.Inc_Type_Sub);

            if (incidentAccidentRcdDict.iaList.Inc_Loc != null)
                sl.SetCellValue(row, 7, (string)incidentAccidentRcdDict.iaList.Inc_Loc);

            if (incidentAccidentRcdDict.iaList.Inc_Desc != null)
                sl.SetCellValue(row, 23, (string)incidentAccidentRcdDict.iaList.Inc_Desc);

            if (incidentAccidentRcdDict.iaList.Inc_Unsafe_Act_or_Condition != null)
                sl.SetCellValue(row, 24, (string)incidentAccidentRcdDict.iaList.Inc_Unsafe_Act_or_Condition);

            //////////
            // OSHA //
            //////////
            if (incidentAccidentRcdDict.iaList.Osha_Record_Med != null )
                sl.SetCellValue(row, 8, ( (bool)incidentAccidentRcdDict.iaList.Osha_Record_Med) ? "Yes" : "No");

            if (incidentAccidentRcdDict.iaList.Osha_Restrict_Duty != null)
                sl.SetCellValue(row, 9, ((incidentAccidentRcdDict.iaList.Osha_Restrict_Duty) ? "Yes" : "No"));

            if (incidentAccidentRcdDict.iaList.Osha_Restrict_Days != null)
                sl.SetCellValueNumeric(row, 10, incidentAccidentRcdDict.iaList.Osha_Restrict_Days.ToString());

            if (incidentAccidentRcdDict.iaList.Osha_Lost_Time != null)
                sl.SetCellValue(row, 11, ((incidentAccidentRcdDict.iaList.Osha_Lost_Time) ? "Yes" : "No"));

            if (incidentAccidentRcdDict.iaList.Osha_Lost_Days != null)
                sl.SetCellValueNumeric(row, 12, incidentAccidentRcdDict.iaList.Osha_Lost_Days.ToString());

            ///////////////
            // Drug Test //
            ///////////////
            if (incidentAccidentRcdDict.iaList.Emp_Drug_Alchol_Test != null)
                sl.SetCellValue(row, 13, ((incidentAccidentRcdDict.iaList.Emp_Drug_Alchol_Test) ? "Yes" : "No"));


            //////////////
            // Employee //
            //////////////
            if (incidentAccidentRcdDict.EmpNo != null)
            {
                sl.SetCellValueNumeric(row, 14, incidentAccidentRcdDict.EmpDept);
                sl.SetCellValueNumeric(row, 15, incidentAccidentRcdDict.EmpNo);
                sl.SetCellValue(row, 16, incidentAccidentRcdDict.EmpLast);
                sl.SetCellValue(row, 17, incidentAccidentRcdDict.EmpFirst);
            }

            ////////////////////
            // Unit / Vehicle //
            ////////////////////
            if (incidentAccidentRcdDict.iaList.Emp_Veh_Involved != null)
                sl.SetCellValue(row, 18, (string)incidentAccidentRcdDict.iaList.Emp_Veh_Involved);

            //////////
            // Supr //
            //////////
            if (incidentAccidentRcdDict.SuprNo != null)
            {
                sl.SetCellValueNumeric(row, 19, incidentAccidentRcdDict.SuprNo);
                sl.SetCellValue(row, 20, incidentAccidentRcdDict.SuprLast);
                sl.SetCellValue(row, 21, incidentAccidentRcdDict.SuprFirst);
            }

            ////////////
            // Job No //
            ////////////
            if (incidentAccidentRcdDict.iaList.Emp_Job_No != null)
                sl.SetCellValue(row, 22, (string)incidentAccidentRcdDict.iaList.Emp_Job_No);

            ////////////////
            // Discipline //
            ////////////////
            if (incidentAccidentRcdDict.iaList.Follow_Discipline_Issued_Flag != null)
                sl.SetCellValue(row, 25, ((incidentAccidentRcdDict.iaList.Follow_Discipline_Issued_Flag) ? "Yes" : "No"));

            if (incidentAccidentRcdDict.iaList.Follow_Discipline != null)
                sl.SetCellValue(row, 26, (string)incidentAccidentRcdDict.iaList.Follow_Discipline);

            /////////////////
            // Reoccurance //
            /////////////////
            if (incidentAccidentRcdDict.iaList.Follow_Prevent_Reoccur != null)
                sl.SetCellValue(row, 27, (string)incidentAccidentRcdDict.iaList.Follow_Prevent_Reoccur);

            if (incidentAccidentRcdDict.iaList.Follow_Responsible != null)
                sl.SetCellValue(row, 28, (string)incidentAccidentRcdDict.iaList.Follow_Responsible);

            //////////////////////
            // CLosing Comments //
            //////////////////////
            if (incidentAccidentRcdDict.iaList.Follow_Comments != null)
                sl.SetCellValue(row, 29, (string)incidentAccidentRcdDict.iaList.Follow_Comments);

            //////////
            // Cost //
            //////////
            if (incidentAccidentRcdDict.iaList.Cost_inHouse != null)
                sl.SetCellValueNumeric(row, 30, incidentAccidentRcdDict.iaList.Cost_inHouse.ToString());

            if (incidentAccidentRcdDict.iaList.Cost_Incurred != null)
                sl.SetCellValueNumeric(row, 31, incidentAccidentRcdDict.iaList.Cost_Incurred.ToString());

            if (incidentAccidentRcdDict.iaList.Cost_Reserve != null)
                sl.SetCellValueNumeric(row, 32, incidentAccidentRcdDict.iaList.Cost_Reserve.ToString());

            string xxx = string.Format("=SUM({0})", SLConvert.ToCellRange(row, 30, row, 32));
            sl.SetCellValue(row, 33, xxx);
            
            dict.Clear();
            row++;
        }

        SLStyle styleDataCenter = sl.CreateStyle();
        styleDataCenter.Font.FontName = "Arial";
        styleDataCenter.Font.FontSize = 11;
        styleDataCenter.Font.FontColor = System.Drawing.Color.Black;
        styleDataCenter.Alignment.Horizontal = HorizontalAlignmentValues.Center;
        styleDataCenter.Alignment.Vertical = VerticalAlignmentValues.Center;
        styleDataCenter.SetWrapText(true);
        sl.SetCellStyle("A3", "AG" + row, styleDataCenter);

        SLStyle styleDataLeft = sl.CreateStyle();
        styleDataLeft.Alignment.Horizontal = HorizontalAlignmentValues.Left;
        styleDataLeft.SetWrapText(true);
        sl.SetCellStyle("W3", "W" + row, styleDataLeft);
        sl.SetCellStyle("X3", "X" + row, styleDataLeft);
        sl.SetCellStyle("Z3", "Z" + row, styleDataLeft);
        sl.SetCellStyle("AC3", "AC" + row, styleDataLeft);

        return row - 3;
    }

    private class sumRcd
    {
        public string Dept;
        public string DeptName;
        public decimal TotHours = 2000;
        public int TotFirAidClasses;
        public int TotMedRecordable;
        public int TotRestrictDays;
        public int TotLostDays;
        public int TotVehIncidents;

        public float TotInjInHouseCost;
        public float TotInjIncurredCost;
        public float TotInjReservedCost;

        public float TotVehInHouseCost;
        public float TotVehIncurredCost;
        public float TotVehReservedCost;

        public string OSHA_NAICS;
        public float OSHA_TRIR_NAT_AVG;
        public float OSHA_RIR_NAT_AVG;
        public float OSHA_LTIR_NAT_AVG;
        public float OSHA_DART_NAT_AVG;
    }
    private int BuildSumHeader(ref SLDocument sl, int rowCount)
    {
        rowCount += 2;

        //////////////////////////////
        // Setup Header Row Heights //
        //////////////////////////////
        sl.SetRowHeight(1, 20);
        sl.SetRowHeight(2, 57);

        ////////////////////////
        // Set Columns Widths //
        ////////////////////////
        sl.SetWorksheetDefaultColumnWidth(13);
        sl.SetColumnWidth("A", 13);
        sl.SetColumnWidth("B", 18);
        sl.SetColumnWidth("C", 13);
        sl.SetColumnWidth("D", 9.43);
        sl.SetColumnWidth("E", 9.43);


        ////////////////////////////////////
        // Merge Some Cells Horiz or Vert //
        ////////////////////////////////////
        sl.MergeWorksheetCells("A1", "A2");
        sl.MergeWorksheetCells("B1", "B2");
        sl.MergeWorksheetCells("C1", "C2");
        sl.MergeWorksheetCells("D1", "D2");
        sl.MergeWorksheetCells("E1", "E2");
        sl.MergeWorksheetCells("Q1", "Q2");
        sl.MergeWorksheetCells("R1", "R2");       
        sl.MergeWorksheetCells("Y1", "Y2");

        sl.MergeWorksheetCells("F1", "P1");
        sl.MergeWorksheetCells("S1", "U1");
        sl.MergeWorksheetCells("V1", "X1");

        SLStyle styleColumnGroup1 = sl.CreateStyle();
        styleColumnGroup1.Fill.SetPatternType(PatternValues.Solid);
        styleColumnGroup1.Fill.SetPatternForegroundColor(System.Drawing.Color.Yellow);
        sl.SetCellStyle("F1", "P2", styleColumnGroup1);


        ////////////////////////////
        // Add Header Text Values //
        ////////////////////////////
        sl.SetCellValue("F1", "OSHA REQUIRED INFORMATION");
        sl.SetCellValue("S1", "Injury Cost");
        sl.SetCellValue("V1", "Vehicle Cost");

        sl.SetCellValue("A1", "Department Number");
        sl.SetCellValue("B1", "Department Name");
        sl.SetCellValue("C1", "NAICS Code");
        sl.SetCellValue("D1", "Total Hours Worked");
        sl.SetCellValue("E1", "First Aid Cases");
        sl.SetCellValue("F2", "Other Recordable Incidents");
        sl.SetCellValue("G2", "Total Recordable Incident Rate (TRIR)");
        sl.SetCellValue("H2", "BLS 2011 National Average");
        sl.SetCellValue("I2", "Job Transfer / Restricted Duty Incidents");
        sl.SetCellValue("J2", "Job Transfer / Restricted Duty Rate (RIR)");
        sl.SetCellValue("K2", "BLS 2011 National Average");
        sl.SetCellValue("L2", "Days Away from Work Incidents");
        sl.SetCellValue("M2", "Days Away from Work Incident Rate (LTRIR)");
        sl.SetCellValue("N2", "BLS 2011 National Average");
        sl.SetCellValue("O2", "Days Away, Restricted, Transferred (DART) Rate");
        sl.SetCellValue("P2", "BLS 2011 National Average");
        sl.SetCellValue("T2", "In-House");
        sl.SetCellValue("S2", "Incurred");
        sl.SetCellValue("U2", "Reserved");
        sl.SetCellValue("T2", "In-House");
        sl.SetCellValue("S2", "Incurred");
        sl.SetCellValue("U2", "Reserved");
        sl.SetCellValue("Q1", "Vehicle Incidents");
        sl.SetCellValue("R1", "Vehicle Incident Rate");
        sl.SetCellValue("Y1", "Cost / Man Hour");


        //////////////////////////////
        // Create Soft Cell Borders //
        //////////////////////////////
        SLStyle borderAllCell = sl.CreateStyle();
        borderAllCell.Border.RightBorder.BorderStyle = BorderStyleValues.Thin;
        borderAllCell.Border.BottomBorder.BorderStyle = BorderStyleValues.Thin;
        borderAllCell.Border.RightBorder.Color = System.Drawing.Color.FromArgb(100, 192, 192, 192);
        borderAllCell.Border.BottomBorder.Color = System.Drawing.Color.FromArgb(100, 192, 192, 192);
        sl.SetCellStyle("A1", "W" + rowCount, borderAllCell);

        /////////////////////////////
        // Create Hard Row Borders //
        /////////////////////////////
        SLStyle borderBottomBlack = sl.CreateStyle();
        borderBottomBlack.Border.BottomBorder.BorderStyle = BorderStyleValues.Thin;
        borderBottomBlack.Border.LeftBorder.Color = System.Drawing.Color.Black;
        sl.SetCellStyle("A1", "Y1", borderBottomBlack);

        borderBottomBlack.Border.BottomBorder.BorderStyle = BorderStyleValues.Medium;
        sl.SetCellStyle("A2", "Y2", borderBottomBlack);


        ////////////////////////////////
        // Create Hard Column Borders //
        ////////////////////////////////
        SLStyle borderRightBlack = sl.CreateStyle();
        borderRightBlack.Border.RightBorder.BorderStyle = BorderStyleValues.Medium;
        borderRightBlack.Border.LeftBorder.Color = System.Drawing.Color.Black;
        sl.SetCellStyle("A1", "E" + rowCount, borderRightBlack);
        sl.SetCellStyle("H1", "H" + rowCount, borderRightBlack);
        sl.SetCellStyle("K1", "K" + rowCount, borderRightBlack);
        sl.SetCellStyle("N1", "N" + rowCount, borderRightBlack);
        sl.SetCellStyle("P1", "P" + rowCount, borderRightBlack);
        sl.SetCellStyle("R1", "R" + rowCount, borderRightBlack);
        sl.SetCellStyle("U1", "U" + rowCount, borderRightBlack);
        sl.SetCellStyle("X1", "X" + rowCount, borderRightBlack);
        sl.SetCellStyle("Y1", "Y" + rowCount, borderRightBlack);

        ///////////////////////////
        // Freeze the top 2 rows //
        ///////////////////////////
        sl.FreezePanes(2, 0);


        /////////////////////////
        // Setup Header Styles //
        /////////////////////////
        SLStyle styleHeaderNormal = sl.CreateStyle();
        styleHeaderNormal.SetWrapText(true);
        styleHeaderNormal.Font.FontName = "Arial";
        styleHeaderNormal.Font.FontSize = 10;
        styleHeaderNormal.Font.FontColor = System.Drawing.Color.Blue;
        styleHeaderNormal.Alignment.Horizontal = HorizontalAlignmentValues.Center;
        styleHeaderNormal.Alignment.Vertical = VerticalAlignmentValues.Bottom;
        sl.SetCellStyle("A1", "Y2", styleHeaderNormal);

        SLStyle styleHeaderBold = styleHeaderNormal;
        styleHeaderBold.Font.Bold = true;
        sl.SetCellStyle("F1", "P2", styleHeaderBold);



        return rowCount;
    }
    private static int BuildMonSumData(ref SLDocument sl, int rptMon, ref IEnumerable<object> IncRcds, ref List<SIU_ReportingChain> oshaData, int rowCount )
    {
        //////////////////////////
        // Setup Data Row Style //
        //////////////////////////
        SLStyle styleDataCenter = sl.CreateStyle();
        styleDataCenter.Font.FontName = "Arial";
        styleDataCenter.Font.FontSize = 11;
        styleDataCenter.Font.FontColor = System.Drawing.Color.Black;
        styleDataCenter.Alignment.Horizontal = HorizontalAlignmentValues.Center;
        styleDataCenter.Alignment.Vertical = VerticalAlignmentValues.Center;
        styleDataCenter.SetWrapText(true);

        ////////////////////////////////
        // Create Hard Column Borders //
        ////////////////////////////////
        SLStyle borderRightBlack = sl.CreateStyle();
        borderRightBlack.Border.RightBorder.BorderStyle = BorderStyleValues.Medium;
        borderRightBlack.Border.LeftBorder.Color = System.Drawing.Color.Black;

        //////////////////////////////////////////////////////////////////
        // kind Of Messy But Also A Little Cool                         //
        // Linq Returning an Anonymous Object Array                     //
        // So Using An Expando Object To Break It Out Into A Dictionary //
        //////////////////////////////////////////////////////////////////
        dynamic incidentAccidentRcdDict = new ExpandoObject();
        var dict = (IDictionary<string, object>)incidentAccidentRcdDict;

        /////////////////////////////////////////////////////////////////////////
        // Working Record Pulled From Dictionary Or Built To Add To Dictionary //
        /////////////////////////////////////////////////////////////////////////
        sumRcd ThisSumRcd;

        ///////////////////////////////////////////////
        // Dictionary Of ThisSumRcds indexed by Dept //
        ///////////////////////////////////////////////
        var sumRcds = new Dictionary<string, sumRcd>();

        /////////////////////////////////////////////////////
        // Build Dictionary Of Departments With Basic Osha //
        // Nat Stats Pulled From Reporting Chain Table     //
        /////////////////////////////////////////////////////
        foreach (SIU_ReportingChain rcr in oshaData)
        {
            ThisSumRcd = new sumRcd
            {
                Dept = rcr.Dept,
                OSHA_NAICS = rcr.OSHA_NAICS_Code ?? "0",
                DeptName = rcr.DeptDesc ?? "",
                OSHA_TRIR_NAT_AVG = (rcr.OSHA_TRIR_NAT_AVG != null) ? (float)rcr.OSHA_TRIR_NAT_AVG : 0,
                OSHA_RIR_NAT_AVG = (rcr.OSHA_RIR_NAT_AVG != null) ? (float)rcr.OSHA_RIR_NAT_AVG : 0,
                OSHA_LTIR_NAT_AVG = (rcr.OSHA_LRIR_NAT_AVG != null) ? (float)rcr.OSHA_LRIR_NAT_AVG : 0,
                OSHA_DART_NAT_AVG = (rcr.OSHA_DART_NAT_AVG != null) ? (float)rcr.OSHA_DART_NAT_AVG : 0,
            };

            //////////////////////////////////
            // Add New Record To Dictionary //
            //////////////////////////////////
            sumRcds.Add(rcr.Dept, ThisSumRcd);
        }


        ////////////////////////////////////////////////////////////////////////////
        // Now Walk Through Each Incident Record And Accumulate Reporting Numbers //
        ////////////////////////////////////////////////////////////////////////////
        foreach (var incidentAccidentRcd in IncRcds)
        {
            ///////////////////////////////////////////////////////////////////////
            // I Pulled LInq Data From Multiple Tables And Returned As An Object //
            // So I Use Reflection To Break Eqach Data Field Into A Dictionary   //
            ///////////////////////////////////////////////////////////////////////
            foreach (PropertyInfo propertyInfo in incidentAccidentRcd.GetType().GetProperties(BindingFlags.Instance | BindingFlags.Public))
                dict[propertyInfo.Name] = propertyInfo.GetValue(incidentAccidentRcd, null);

            ////////////////////////////////////////////////////////////////////////////////////////////
            // Get The Month Of This Incident Date So We Know If We Should Include Data On This Sheet //
            ////////////////////////////////////////////////////////////////////////////////////////////
            int incDate = -1;
            if (incidentAccidentRcdDict.iaList.Inc_Occur_Date != null)
                incDate = incidentAccidentRcdDict.iaList.Inc_Occur_Date.Month;

            ///////////////////////////////////////////////////////////////////////////
            // Update Counters / Totals If this Event Occured In The Reporting Month //
            ///////////////////////////////////////////////////////////////////////////
            if (incDate == rptMon)
            {
                /////////////////////////////////////////////////////////
                // Can't process Records With No Associated Department //
                // Department Comes From Employee                      //
                /////////////////////////////////////////////////////////
                if (incidentAccidentRcdDict.EmpNo != null)
                {
                    ThisSumRcd = sumRcds[incidentAccidentRcdDict.EmpDept];

                    if (((string)incidentAccidentRcdDict.iaList.Inc_Type).ToLower() == "first aid")
                        ThisSumRcd.TotFirAidClasses++;

                    if ( incidentAccidentRcdDict.iaList.Osha_Lost_Days != null )
                        ThisSumRcd.TotLostDays += incidentAccidentRcdDict.iaList.Osha_Lost_Days;

                    if (incidentAccidentRcdDict.iaList.Emp_Veh_Involved != null)
                        ThisSumRcd.TotVehIncidents++;


                    if (incidentAccidentRcdDict.iaList.Cost_inHouse != null)
                        ThisSumRcd.TotInjInHouseCost +=  incidentAccidentRcdDict.iaList.Cost_inHouse;

                    if (incidentAccidentRcdDict.iaList.Cost_Incurred != null)
                        ThisSumRcd.TotInjIncurredCost +=  incidentAccidentRcdDict.iaList.Cost_Incurred;

                    if (incidentAccidentRcdDict.iaList.Cost_Reserve != null)
                        ThisSumRcd.TotInjReservedCost +=  incidentAccidentRcdDict.iaList.Cost_Reserve;


                    if (incidentAccidentRcdDict.iaList.Osha_Restrict_Days != null)
                        ThisSumRcd.TotRestrictDays += incidentAccidentRcdDict.iaList.Osha_Restrict_Days;

                    if (incidentAccidentRcdDict.iaList.Osha_Lost_Days != null)
                        ThisSumRcd.TotRestrictDays += incidentAccidentRcdDict.iaList.Osha_Lost_Days;

                    if ( incidentAccidentRcdDict.iaList.Osha_Record_Med != null && incidentAccidentRcdDict.iaList.Osha_Record_Med)
                        ThisSumRcd.TotMedRecordable++;

                    //////////////////////////////
                    // Update Dictionary Record //
                    //////////////////////////////
                    if (!sumRcds.ContainsKey(incidentAccidentRcdDict.EmpDept))
                        sumRcds.Add(incidentAccidentRcdDict.EmpDept, ThisSumRcd);
                }



            }

            dict.Clear();

        }

        /////////////////////////////////
        // Put Result Into Spreadsheet //
        /////////////////////////////////
        foreach ( sumRcd rcd in sumRcds.Values )
        {
            sl.SetCellValueNumeric(rowCount, 1, rcd.Dept);
            sl.SetCellValue(rowCount, 2, rcd.DeptName);
            sl.SetCellValueNumeric(rowCount, 4, rcd.TotHours.ToString(CultureInfo.InvariantCulture));

            sl.SetCellValueNumeric(rowCount, 5, rcd.TotFirAidClasses.ToString(CultureInfo.InvariantCulture));
            sl.SetCellValueNumeric(rowCount, 6, rcd.TotMedRecordable.ToString(CultureInfo.InvariantCulture));
            sl.SetCellValueNumeric(rowCount, 9, rcd.TotRestrictDays.ToString(CultureInfo.InvariantCulture));
            sl.SetCellValueNumeric(rowCount, 12, rcd.TotLostDays.ToString(CultureInfo.InvariantCulture));

            if (rcd.OSHA_NAICS != null )
                sl.SetCellValueNumeric(rowCount, 3, rcd.OSHA_NAICS.ToString(CultureInfo.InvariantCulture));
            sl.SetCellValueNumeric(rowCount, 8, rcd.OSHA_TRIR_NAT_AVG.ToString(CultureInfo.InvariantCulture));
            sl.SetCellValueNumeric(rowCount, 11, rcd.OSHA_RIR_NAT_AVG.ToString(CultureInfo.InvariantCulture));
            sl.SetCellValueNumeric(rowCount, 14, rcd.OSHA_LTIR_NAT_AVG.ToString(CultureInfo.InvariantCulture));
            sl.SetCellValueNumeric(rowCount, 16, rcd.OSHA_DART_NAT_AVG.ToString(CultureInfo.InvariantCulture));

            string trir = string.Format("=SUM({0})",    "(" +
                                                        SLConvert.ToCellReference(rowCount, 6) + "+" +
                                                        SLConvert.ToCellReference(rowCount, 9) + "+" +
                                                        SLConvert.ToCellReference(rowCount, 12) + ") * 200000/" +
                                                        SLConvert.ToCellReference(rowCount, 4));
            sl.SetCellValue(rowCount, 7, trir);


            
            string rir = string.Format("=SUM({0})", SLConvert.ToCellReference(rowCount, 9) + " * 200000 / " +
                                                        SLConvert.ToCellReference(rowCount, 4));
            sl.SetCellValue(rowCount, 10, rir);



            
            string ltir = string.Format("=SUM({0})", SLConvert.ToCellReference(rowCount, 12) + " * 200000 / " +
                                                        SLConvert.ToCellReference(rowCount, 4));
            sl.SetCellValue(rowCount, 13, ltir);


            string dart = string.Format("=SUM({0})", "(" +
                                                        SLConvert.ToCellReference(rowCount, 9) + "+" +
                                                        SLConvert.ToCellReference(rowCount, 12) + ") * 200000/" +
                                                        SLConvert.ToCellReference(rowCount, 4));

            sl.SetCellValue(rowCount, 15, dart);


            sl.SetCellValueNumeric(rowCount, 17, rcd.TotVehIncidents.ToString(CultureInfo.InvariantCulture));
            string vr = string.Format("=SUM({0})",  SLConvert.ToCellReference(rowCount, 17) + " * 100000 / " +
                                                    SLConvert.ToCellReference(rowCount, 4));
            sl.SetCellValue(rowCount, 18, vr);



            sl.SetCellValueNumeric(rowCount, 19, rcd.TotInjInHouseCost.ToString(CultureInfo.InvariantCulture));
            sl.SetCellValueNumeric(rowCount, 20, rcd.TotInjIncurredCost.ToString(CultureInfo.InvariantCulture));
            sl.SetCellValueNumeric(rowCount, 21, rcd.TotInjReservedCost.ToString(CultureInfo.InvariantCulture));

            string cmh = string.Format("=SUM({0})", "(" +
                                                    SLConvert.ToCellReference(rowCount, 19) + "+" +
                                                    SLConvert.ToCellReference(rowCount, 20) + "+" +
                                                    SLConvert.ToCellReference(rowCount, 21) + "+" +
                                                    SLConvert.ToCellReference(rowCount, 22) + "+" +
                                                    SLConvert.ToCellReference(rowCount, 23) + "+" +
                                                    SLConvert.ToCellReference(rowCount, 24) + ") / " +
                                                    SLConvert.ToCellReference(rowCount, 4));
            sl.SetCellValue(rowCount, 25, cmh);

            sl.SetCellStyle(rowCount, 1, rowCount, 25, styleDataCenter);
            sl.SetCellStyle(rowCount, 1, rowCount, 5, borderRightBlack);
            sl.SetCellStyle(rowCount, 8, rowCount, 8, borderRightBlack);
            sl.SetCellStyle(rowCount, 11, rowCount, 11, borderRightBlack);
            sl.SetCellStyle(rowCount, 14, rowCount, 14, borderRightBlack);
            sl.SetCellStyle(rowCount, 16, rowCount, 16, borderRightBlack);
            sl.SetCellStyle(rowCount, 18, rowCount, 18, borderRightBlack);
            sl.SetCellStyle(rowCount, 21, rowCount, 21, borderRightBlack);
            sl.SetCellStyle(rowCount, 24, rowCount, 24, borderRightBlack);
            sl.SetCellStyle(rowCount, 25, rowCount, 25, borderRightBlack);
            rowCount++;
        }

        return rowCount;
    }
    private void BuildSumSum(ref SLDocument sl, int firstDataRow,  int lastDataRow)
    {
        SLStyle styleHeaderBold = new SLStyle();
        styleHeaderBold.Alignment.Horizontal = HorizontalAlignmentValues.Center;
        styleHeaderBold.Alignment.Vertical = VerticalAlignmentValues.Center;
        styleHeaderBold.Font.Bold = true;
        styleHeaderBold.Border.TopBorder.BorderStyle = BorderStyleValues.Double;
        styleHeaderBold.Border.BottomBorder.BorderStyle = BorderStyleValues.Thick;
        sl.SetCellStyle(lastDataRow, 1, lastDataRow, 25, styleHeaderBold);

        ////////////////////////////////
        // Create Hard Column Borders //
        ////////////////////////////////
        SLStyle borderRightBlack = sl.CreateStyle();
        borderRightBlack.Border.RightBorder.BorderStyle = BorderStyleValues.Medium;
        borderRightBlack.Border.LeftBorder.Color = System.Drawing.Color.Black;
        sl.SetCellStyle(lastDataRow, 1, lastDataRow, 5, borderRightBlack);
        sl.SetCellStyle(lastDataRow, 8, lastDataRow, 8, borderRightBlack);
        sl.SetCellStyle(lastDataRow, 11, lastDataRow, 11, borderRightBlack);
        sl.SetCellStyle(lastDataRow, 14, lastDataRow, 14, borderRightBlack);
        sl.SetCellStyle(lastDataRow, 16, lastDataRow, 16, borderRightBlack);
        sl.SetCellStyle(lastDataRow, 18, lastDataRow, 18, borderRightBlack);
        sl.SetCellStyle(lastDataRow, 21, lastDataRow, 21, borderRightBlack);
        sl.SetCellStyle(lastDataRow, 24, lastDataRow, 24, borderRightBlack);
        sl.SetCellStyle(lastDataRow, 25, lastDataRow, 25, borderRightBlack);

        SLStyle greyBackground= sl.CreateStyle();
        greyBackground.Fill.SetPatternType(PatternValues.Solid);
        greyBackground.Fill.SetPatternForegroundColor(System.Drawing.Color.Black);

        sl.MergeWorksheetCells(lastDataRow, 1, lastDataRow, 3);
        sl.SetCellValue(lastDataRow, 1, "Grand Totals");


        for (int col = 4; col <= 25; col++)
        {
            string sum = string.Format("=SUM({0})", SLConvert.ToCellReference(firstDataRow, col) + " : " + SLConvert.ToCellReference(lastDataRow - 1, col));
            sl.SetCellValue(lastDataRow, col, sum);
        }
        sl.SetCellValue(lastDataRow, 8, "");
        sl.SetCellStyle(lastDataRow, 8, lastDataRow, 8, greyBackground);

        sl.SetCellValue(lastDataRow, 11, "");
        sl.SetCellStyle(lastDataRow, 11, lastDataRow, 11, greyBackground);

        sl.SetCellValue(lastDataRow, 14, "");
        sl.SetCellStyle(lastDataRow, 14, lastDataRow, 14, greyBackground);

        sl.SetCellValue(lastDataRow, 16, "");
        sl.SetCellStyle(lastDataRow, 16, lastDataRow, 16, greyBackground);

    }


    private static int BuildMasterSumData(ref SLDocument sl, ref List<SIU_ReportingChain> oshaData, int rowCount)
    {
        //////////////////////////
        // Setup Data Row Style //
        //////////////////////////
        SLStyle styleDataCenter = sl.CreateStyle();
        styleDataCenter.Font.FontName = "Arial";
        styleDataCenter.Font.FontSize = 11;
        styleDataCenter.Font.FontColor = System.Drawing.Color.Black;
        styleDataCenter.Alignment.Horizontal = HorizontalAlignmentValues.Center;
        styleDataCenter.Alignment.Vertical = VerticalAlignmentValues.Center;
        styleDataCenter.SetWrapText(true);

        ////////////////////////////////
        // Create Hard Column Borders //
        ////////////////////////////////
        SLStyle borderRightBlack = sl.CreateStyle();
        borderRightBlack.Border.RightBorder.BorderStyle = BorderStyleValues.Medium;
        borderRightBlack.Border.LeftBorder.Color = System.Drawing.Color.Black;

        //////////////////////////////////////////////////////////////////
        // kind Of Messy But Also A Little Cool                         //
        // Linq Returning an Anonymous Object Array                     //
        // So Using An Expando Object To Break It Out Into A Dictionary //
        //////////////////////////////////////////////////////////////////
        dynamic incidentAccidentRcdDict = new ExpandoObject();
        var dict = (IDictionary<string, object>)incidentAccidentRcdDict;

        /////////////////////////////////////////////////////////////////////////
        // Working Record Pulled From Dictionary Or Built To Add To Dictionary //
        /////////////////////////////////////////////////////////////////////////
        sumRcd ThisSumRcd;

        ///////////////////////////////////////////////
        // Dictionary Of ThisSumRcds indexed by Dept //
        ///////////////////////////////////////////////
        var sumRcds = new Dictionary<string, sumRcd>();

        /////////////////////////////////////////////////////
        // Build Dictionary Of Departments With Basic Osha //
        // Nat Stats Pulled From Reporting Chain Table     //
        /////////////////////////////////////////////////////
        foreach (SIU_ReportingChain rcr in oshaData)
        {
            ThisSumRcd = new sumRcd
            {
                Dept = rcr.Dept,
                OSHA_NAICS = rcr.OSHA_NAICS_Code ?? "0",
                DeptName = rcr.DeptDesc ?? "",
                OSHA_TRIR_NAT_AVG = (rcr.OSHA_TRIR_NAT_AVG != null) ? (float)rcr.OSHA_TRIR_NAT_AVG : 0,
                OSHA_RIR_NAT_AVG = (rcr.OSHA_RIR_NAT_AVG != null) ? (float)rcr.OSHA_RIR_NAT_AVG : 0,
                OSHA_LTIR_NAT_AVG = (rcr.OSHA_LRIR_NAT_AVG != null) ? (float)rcr.OSHA_LRIR_NAT_AVG : 0,
                OSHA_DART_NAT_AVG = (rcr.OSHA_DART_NAT_AVG != null) ? (float)rcr.OSHA_DART_NAT_AVG : 0,
            };

            //////////////////////////////////
            // Add New Record To Dictionary //
            //////////////////////////////////
            sumRcds.Add(rcr.Dept, ThisSumRcd);
        }




        /////////////////////////////////
        // Put Result Into Spreadsheet //
        /////////////////////////////////
        foreach (sumRcd rcd in sumRcds.Values)
        {
            sl.SetCellValueNumeric(rowCount, 1, rcd.Dept);

            sl.SetCellValue(rowCount, 2, rcd.DeptName);

            if (rcd.OSHA_NAICS != null)
                sl.SetCellValueNumeric(rowCount, 3, rcd.OSHA_NAICS.ToString(CultureInfo.InvariantCulture));

            sl.SetCellValueNumeric(rowCount, 4, rcd.TotHours.ToString(CultureInfo.InvariantCulture));

            string WorksheetSum = string.Format("=SUM(January!{0}+February!{0}+March!{0}+April!{0}+May!{0}+June!{0}+July!{0}+August!{0}+September!{0}+October!{0}+November!{0}+December!{0})", 
                                            SLConvert.ToCellReference(rowCount, 4));
            sl.SetCellValue(rowCount, 4, WorksheetSum);

            WorksheetSum = string.Format("=SUM(January!{0}+February!{0}+March!{0}+April!{0}+May!{0}+June!{0}+July!{0}+August!{0}+September!{0}+October!{0}+November!{0}+December!{0})",
                                            SLConvert.ToCellReference(rowCount, 5));
            sl.SetCellValue(rowCount, 5, WorksheetSum);

            WorksheetSum = string.Format("=SUM(January!{0}+February!{0}+March!{0}+April!{0}+May!{0}+June!{0}+July!{0}+August!{0}+September!{0}+October!{0}+November!{0}+December!{0})",
                                            SLConvert.ToCellReference(rowCount, 6));
            sl.SetCellValue(rowCount, 6, WorksheetSum);

            string trir = string.Format("=SUM({0})", "(" +
                                                        SLConvert.ToCellReference(rowCount, 6) + "+" +
                                                        SLConvert.ToCellReference(rowCount, 9) + "+" +
                                                        SLConvert.ToCellReference(rowCount, 12) + ") * 200000/" +
                                                        SLConvert.ToCellReference(rowCount, 4));
            sl.SetCellValue(rowCount, 7, trir);

            sl.SetCellValueNumeric(rowCount, 8, rcd.OSHA_TRIR_NAT_AVG.ToString(CultureInfo.InvariantCulture));

            WorksheetSum = string.Format("=SUM(January!{0}+February!{0}+March!{0}+April!{0}+May!{0}+June!{0}+July!{0}+August!{0}+September!{0}+October!{0}+November!{0}+December!{0})",
                                            SLConvert.ToCellReference(rowCount, 9));
            sl.SetCellValue(rowCount, 9, WorksheetSum);

            string rir = string.Format("=SUM({0})", SLConvert.ToCellReference(rowCount, 9) + " * 200000 / " +
                                                        SLConvert.ToCellReference(rowCount, 4));
            sl.SetCellValue(rowCount, 10, rir);

            sl.SetCellValueNumeric(rowCount, 11, rcd.OSHA_RIR_NAT_AVG.ToString(CultureInfo.InvariantCulture));

            WorksheetSum = string.Format("=SUM(January!{0}+February!{0}+March!{0}+April!{0}+May!{0}+June!{0}+July!{0}+August!{0}+September!{0}+October!{0}+November!{0}+December!{0})",
                                            SLConvert.ToCellReference(rowCount, 12));
            sl.SetCellValue(rowCount, 12, WorksheetSum);

            string ltir = string.Format("=SUM({0})", SLConvert.ToCellReference(rowCount, 12) + " * 200000 / " +
                                                        SLConvert.ToCellReference(rowCount, 4));
            sl.SetCellValue(rowCount, 13, ltir);

            sl.SetCellValueNumeric(rowCount, 14, rcd.OSHA_LTIR_NAT_AVG.ToString(CultureInfo.InvariantCulture));

            string dart = string.Format("=SUM({0})", "(" +
                                                        SLConvert.ToCellReference(rowCount, 9) + "+" +
                                                        SLConvert.ToCellReference(rowCount, 12) + ") * 200000/" +
                                                        SLConvert.ToCellReference(rowCount, 4));

            sl.SetCellValue(rowCount, 15, dart);

            sl.SetCellValueNumeric(rowCount, 16, rcd.OSHA_DART_NAT_AVG.ToString(CultureInfo.InvariantCulture));

            WorksheetSum = string.Format("=SUM(January!{0}+February!{0}+March!{0}+April!{0}+May!{0}+June!{0}+July!{0}+August!{0}+September!{0}+October!{0}+November!{0}+December!{0})",
                                            SLConvert.ToCellReference(rowCount, 17));
            sl.SetCellValue(rowCount, 17, WorksheetSum);

            //string vr = string.Format("=SUM({0})", SLConvert.ToCellReference(rowCount, 17) + " * 100000 / " +
            //                                        SLConvert.ToCellReference(rowCount, 4));
            string vr = string.Format("=SUM({0})", SLConvert.ToCellReference(rowCount, 17) + " * " + SLConvert.ToCellReference(rowCount, 4) + " / 100000");
            sl.SetCellValue(rowCount, 18, vr);

            WorksheetSum = string.Format("=SUM(January!{0}+February!{0}+March!{0}+April!{0}+May!{0}+June!{0}+July!{0}+August!{0}+September!{0}+October!{0}+November!{0}+December!{0})",
                                            SLConvert.ToCellReference(rowCount, 19));
            sl.SetCellValue(rowCount, 19, WorksheetSum);

            WorksheetSum = string.Format("=SUM(January!{0}+February!{0}+March!{0}+April!{0}+May!{0}+June!{0}+July!{0}+August!{0}+September!{0}+October!{0}+November!{0}+December!{0})",
                                            SLConvert.ToCellReference(rowCount, 20));
            sl.SetCellValue(rowCount, 20, WorksheetSum);

            WorksheetSum = string.Format("=SUM(January!{0}+February!{0}+March!{0}+April!{0}+May!{0}+June!{0}+July!{0}+August!{0}+September!{0}+October!{0}+November!{0}+December!{0})",
                                            SLConvert.ToCellReference(rowCount, 21));
            sl.SetCellValue(rowCount, 21, WorksheetSum);

            WorksheetSum = string.Format("=SUM(January!{0}+February!{0}+March!{0}+April!{0}+May!{0}+June!{0}+July!{0}+August!{0}+September!{0}+October!{0}+November!{0}+December!{0})",
                                            SLConvert.ToCellReference(rowCount, 21));
            sl.SetCellValue(rowCount, 22, WorksheetSum);

            WorksheetSum = string.Format("=SUM(January!{0}+February!{0}+March!{0}+April!{0}+May!{0}+June!{0}+July!{0}+August!{0}+September!{0}+October!{0}+November!{0}+December!{0})",
                                            SLConvert.ToCellReference(rowCount, 21));
            sl.SetCellValue(rowCount, 23, WorksheetSum);

            WorksheetSum = string.Format("=SUM(January!{0}+February!{0}+March!{0}+April!{0}+May!{0}+June!{0}+July!{0}+August!{0}+September!{0}+October!{0}+November!{0}+December!{0})",
                                            SLConvert.ToCellReference(rowCount, 21));
            sl.SetCellValue(rowCount, 24, WorksheetSum);


            string cmh = string.Format("=SUM({0})", "(" +
                                                    SLConvert.ToCellReference(rowCount, 19) + "+" +
                                                    SLConvert.ToCellReference(rowCount, 20) + "+" +
                                                    SLConvert.ToCellReference(rowCount, 21) + "+" +
                                                    SLConvert.ToCellReference(rowCount, 22) + "+" +
                                                    SLConvert.ToCellReference(rowCount, 23) + "+" +
                                                    SLConvert.ToCellReference(rowCount, 24) + ") / " +
                                                    SLConvert.ToCellReference(rowCount, 4));
            sl.SetCellValue(rowCount, 25, cmh);

            sl.SetCellStyle(rowCount, 1, rowCount, 25, styleDataCenter);
            sl.SetCellStyle(rowCount, 1, rowCount, 5, borderRightBlack);
            sl.SetCellStyle(rowCount, 8, rowCount, 8, borderRightBlack);
            sl.SetCellStyle(rowCount, 11, rowCount, 11, borderRightBlack);
            sl.SetCellStyle(rowCount, 14, rowCount, 14, borderRightBlack);
            sl.SetCellStyle(rowCount, 16, rowCount, 16, borderRightBlack);
            sl.SetCellStyle(rowCount, 18, rowCount, 18, borderRightBlack);
            sl.SetCellStyle(rowCount, 21, rowCount, 21, borderRightBlack);
            sl.SetCellStyle(rowCount, 24, rowCount, 24, borderRightBlack);
            sl.SetCellStyle(rowCount, 25, rowCount, 25, borderRightBlack);
            rowCount++;
        }

        return rowCount;
    }
}