using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;

using System.IO;
using DocumentFormat.OpenXml.Office2010.PowerPoint;
using ShermcoYou.DataTypes;


using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Spreadsheet;

using SpreadsheetLight;
using SpreadsheetLight.Charts;


public partial class Safety_SafetyPays_TabPointsRpt : System.Web.UI.Page
{
    DateTime _start = DateTime.Parse("1/1/2013");
    DateTime _end = DateTime.Parse("2/1/2013");
    _PrjPts pts;

    protected void Page_Load(object sender, EventArgs e)
    {
        //////////////////////////////////////////////////////////
        // But Unless This Is A New / Refresh Form, We Are Done //
        //////////////////////////////////////////////////////////
        if (IsPostBack)
        {
            _start = DateTime.Parse(StartDate.Value);
            _end = DateTime.Parse(EndDate.Value);
            return;
        }

        ////////////////////////////
        // Show The Employee Name //
        ////////////////////////////
        lblEmpName.InnerText = SqlServer_Impl.GetEmployeeNameByNo(BusinessLayer.UserEmpID);

        ///////////////////////////////////////////
        // Bury The Employee ID For AJAX Lookups //
        ///////////////////////////////////////////
        hlblEID.InnerText = BusinessLayer.UserEmpID;
    }

    ////////////////////////////////////////////////////////////
    // Type Used In Dictionary To Track Monthly Totals By Emp //
    ////////////////////////////////////////////////////////////
    private class EmpByMon
    {
        public int[] Months = new int[14];
    }

    ////////////////////////////////////////////////////////////
    // Type Used In Dictionary To Track Monthly Totals By Emp //
    ////////////////////////////////////////////////////////////
    private class EmpDtl
    {
        public int[] ReasonPts;
    }



    protected void Consolidated_Click(object sender, EventArgs e)
    {
        //////////////////////////////////
        // Build The Document Framework //
        //////////////////////////////////
        SLDocument sl = new SLDocument
        {
            DocumentProperties =
            {
                Creator = "Larry Truitt",
                ContentStatus = "Generated " + DateTime.Now,
                Title = "Safety Pays Tabulations",
                Description = "Safety Pays Tracking Report generated by SiYOU.Shermco.Com"
            }
        };

        ////////////////////////////////////
        // Build Points Projection Tables //
        ////////////////////////////////////
        pts = new _PrjPts(_start, _end);

        //////////////////////
        // Setup The Sheets //
        //////////////////////
        sl.RenameWorksheet(SLDocument.DefaultFirstSheetName, "By Dept");
        sl.AddWorksheet("By Emp");
        sl.AddWorksheet("Bar Graph");
        sl.AddWorksheet("Prj Pts Calc");
        sl.AddWorksheet("Std Prj Pts");
        sl.AddWorksheet("Pts by Type");

        sl.AddWorksheet("Sum Submissions");
        sl.AddWorksheet("Dtl Submissions");

        ///////////////////////////////////////////////
        // Build The Summary By Department Worksheet //
        ///////////////////////////////////////////////
        sl.SelectWorksheet("By Dept");
        BuildDeptData(ref sl);

        ////////////////////////////////////////////
        // Build The Detail By EMployee Worksheet //
        ////////////////////////////////////////////
        sl.SelectWorksheet("By Emp");
        BuildEmpDtlData(ref sl);

        /////////////////////////////////////////////////////////////////////////
        // Build A Worksheet Showing Calculated Projected Points Over A Period //
        /////////////////////////////////////////////////////////////////////////
        sl.SelectWorksheet("Prj Pts Calc");
        BuildPrjDtlData(ref sl);

        /////////////////////////////////////////////////////////
        // Build A Worksheet Showing Default Projection Points //
        /////////////////////////////////////////////////////////
        sl.SelectWorksheet("Std Prj Pts");
        BuildPrjStdData(ref sl);

        /////////////////////////
        // Show Points By Type //
        /////////////////////////
        sl.SelectWorksheet("Pts by Type");
        BuildPtTypeData(ref sl);

        ///////////////////////////////////////////////
        // Build Deptartment Managers Summary Report //
        ///////////////////////////////////////////////
        sl.SelectWorksheet("Sum Submissions");
        BuildDeptSumData(ref sl);

        ///////////////////
        // Raw Data Dump //
        ///////////////////
        sl.SelectWorksheet("Dtl Submissions");
        BuildRawData(ref sl);


        sl.SelectWorksheet("By Dept");
        Response.Clear();
        Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
        Response.AddHeader("Content-Disposition", "attachment; filename=spPoints.xlsx");
        sl.SaveAs(Response.OutputStream);
        Response.End();
    }

    private void BuildDeptData(ref SLDocument sl)
    {
        Dictionary<int, string> months = new Dictionary<int, string>();                 // List Of Months  < 1, "1" >

        EmpByMon sumEmpPts;                                                             // Array [14] (One For Each Month  [0] For Sum 
        Dictionary<string, EmpByMon> sumEmpMon = new Dictionary<string, EmpByMon>();    // Sum By Emp  <"empNo",  Array[14] As Above

        int startRowCnt = 1;
        int endRowCnt = 1;

        /////////////////////////
        // Build Sheet Outline //
        /////////////////////////
        BuildDeptPage(ref sl);

        if (_end.Day == 1)
            _end = _end.AddDays(-1);

        /////////////////////////////////////////////////////////////
        // Get Employee Points Detail Records For Reporting Period //
        /////////////////////////////////////////////////////////////
        var data = SqlServer_Impl.GetAdminPointsRptEmpPointsFromProd(_start, _end).OrderBy("EmpDept");

        ///////////////////////////////////////////////////////////
        // Build A Summary Array For Each Employee For Each Dept //
        //////////////////////////////////////////////////////////
        foreach (SIU_Points_Rpt rptRcd in data)
        {
            if (sumEmpMon.ContainsKey(rptRcd.Emp_No))
            {
                sumEmpPts = sumEmpMon[rptRcd.Emp_No];
                sumEmpPts.Months[rptRcd.EventDate.Month] += rptRcd.Points;
                sumEmpPts.Months[13] += rptRcd.Points;
            }
            else
            {
                sumEmpPts = new EmpByMon();
                sumEmpPts.Months[rptRcd.EventDate.Month] = rptRcd.Points;
                sumEmpPts.Months[13] = rptRcd.Points;
                sumEmpMon.Add(rptRcd.Emp_No, sumEmpPts);
            }


            if (!months.ContainsKey(rptRcd.EventDate.Month))
                months.Add(rptRcd.EventDate.Month, rptRcd.EventDate.Month.ToString(CultureInfo.InvariantCulture));
            months = months.OrderBy(x => x.Value).ToDictionary(x => x.Key, x => x.Value);
        }

        string prevDept = "FIRSTRCD";
        string prevEmp = "FIRSTRCD";
        int deptSum = 0;

        ///////////////////////////////////////////////////////////////////
        // Walking Back Through The Data Of Emp Detail Rcds By Dept, Emp //
        ///////////////////////////////////////////////////////////////////
        foreach (SIU_Points_Rpt rptRcd in data)
        {
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // First Time We See An Emp -- Grab Summary Record From Above (sumEmpMon) And Produce A  Dept Detail Line //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////
            if (prevEmp != rptRcd.Emp_No)
            {
                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                // But If We Switched To A New Department -- Write Out Summary Row, Then New Deaprtment Header, Then Column Headers //
                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                if (prevDept != rptRcd.EmpDept)
                {
                    deptSum = Convert.ToInt32(pts.GetPrjSumForDept(rptRcd.EmpDept)[0]);

                    ////////////////////////////////
                    // Add Sum Row For Department //
                    ////////////////////////////////
                    if (prevDept != "FIRSTRCD")
                    {
                        ////////////////////////////////
                        // Build Summary Row For Dept //
                        ////////////////////////////////
                        BuildDeptSum(ref sl, startRowCnt, endRowCnt, ref months);

                        //////////////////////////////////
                        // Skip 2 Rows Before Next Dept //
                        //////////////////////////////////
                        startRowCnt = endRowCnt + 2;
                        endRowCnt = startRowCnt;
                    }

                    /////////////////////////////////
                    // Header For Next Deptartment //
                    /////////////////////////////////
                    BuildDeptHeader(ref sl, endRowCnt,  rptRcd);
                    endRowCnt++;

                    //////////////////////////
                    // Table Column Headers //
                    //////////////////////////
                    BuildDeptColumnHeader(ref sl, endRowCnt, ref months);
                    endRowCnt++;

                    prevDept = rptRcd.EmpDept;
                }

                ///////////////////////////////////////
                // Write Out Employee Summary Record //
                ///////////////////////////////////////
                sumEmpPts = sumEmpMon[rptRcd.Emp_No];

                BuildDeptDtl(ref sl, endRowCnt, rptRcd.EmpName, ref sumEmpPts, deptSum, ref months);

                prevEmp = rptRcd.Emp_No;
                endRowCnt++;
            }
        }

        /////////////////////////////////////
        // Build Summary Row For Last Dept //
        /////////////////////////////////////
        BuildDeptSum(ref sl, startRowCnt, endRowCnt, ref months);
    }
    private void BuildDeptPage(ref SLDocument sl)
    {
        SLPageSettings ps = new SLPageSettings();

        SLFont ft = sl.CreateFont();
        ft.SetFont("Impact", 16);
        ps.AppendOddHeader(ft, "Points Calculated For " + _start.ToShortDateString() + " - " + _end.ToShortDateString());
        ps.AppendEvenHeader(ft, "Points Calculated For " + _start.ToShortDateString() + " - " + _end.ToShortDateString());

        ps.AppendOddFooter(ft, "page ");
        ps.AppendOddFooter(SLHeaderFooterFormatCodeValues.PageNumber);
        ps.AppendOddFooter(" of ");
        ps.AppendOddFooter(SLHeaderFooterFormatCodeValues.NumberOfPages);

        ps.AppendEvenFooter(ft, "page ");
        ps.AppendEvenFooter(SLHeaderFooterFormatCodeValues.PageNumber);
        ps.AppendEvenFooter(" of ");
        ps.AppendEvenFooter(SLHeaderFooterFormatCodeValues.NumberOfPages);

        //ps.View = SheetViewValues.PageLayout;

        sl.SetPageSettings(ps);


        sl.SetColumnWidth("A", 20);
        sl.SetColumnWidth("B", 9);
        sl.SetColumnWidth("C", 9);
    }
    private void BuildDeptHeader(ref SLDocument sl, int Row, SIU_Points_Rpt rptRcd)
    {
        SLStyle styleDeptHeader = sl.CreateStyle();
        styleDeptHeader.Font.FontName = "Calibri";
        styleDeptHeader.Font.FontSize = 18;
        styleDeptHeader.Font.Bold = true;

        sl.MergeWorksheetCells(Row, 1, Row, 2);
        sl.SetCellValue(Row, 1, "Department " + ((rptRcd.EmpDept.Length > 0) ? rptRcd.EmpDept : "Missing"));
        sl.SetCellStyle(Row, 1, styleDeptHeader);

        sl.MergeWorksheetCells(Row, 3, Row, 7);        
    }
    private void BuildDeptColumnHeader(ref SLDocument sl, int Row, ref Dictionary<int, string> months)
    {
        SLStyle styleRowHeader = sl.CreateStyle();
        styleRowHeader.Font.FontName = "Calibri";
        styleRowHeader.Font.FontSize = 11;
        styleRowHeader.Font.Bold = true;
        styleRowHeader.Alignment.Horizontal = HorizontalAlignmentValues.Center;
        styleRowHeader.SetWrapText(true);

        //////////////////////////////////////////
        // Start New Dept -- Add Column Headers //
        //////////////////////////////////////////                        
        sl.SetCellValue(Row, 1, "Name");
        sl.SetCellValue(Row, 2, "Points");
        sl.SetCellValue(Row, 3, "Planned Points");

        int col = 4;
        foreach (KeyValuePair<int, string> pair in months)
        {
            sl.SetColumnWidth(col, 11);
            sl.SetCellValue(Row, col++, CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(pair.Key));
        }
        sl.SetCellValue(Row, col, "Plan Pct");

        sl.SetCellStyle(Row, 1, Row, col, styleRowHeader);        
    }
    private void BuildDeptSum(ref SLDocument sl, int startRowCnt, int endRowCnt, ref Dictionary<int, string> months)
    {
        int col = 0;

        int deptHeadRow = startRowCnt;

        SLStyle styleRowSum = sl.CreateStyle();
        styleRowSum.Font.FontName = "Calibri";
        styleRowSum.Font.FontSize = 12;
        styleRowSum.Font.Bold = true;
        styleRowSum.Font.FontColor = System.Drawing.Color.White;
        styleRowSum.Fill.SetPatternType(PatternValues.Solid);
        styleRowSum.Fill.SetPatternForegroundColor(System.Drawing.Color.Black);
        styleRowSum.Alignment.Horizontal = HorizontalAlignmentValues.Center;

        ////////////////////////////////////////////////////////////////////////////////////////////////
        // Get Projections For Department (Summed Across Reporting Period -- Applies To Each Employee //
        ////////////////////////////////////////////////////////////////////////////////////////////////

        sl.SetCellValue(endRowCnt, 1, "Total");

        ////////////////////////////////
        // Sum Column Points For Dept //
        ////////////////////////////////
        string s1 = string.Format("=SUM({0})", SLConvert.ToCellRange(startRowCnt + 2, 2, endRowCnt - 1, 2));
        sl.SetCellValue(endRowCnt, 2, s1);

        ///////////////////////////////////////
        // Sum Column Panned Points for Dept //
        ///////////////////////////////////////
        string s2 = string.Format("=SUM({0})", SLConvert.ToCellRange(startRowCnt + 2, 3, endRowCnt - 1, 3));
        sl.SetCellValue(endRowCnt, 3, s2);

        ////////////////////////////////////////////
        // Sum The By-Point-Type Columns For Dept //
        ////////////////////////////////////////////
        col = 4;
        foreach (KeyValuePair<int, string> pair in months)
        {
            string s3 = string.Format("=SUM({0})", SLConvert.ToCellRange(startRowCnt + 2, col, endRowCnt - 1, col));
            sl.SetCellValue(endRowCnt, col++, s3);
        }

        /////////////////////////////////
        // Formula For % Plan for Dept //
        /////////////////////////////////
        string s4 = "=TEXT( (B" + (endRowCnt) + "/C" + (endRowCnt) + "),\"#%\")";
        s4 = "=(B" + endRowCnt + "/C" + endRowCnt + ") * 100";
        sl.SetCellValue(endRowCnt, col, s4);

        ////////////////////////
        // Format The Sum Row //
        ////////////////////////
        sl.SetCellStyle(endRowCnt, 1, endRowCnt, col, styleRowSum);

        ///////////////////////////////////////////
        // Create Collapsed Group Of Detail Rows //
        ///////////////////////////////////////////
        sl.GroupRows(deptHeadRow + 1, endRowCnt - 1);
        sl.CollapseRows(endRowCnt);


        ////////////////////////////////////
        // Add Dept Pct of Plan Bar Chart //
        ////////////////////////////////////
        string s6 = "=G" + endRowCnt;
        sl.SetCellValue(deptHeadRow, 3, s6);

        SLConditionalFormatting cf = new SLConditionalFormatting(deptHeadRow, 3, deptHeadRow, 3);
        cf.SetCustomDataBar(true, 0, 100,
            SLConditionalFormatMinMaxValues.Number, "0",
            SLConditionalFormatMinMaxValues.Number, "100",
            System.Drawing.Color.Blue);
        sl.AddConditionalFormatting(cf);    
    }
    private void BuildDeptDtl(ref SLDocument sl, int Row, string EmpName, ref EmpByMon sumEmpPts, int deptSum, ref Dictionary<int, string> months)
    {
        SLStyle styleRow = sl.CreateStyle();
        styleRow.Font.FontName = "Calibri";
        styleRow.Font.FontSize = 11;
        styleRow.Alignment.Horizontal = HorizontalAlignmentValues.Center;

        sl.SetCellValue(Row, 1, EmpName);
        sl.SetCellValue(Row, 2, sumEmpPts.Months[13]);
        sl.SetCellValue(Row, 3, deptSum);

        int col = 4;
        foreach (KeyValuePair<int, string> pair in months)
            sl.SetCellValue(Row, col++, sumEmpPts.Months[pair.Key]);

        string s5 = "=TEXT( (B" + (Row) + "/C" + (Row) + "),\"#%\")";
        s5 = "=(B" + Row + "/C" + Row + ") * 100";
        sl.SetCellValue(Row, col, s5);
        sl.SetCellStyle(Row, 2, Row, col, styleRow);

        ///////////////////////////////////////////////
        // Add Pct of Plan Bar Chart Into Line Items //
        ///////////////////////////////////////////////
        SLConditionalFormatting cf = new SLConditionalFormatting(Row, 7, Row, 7);
        cf.SetCustomDataBar(false, 0, 100,
            SLConditionalFormatMinMaxValues.Number, "0",
            SLConditionalFormatMinMaxValues.Number, "100",
            System.Drawing.Color.Blue);
        sl.AddConditionalFormatting(cf);        
    }

    protected void BuildEmpDtlData(ref SLDocument sl)
    {
        System.Text.UnicodeEncoding uniEncoding = new System.Text.UnicodeEncoding();
        if (_end.Day == 1)
            _end = _end.AddDays(-1);

        //////////////////////////////////////////////////////////////////////////////////////////
        // Buid Dict To Hold Freq Used Conversion of PointsType Index to PointsType Description //
        //////////////////////////////////////////////////////////////////////////////////////////
        Dictionary<int, string> ptTypes = SqlServer_Impl.GetAutoCompletePointTypes().ToDictionary(mc => mc.UID, mc => mc.Description);
        EmpDtl ed = new EmpDtl { ReasonPts = new int[ptTypes.Count] };
        SIU_Points_Rpt prevRcd = new SIU_Points_Rpt { Emp_No = "FIRSTRCD" };

        var data = SqlServer_Impl.GetAdminPointsRptEmpPoints(_start, _end);

        BuildEmpPage(ref sl);
        BuildEmpColumnHeader(ref sl, 1);

        int row = 2;
        int DeptStartRow = 2;

        ////////////////////////////////
        // Walk Through Eash Data Row //
        ////////////////////////////////
        foreach (SIU_Points_Rpt rptRcd in data)
        {
            /////////////////////////////////////////////////////////////////////////////
            // For Each Data Record For A Given Employee, Write The Cell To The  Table //
            /////////////////////////////////////////////////////////////////////////////
            if (prevRcd.Emp_No != rptRcd.Emp_No && prevRcd.Emp_No != "FIRSTRCD")
            {
                BuildEmpDtl(ref sl, row++, "(" + prevRcd.Emp_No + ") " + prevRcd.EmpName, prevRcd.EmpDept, ref ed);
                ed.ReasonPts = new int[ptTypes.Count];

                if (prevRcd.EmpDept != rptRcd.EmpDept)
                {
                    BuildEmpSum(ref sl, DeptStartRow, row - 1, 4, ptTypes.Count + 5, prevRcd.EmpDept + " Totals");
                    row += 2;
                    DeptStartRow = row;
                }
            }


            ed.ReasonPts[rptRcd.ReasonForPoints - 1] += rptRcd.Points;
            prevRcd = rptRcd;
        }
        BuildEmpDtl(ref sl, row, "(" + prevRcd.Emp_No + ") " + prevRcd.EmpName, prevRcd.EmpDept, ref ed);
        BuildEmpSum(ref sl, DeptStartRow, row - 1, 4, ptTypes.Count + 5, prevRcd.EmpDept + " Totals");

    }
    private void BuildEmpPage(ref SLDocument sl)
    {
        SLPageSettings ps = new SLPageSettings();

        SLFont ft = sl.CreateFont();
        ft.SetFont("Impact", 16);
        ps.AppendOddHeader(ft, "Points Calculated For " + _start.ToShortDateString() + " - " + _end.ToShortDateString());
        ps.AppendEvenHeader(ft, "Points Calculated For " + _start.ToShortDateString() + " - " + _end.ToShortDateString());

        ps.AppendOddFooter(ft, "page ");
        ps.AppendOddFooter(SLHeaderFooterFormatCodeValues.PageNumber);
        ps.AppendOddFooter(" of ");
        ps.AppendOddFooter(SLHeaderFooterFormatCodeValues.NumberOfPages);

        ps.AppendEvenFooter(ft, "page ");
        ps.AppendEvenFooter(SLHeaderFooterFormatCodeValues.PageNumber);
        ps.AppendEvenFooter(" of ");
        ps.AppendEvenFooter(SLHeaderFooterFormatCodeValues.NumberOfPages);

        sl.SetColumnWidth("A", 25);
    }
    private void BuildEmpColumnHeader(ref SLDocument sl, int Row)
    {
        SLStyle styleRowHeader = sl.CreateStyle();
        styleRowHeader.Font.FontName = "Calibri";
        styleRowHeader.Font.FontSize = 11;
        styleRowHeader.Font.Bold = true;
        styleRowHeader.Alignment.Horizontal = HorizontalAlignmentValues.Center;
        styleRowHeader.Alignment.Vertical = VerticalAlignmentValues.Bottom;
        styleRowHeader.SetWrapText(true);
        styleRowHeader.Border.BottomBorder.BorderStyle = BorderStyleValues.Medium;
        styleRowHeader.Border.RightBorder.Color = System.Drawing.Color.Black;

        SLStyle styleCellRBorder = sl.CreateStyle();
        styleCellRBorder.Border.RightBorder.BorderStyle = BorderStyleValues.Medium;
        styleCellRBorder.Border.RightBorder.Color = System.Drawing.Color.Black;
        
        //////////////////////////////////////////
        // Start New Dept -- Add Column Headers //
        //////////////////////////////////////////                        
        sl.SetCellValue(Row, 1, "Name");
        sl.SetCellValue(Row, 2, "Dept");
        sl.SetCellValue(Row, 3, "Eligibility");

        int col = 4;
        Dictionary<int, string> ptTypes = SqlServer_Impl.GetAutoCompletePointTypes().ToDictionary(mc => mc.UID, mc => mc.Description);
        foreach (KeyValuePair<int, string> pair in ptTypes)
        {
            sl.SetColumnWidth(col, 11);
            sl.SetCellValue(Row, col++, pair.Value);
        }
        sl.SetCellValue(Row, col, "Total");

        sl.SetCellStyle(Row, 1, Row, col, styleRowHeader);
        sl.SetCellStyle(Row, 3, styleCellRBorder);

        ///////////////////////////
        // Freeze the top 2 rows //
        ///////////////////////////
        sl.FreezePanes(1, 1);
    }
    private void BuildEmpDtl(ref SLDocument sl, int row, string EmpName, string EmpDept,  ref EmpDtl SumPtByType )
    {
        SLStyle styleRow = sl.CreateStyle();
        styleRow.Font.FontName = "Calibri";
        styleRow.Font.FontSize = 11;
        styleRow.Alignment.Horizontal = HorizontalAlignmentValues.Center;

        sl.SetCellValue(row, 1, EmpName);
        sl.SetCellValue(row, 2, EmpDept);
        sl.SetCellValue(row, 3, "-");

        int col = 4;
        foreach (var ptCnt in SumPtByType.ReasonPts)
            sl.SetCellValueNumeric(row, col++, ((ptCnt > 0) ? ptCnt.ToString(CultureInfo.InvariantCulture) : ""));

        string s1 = "=SUM(" + SLConvert.ToCellRange(row, 4, row, col - 1) + ")";
        sl.SetCellValue(row, col, s1);

        sl.SetCellStyle(row, 2, row, col, styleRow);        
    }
    private void BuildEmpSum(ref SLDocument sl, int startRowCnt, int endRowCnt, int startCol, int endCol, string totTxt)
    {
        SLStyle styleRowSum = sl.CreateStyle();
        styleRowSum.Font.FontName = "Calibri";
        styleRowSum.Font.FontSize = 12;
        styleRowSum.Font.Bold = true;
        styleRowSum.Font.FontColor = System.Drawing.Color.White;
        styleRowSum.Fill.SetPatternType(PatternValues.Solid);
        styleRowSum.Fill.SetPatternForegroundColor(System.Drawing.Color.Black);
        styleRowSum.Alignment.Horizontal = HorizontalAlignmentValues.Center;

        sl.SetCellValue(endRowCnt + 1, 1, totTxt);

        ///////////////////////
        // Sum Column Points //
        ///////////////////////
        for (int col = startCol; col < endCol; col++ )
        {
            string s1 = "=SUM(" + SLConvert.ToCellRange(startRowCnt, col, endRowCnt, col) + ")";
            sl.SetCellValue(endRowCnt + 1, col, s1);
        }

        ////////////////////////
        // Format The Sum Row //
        ////////////////////////
        sl.SetCellStyle(endRowCnt + 1, 1, endRowCnt + 1, endCol, styleRowSum);

        ///////////////////////////////////////////
        // Create Collapsed Group Of Detail Rows //
        ///////////////////////////////////////////
        sl.GroupRows(startRowCnt, endRowCnt);
    }

    protected void BuildPrjDtlData(ref SLDocument sl)
    {
        System.Text.UnicodeEncoding uniEncoding = new System.Text.UnicodeEncoding();
        if (_end.Day == 1)
            _end = _end.AddDays(-1);

        BuildPrjPage(ref sl);

        int row = BuildPrjSumTable(ref sl, 1);
        BuildPrjMonTable(ref sl, row);

    }
    private void BuildPrjPage(ref SLDocument sl)
    {
        SLPageSettings ps = new SLPageSettings();

        SLFont ft = sl.CreateFont();
        ft.SetFont("Impact", 16);
        ps.AppendOddHeader(ft, "Points Calculated For " + _start.ToShortDateString() + " - " + _end.ToShortDateString());
        ps.AppendEvenHeader(ft, "Points Calculated For " + _start.ToShortDateString() + " - " + _end.ToShortDateString());

        ps.AppendOddFooter(ft, "page ");
        ps.AppendOddFooter(SLHeaderFooterFormatCodeValues.PageNumber);
        ps.AppendOddFooter(" of ");
        ps.AppendOddFooter(SLHeaderFooterFormatCodeValues.NumberOfPages);

        ps.AppendEvenFooter(ft, "page ");
        ps.AppendEvenFooter(SLHeaderFooterFormatCodeValues.PageNumber);
        ps.AppendEvenFooter(" of ");
        ps.AppendEvenFooter(SLHeaderFooterFormatCodeValues.NumberOfPages);
    }
    private void BuildPrjColumnHeader(ref SLDocument sl, int Row, string TableHeaderText)
    {
        SLStyle styleRowHeader = sl.CreateStyle();
        styleRowHeader.Font.FontName = "Calibri";
        styleRowHeader.Font.FontSize = 11;
        styleRowHeader.Font.Bold = true;
        styleRowHeader.Alignment.Horizontal = HorizontalAlignmentValues.Center;
        styleRowHeader.Alignment.Vertical = VerticalAlignmentValues.Bottom;
        styleRowHeader.SetWrapText(true);
        styleRowHeader.Border.BottomBorder.BorderStyle = BorderStyleValues.Medium;

        SLStyle styleCellRBorder = sl.CreateStyle();
        styleCellRBorder.Border.RightBorder.BorderStyle = BorderStyleValues.Thick;
        styleCellRBorder.Border.RightBorder.Color = System.Drawing.Color.Black;

        SLStyle styleDeptHeader = sl.CreateStyle();
        styleDeptHeader.Font.FontName = "Calibri";
        styleDeptHeader.Font.FontSize = 18;
        styleDeptHeader.Font.Bold = true;

        sl.MergeWorksheetCells(Row, 1, Row, 7);
        sl.SetCellValue(Row, 1, TableHeaderText);
        sl.SetCellStyle(Row, 1, styleDeptHeader);

        Row++;


        //////////////////////////////////////////
        // Start New Dept -- Add Column Headers //
        //////////////////////////////////////////                        
        sl.SetCellValue(Row, 1, "Dept");
        sl.SetCellValue(Row, 2, "Total");
        sl.SetColumnWidth("A", 9);
        sl.SetColumnWidth("B", 9);

        int col = 3;
        Dictionary<int, string> ptTypes = SqlServer_Impl.GetAutoCompletePointTypes().ToDictionary(mc => mc.UID, mc => mc.Description);
        foreach (KeyValuePair<int, string> pair in ptTypes)
        {
            sl.SetColumnWidth(col, 11);
            sl.SetCellValue(Row, col++, pair.Value);
        }
        
        sl.SetCellStyle(Row, 1, Row, col, styleRowHeader);
        sl.SetCellStyle(Row, 2, styleCellRBorder);

        ////////////////////////////////////////
        // Freeze the top row, left 2 columns //
        ////////////////////////////////////////
        sl.FreezePanes(1, 2);
    }
    private int BuildPrjSumTable(ref SLDocument sl, int row)
    {
        int FirstRow = row + 1;
        int col = 1;

        SLStyle styleRow = sl.CreateStyle();
        styleRow.Font.FontName = "Calibri";
        styleRow.Font.FontSize = 11;
        styleRow.Alignment.Horizontal = HorizontalAlignmentValues.Center;

        SLStyle styleColHeader = sl.CreateStyle();
        styleColHeader.Font.FontName = "Calibri";
        styleColHeader.Font.FontSize = 11;
        styleColHeader.Font.Bold = true;
        styleColHeader.Alignment.Horizontal = HorizontalAlignmentValues.Center;
        styleColHeader.Border.RightBorder.BorderStyle = BorderStyleValues.Medium;
        styleColHeader.Border.RightBorder.Color = System.Drawing.Color.Black;

        SLStyle styleCellRBorder = sl.CreateStyle();
        styleCellRBorder.Border.RightBorder.BorderStyle = BorderStyleValues.Thick;
        styleCellRBorder.Border.RightBorder.Color = System.Drawing.Color.Black;

        BuildPrjColumnHeader(ref sl, row, "TOTAL");
        row += 2;

        //////////////////////////////
        // Write Summary Table Data //
        //////////////////////////////
        foreach (var sumRptRcd in pts.GetPrjSumDict())
        {
            /////////////////////////////////////////////
            // Build Column Header (Department Number) //
            /////////////////////////////////////////////
            sl.SetCellValue(row, 1, ((sumRptRcd.Key.Length > 0) ? sumRptRcd.Key : "----"));
            sl.SetCellStyle(row, 1, row, 2, styleColHeader);

            ////////////////////////////////////////////////////////////////////////
            // Build Row Detail Values (Total Prj Points By Category Over Period) //
            ////////////////////////////////////////////////////////////////////////
            col = 3;
            foreach (double ptCnt in sumRptRcd.Value.Skip(1))
                sl.SetCellValueNumeric(row, col++, ((ptCnt > 0) ? ptCnt.ToString(CultureInfo.InvariantCulture) : "0"));
            sl.SetCellStyle(row, 2, row, col - 1, styleRow);

            /////////////////////////////////////////////////////////////////////////////
            // Add A Summary Column Showing Expected Point For Deptartment Over Period //
            /////////////////////////////////////////////////////////////////////////////
            string s1 = "=ROUND(SUM(" + SLConvert.ToCellRange(row, 3, row, col - 1) + "),0)";
            sl.SetCellValue(row, 2, s1);
            sl.SetCellStyle(row, 2, styleCellRBorder);

            row++;
        }


        SLStyle styleBgr = sl.CreateStyle();
        styleBgr.Fill.SetPatternType(PatternValues.Solid);
        styleBgr.Fill.SetPatternForegroundColor(System.Drawing.Color.BlanchedAlmond);
        sl.SetCellStyle(FirstRow, 1, row - 1, col, styleBgr);

        SLStyle styleBorderTop = sl.CreateStyle();
        styleBorderTop.SetTopBorder(BorderStyleValues.Medium, System.Drawing.Color.Black);
        sl.SetCellStyle(FirstRow, 1, FirstRow, col, styleBorderTop);

        SLStyle styleBorderBottom = sl.CreateStyle();
        styleBorderBottom.SetBottomBorder(BorderStyleValues.Medium, System.Drawing.Color.Black);
        sl.SetCellStyle(row - 1, 1, row - 1, col, styleBorderBottom);

        SLStyle styleBorderRight = sl.CreateStyle();
        styleBorderRight.SetRightBorder(BorderStyleValues.Medium, System.Drawing.Color.Black);
        sl.SetCellStyle(FirstRow, col, row - 1, col, styleBorderRight);

        return row;
    }
    private void BuildPrjMonTable(ref SLDocument sl, int row)
    {
        int FirstRow = row + 1;
        int col = 1;

        SLStyle styleRow = sl.CreateStyle();
        styleRow.Font.FontName = "Calibri";
        styleRow.Font.FontSize = 11;
        styleRow.Alignment.Horizontal = HorizontalAlignmentValues.Center;

        SLStyle styleColHeader = sl.CreateStyle();
        styleColHeader.Font.FontName = "Calibri";
        styleColHeader.Font.FontSize = 11;
        styleColHeader.Font.Bold = true;
        styleColHeader.Alignment.Horizontal = HorizontalAlignmentValues.Center;
        styleColHeader.Border.RightBorder.BorderStyle = BorderStyleValues.Medium;
        styleColHeader.Border.RightBorder.Color = System.Drawing.Color.Black;

        SLStyle styleCellRBorder = sl.CreateStyle();
        styleCellRBorder.Border.RightBorder.BorderStyle = BorderStyleValues.Thick;
        styleCellRBorder.Border.RightBorder.Color = System.Drawing.Color.Black;


        ///////////////////////////////////////////
        // Get List Of Months Included In Report //
        ///////////////////////////////////////////
        foreach (var rptMonths in pts.GetDatesDict())
        {
            FirstRow = row + 3;
            row += 2;

            string monthName = (rptMonths.Value).ToString("MMM", CultureInfo.InvariantCulture);
            BuildPrjColumnHeader(ref sl, row++, monthName);
            row++;

            //////////////////////////////
            // Write Monthly Table Data //
            //////////////////////////////
            foreach (var monRptRcd in pts.GetMonthlyDict(rptMonths.Value))
            {
                /////////////////////////////////////////////
                // Build Column Header (Department Number) //
                /////////////////////////////////////////////
                sl.SetCellValue(row, 1, ((monRptRcd.Key.Length > 0) ? monRptRcd.Key : "----"));
                sl.SetCellStyle(row, 1, row, 2, styleColHeader);

                //////////////////////////////////////////////////////////////////////
                // Build Row Detail Values (Total Prj Points By Category For Month) //
                //////////////////////////////////////////////////////////////////////
                col = 3;
                foreach (double ptCnt in monRptRcd.Value.Skip(1))
                    sl.SetCellValueNumeric(row, col++, ((ptCnt > 0) ? ptCnt.ToString(CultureInfo.InvariantCulture) : "0"));
                sl.SetCellStyle(row, 2, row, col - 1, styleRow);

                ///////////////////////////////////////////////////////////////////////////
                // Add A Summary Column Showing Expected Point For Deptartment For Month //
                ///////////////////////////////////////////////////////////////////////////
                string s1 = "=ROUND(SUM(" + SLConvert.ToCellRange(row, 3, row, col - 1) + "),0)";
                sl.SetCellValue(row, 2, s1);
                sl.SetCellStyle(row, 2, styleCellRBorder);

                row ++;
            }

            SLStyle styleBgr = sl.CreateStyle();
            styleBgr.Fill.SetPatternType(PatternValues.Solid);
            styleBgr.Fill.SetPatternForegroundColor(System.Drawing.Color.BlanchedAlmond);
            sl.SetCellStyle(FirstRow, 1, row - 1, col, styleBgr);

            SLStyle styleBorderTop = sl.CreateStyle();
            styleBorderTop.SetTopBorder(BorderStyleValues.Medium, System.Drawing.Color.Black);
            sl.SetCellStyle(FirstRow, 1, FirstRow, col, styleBorderTop);

            SLStyle styleBorderBottom = sl.CreateStyle();
            styleBorderBottom.SetBottomBorder(BorderStyleValues.Medium, System.Drawing.Color.Black);
            sl.SetCellStyle(row - 1, 1, row - 1, col, styleBorderBottom);

            SLStyle styleBorderRight = sl.CreateStyle();
            styleBorderRight.SetRightBorder(BorderStyleValues.Medium, System.Drawing.Color.Black);
            sl.SetCellStyle(FirstRow, col, row - 1, col, styleBorderRight);




        }
    }

    protected void BuildPrjStdData(ref SLDocument sl)
    {
        System.Text.UnicodeEncoding uniEncoding = new System.Text.UnicodeEncoding();
        if (_end.Day == 1)
            _end = _end.AddDays(-1);

        BuildPrjStdPage(ref sl);
        BuildPrjStdTable(ref sl, 1);

    }
    private void BuildPrjStdPage(ref SLDocument sl)
    {
        SLPageSettings ps = new SLPageSettings();

        SLFont ft = sl.CreateFont();
        ft.SetFont("Impact", 16);
        ps.AppendOddHeader(ft, "Points Calculated For " + _start.ToShortDateString() + " - " + _end.ToShortDateString());
        ps.AppendEvenHeader(ft, "Points Calculated For " + _start.ToShortDateString() + " - " + _end.ToShortDateString());

        ps.AppendOddFooter(ft, "page ");
        ps.AppendOddFooter(SLHeaderFooterFormatCodeValues.PageNumber);
        ps.AppendOddFooter(" of ");
        ps.AppendOddFooter(SLHeaderFooterFormatCodeValues.NumberOfPages);

        ps.AppendEvenFooter(ft, "page ");
        ps.AppendEvenFooter(SLHeaderFooterFormatCodeValues.PageNumber);
        ps.AppendEvenFooter(" of ");
        ps.AppendEvenFooter(SLHeaderFooterFormatCodeValues.NumberOfPages);
    }
    private void BuildPrjStdColumnHeader(ref SLDocument sl, int Row, string TableHeaderText)
    {
        SLStyle styleRowHeader = sl.CreateStyle();
        styleRowHeader.Font.FontName = "Calibri";
        styleRowHeader.Font.FontSize = 11;
        styleRowHeader.Font.Bold = true;
        styleRowHeader.Alignment.Horizontal = HorizontalAlignmentValues.Center;
        styleRowHeader.Alignment.Vertical = VerticalAlignmentValues.Bottom;
        styleRowHeader.SetWrapText(true);
        styleRowHeader.Border.BottomBorder.BorderStyle = BorderStyleValues.Medium;

        SLStyle styleCellRBorder = sl.CreateStyle();
        styleCellRBorder.Border.RightBorder.BorderStyle = BorderStyleValues.Thick;
        styleCellRBorder.Border.RightBorder.Color = System.Drawing.Color.Black;

        SLStyle styleDeptHeader = sl.CreateStyle();
        styleDeptHeader.Font.FontName = "Calibri";
        styleDeptHeader.Font.FontSize = 18;
        styleDeptHeader.Font.Bold = true;

        sl.MergeWorksheetCells(Row, 1, Row, 7);
        sl.SetCellValue(Row, 1, TableHeaderText);
        sl.SetCellStyle(Row, 1, styleDeptHeader);

        Row++;


        //////////////////////////////////////////
        // Start New Dept -- Add Column Headers //
        //////////////////////////////////////////                        
        sl.SetCellValue(Row, 1, "Dept");
        sl.SetCellValue(Row, 2, "Total");
        sl.SetColumnWidth("A", 9);
        sl.SetColumnWidth("B", 9);

        int col = 3;

        Dictionary<int, string> ptTypes = SqlServer_Impl.GetAutoCompletePointTypes().ToDictionary(mc => mc.UID, mc => mc.Description);
        foreach (KeyValuePair<int, string> pair in ptTypes)
        {
            sl.SetColumnWidth(col, 11);
            sl.SetCellValue(Row, col++, pair.Value);
        }

        sl.SetCellStyle(Row, 1, Row, col, styleRowHeader);
        sl.SetCellStyle(Row, 2, styleCellRBorder);

        ////////////////////////////////////////
        // Freeze the top row, left 2 columns //
        ////////////////////////////////////////
        //sl.FreezePanes(1, 2);
    }
    private void BuildPrjStdTable(ref SLDocument sl, int row)
    {
        int FirstRow = row + 1;
        int col = 1;

        SLStyle styleRow = sl.CreateStyle();
        styleRow.Font.FontName = "Calibri";
        styleRow.Font.FontSize = 11;
        styleRow.Alignment.Horizontal = HorizontalAlignmentValues.Center;

        SLStyle styleColHeader = sl.CreateStyle();
        styleColHeader.Font.FontName = "Calibri";
        styleColHeader.Font.FontSize = 11;
        styleColHeader.Font.Bold = true;
        styleColHeader.Alignment.Horizontal = HorizontalAlignmentValues.Center;
        styleColHeader.Border.RightBorder.BorderStyle = BorderStyleValues.Medium;
        styleColHeader.Border.RightBorder.Color = System.Drawing.Color.Black;

        SLStyle styleCellRBorder = sl.CreateStyle();
        styleCellRBorder.Border.RightBorder.BorderStyle = BorderStyleValues.Thick;
        styleCellRBorder.Border.RightBorder.Color = System.Drawing.Color.Black;


        BuildPrjStdColumnHeader(ref sl, row++, "Default Projection Values");
        row++;

        //////////////////////////////
        // Write Monthly Table Data //
        //////////////////////////////
        foreach (var sumRptRcd in new _StdPrjPts().GetPrjSumDict())
        {
            /////////////////////////////////////////////
            // Build Column Header (Department Number) //
            /////////////////////////////////////////////
            sl.SetCellValue(row, 1, ((sumRptRcd.Key.Length > 0) ? sumRptRcd.Key : "----"));
            sl.SetCellStyle(row, 1, row, 2, styleColHeader);

            //////////////////////////////////////////////////////////////////////
            // Build Row Detail Values (Total Prj Points By Category For Month) //
            //////////////////////////////////////////////////////////////////////
            col = 3;
            foreach (double ptCnt in sumRptRcd.Value.Skip(1))
                sl.SetCellValueNumeric(row, col++, ((ptCnt > 0) ? ptCnt.ToString(CultureInfo.InvariantCulture) : "0"));
            sl.SetCellStyle(row, 2, row, col - 1, styleRow);

            ///////////////////////////////////////////////////////////////////////////
            // Add A Summary Column Showing Expected Point For Deptartment For Month //
            ///////////////////////////////////////////////////////////////////////////
            string s1 = "=ROUND(SUM(" + SLConvert.ToCellRange(row, 3, row, col - 1) + "),0)";
            sl.SetCellValue(row, 2, s1);
            sl.SetCellStyle(row, 2, styleCellRBorder);

            row++;
        }


        SLStyle styleBgr = sl.CreateStyle();
        styleBgr.Fill.SetPatternType(PatternValues.Solid);
        styleBgr.Fill.SetPatternForegroundColor(System.Drawing.Color.BlanchedAlmond);
        sl.SetCellStyle(FirstRow, 1, row - 1, col, styleBgr);

        SLStyle styleBorderTop = sl.CreateStyle();
        styleBorderTop.SetTopBorder(BorderStyleValues.Medium, System.Drawing.Color.Black);
        sl.SetCellStyle(FirstRow, 1, FirstRow, col, styleBorderTop);

        SLStyle styleBorderBottom = sl.CreateStyle();
        styleBorderBottom.SetBottomBorder(BorderStyleValues.Medium, System.Drawing.Color.Black);
        sl.SetCellStyle(row - 1, 1, row - 1, col, styleBorderBottom);

        SLStyle styleBorderRight = sl.CreateStyle();
        styleBorderRight.SetRightBorder(BorderStyleValues.Medium, System.Drawing.Color.Black);
        sl.SetCellStyle(FirstRow, col, row - 1, col, styleBorderRight);




    }

    protected void BuildPtTypeData(ref SLDocument sl)
    {
        System.Text.UnicodeEncoding uniEncoding = new System.Text.UnicodeEncoding();
        if (_end.Day == 1)
            _end = _end.AddDays(-1);

        BuildPtTypePage(ref sl);
        BuildPtTypeTable(ref sl, 1);

    }
    private void BuildPtTypePage(ref SLDocument sl)
    {
        SLPageSettings ps = new SLPageSettings();

        SLFont ft = sl.CreateFont();
        ft.SetFont("Impact", 16);
        ps.AppendOddHeader(ft, "Default Point Values");
        ps.AppendEvenHeader(ft, "Default Point Values");

        ps.AppendOddFooter(ft, "page ");
        ps.AppendOddFooter(SLHeaderFooterFormatCodeValues.PageNumber);
        ps.AppendOddFooter(" of ");
        ps.AppendOddFooter(SLHeaderFooterFormatCodeValues.NumberOfPages);

        ps.AppendEvenFooter(ft, "page ");
        ps.AppendEvenFooter(SLHeaderFooterFormatCodeValues.PageNumber);
        ps.AppendEvenFooter(" of ");
        ps.AppendEvenFooter(SLHeaderFooterFormatCodeValues.NumberOfPages);
    }
    private void BuildPtTypeColumnHeader(ref SLDocument sl, int Row, string TableHeaderText)
    {
        SLStyle styleRowHeader = sl.CreateStyle();
        styleRowHeader.Font.FontName = "Calibri";
        styleRowHeader.Font.FontSize = 11;
        styleRowHeader.Font.Bold = true;
        styleRowHeader.Alignment.Horizontal = HorizontalAlignmentValues.Center;
        styleRowHeader.Alignment.Vertical = VerticalAlignmentValues.Bottom;
        styleRowHeader.SetWrapText(true);
        styleRowHeader.Border.BottomBorder.BorderStyle = BorderStyleValues.Medium;

        SLStyle styleCellRBorder = sl.CreateStyle();
        styleCellRBorder.Border.RightBorder.BorderStyle = BorderStyleValues.Thick;
        styleCellRBorder.Border.RightBorder.Color = System.Drawing.Color.Black;

        SLStyle styleDeptHeader = sl.CreateStyle();
        styleDeptHeader.Font.FontName = "Calibri";
        styleDeptHeader.Font.FontSize = 18;
        styleDeptHeader.Font.Bold = true;

        sl.MergeWorksheetCells(Row, 1, Row, 2);
        sl.SetCellValue(Row, 1, TableHeaderText);
        sl.SetCellStyle(Row, 1, styleDeptHeader);

        Row++;


        //////////////////////////////////////////
        // Start New Dept -- Add Column Headers //
        //////////////////////////////////////////                        
        sl.SetCellValue(Row, 1, "Points Type");
        sl.SetCellValue(Row, 2, "Dafault Value");
        sl.SetColumnWidth("A", 40);
        sl.SetColumnWidth("B", 13);

        sl.SetCellStyle(Row, 1, Row, 2, styleRowHeader);
        sl.SetCellStyle(Row, 1, styleCellRBorder);

        ////////////////////////////////////////
        // Freeze the top row, left 2 columns //
        ////////////////////////////////////////
        //sl.FreezePanes(1, 2);
    }
    private void BuildPtTypeTable(ref SLDocument sl, int row)
    {
        int FirstRow = row + 1;
        int col = 2;

        SLStyle styleRow = sl.CreateStyle();
        styleRow.Font.FontName = "Calibri";
        styleRow.Font.FontSize = 11;
        styleRow.Alignment.Horizontal = HorizontalAlignmentValues.Center;

        SLStyle styleColHeader = sl.CreateStyle();
        styleColHeader.Font.FontName = "Calibri";
        styleColHeader.Font.FontSize = 11;
        styleColHeader.Font.Bold = true;
        styleColHeader.Alignment.Horizontal = HorizontalAlignmentValues.Center;
        styleColHeader.Border.RightBorder.BorderStyle = BorderStyleValues.Medium;
        styleColHeader.Border.RightBorder.Color = System.Drawing.Color.Black;

        SLStyle styleCellRBorder = sl.CreateStyle();
        styleCellRBorder.Border.RightBorder.BorderStyle = BorderStyleValues.Thick;
        styleCellRBorder.Border.RightBorder.Color = System.Drawing.Color.Black;


        BuildPtTypeColumnHeader(ref sl, row++, "Point Types And Devault Value");
        row++;

        foreach (var pt in SqlServer_Impl.GetAutoCompletePointTypes())
        {
            sl.SetCellValue(row, 1, pt.Description);
            sl.SetCellValue(row, 2, pt.PointsCount);
            sl.SetCellStyle(row, 1, row, 2, styleColHeader);

            row++;
        }


        SLStyle styleBgr = sl.CreateStyle();
        styleBgr.Fill.SetPatternType(PatternValues.Solid);
        styleBgr.Fill.SetPatternForegroundColor(System.Drawing.Color.BlanchedAlmond);
        sl.SetCellStyle(FirstRow, 1, row - 1, col, styleBgr);

        SLStyle styleBorderTop = sl.CreateStyle();
        styleBorderTop.SetTopBorder(BorderStyleValues.Medium, System.Drawing.Color.Black);
        sl.SetCellStyle(FirstRow, 1, FirstRow, col, styleBorderTop);

        SLStyle styleBorderBottom = sl.CreateStyle();
        styleBorderBottom.SetBottomBorder(BorderStyleValues.Medium, System.Drawing.Color.Black);
        sl.SetCellStyle(row - 1, 1, row - 1, col, styleBorderBottom);

        SLStyle styleBorderRight = sl.CreateStyle();
        styleBorderRight.SetRightBorder(BorderStyleValues.Medium, System.Drawing.Color.Black);
        sl.SetCellStyle(FirstRow, col, row - 1, col, styleBorderRight);




    }

    protected void BuildDeptSumData(ref SLDocument sl)
    {
        System.Text.UnicodeEncoding uniEncoding = new System.Text.UnicodeEncoding();
        if (_end.Day == 1)
            _end = _end.AddDays(-1);

        BuildDeptSumPage(ref sl);
        BuildDeptSumTable(ref sl, 1);

    }
    private void BuildDeptSumPage(ref SLDocument sl)
    {
        SLPageSettings ps = new SLPageSettings();

        SLFont ft = sl.CreateFont();
        ft.SetFont("Impact", 16);
        ps.AppendOddHeader(ft, "Safety Pays Department Submission Summary Report");
        ps.AppendEvenHeader(ft, "Safety Pays Department Submission Summary Report");

        ps.AppendOddFooter(ft, "page ");
        ps.AppendOddFooter(SLHeaderFooterFormatCodeValues.PageNumber);
        ps.AppendOddFooter(" of ");
        ps.AppendOddFooter(SLHeaderFooterFormatCodeValues.NumberOfPages);

        ps.AppendEvenFooter(ft, "page ");
        ps.AppendEvenFooter(SLHeaderFooterFormatCodeValues.PageNumber);
        ps.AppendEvenFooter(" of ");
        ps.AppendEvenFooter(SLHeaderFooterFormatCodeValues.NumberOfPages);
    }
    private void BuildDeptSumTable(ref SLDocument sl, int row)
    {
        string Dept = "";

        SLStyle styleRow = sl.CreateStyle();
        styleRow.Font.FontName = "Calibri";
        styleRow.Font.FontSize = 11;
        styleRow.Alignment.Horizontal = HorizontalAlignmentValues.Center;

        SLStyle styleColHeader = sl.CreateStyle();
        styleColHeader.Font.FontName = "Calibri";
        styleColHeader.Font.FontSize = 11;
        styleColHeader.Font.Bold = true;
        styleColHeader.Alignment.Horizontal = HorizontalAlignmentValues.Center;
        styleColHeader.Border.RightBorder.BorderStyle = BorderStyleValues.Medium;
        styleColHeader.Border.RightBorder.Color = System.Drawing.Color.Black;

        SLStyle styleCellRBorder = sl.CreateStyle();
        styleCellRBorder.Border.RightBorder.BorderStyle = BorderStyleValues.Thick;
        styleCellRBorder.Border.RightBorder.Color = System.Drawing.Color.Black;


        //////////////////////////////
        // Write Monthly Table Data //
        //////////////////////////////
        foreach (var rptRcd in SqlServer_Impl.GetSafetyPaysDeptRpt(_start, _end) )
        {
            if ( Dept != rptRcd.Global_Dimension_1_Code )
            {
                if ( Dept.Length > 0 )
                    row += 2;
                
                Dept = rptRcd.Global_Dimension_1_Code;
                BuildDeptSumColumnHeader(ref sl, row++, "Department " + Dept);
                row++;
            }

            sl.SetCellValue(row, 1, rptRcd.IncStatus);
            sl.SetCellValueNumeric(row, 2, rptRcd.cnt.ToString());
            sl.SetCellValue(row, 3, rptRcd.Name);
            sl.SetCellValue(row, 4, rptRcd.IncTypeTxt);
            sl.SetCellValueNumeric(row, 5, rptRcd.PointsAssigned.ToString() );

            row++;
        }
    }
    private void BuildDeptSumColumnHeader(ref SLDocument sl, int Row, string TableHeaderText)
    {
        SLStyle styleRowHeader = sl.CreateStyle();
        styleRowHeader.Font.FontName = "Calibri";
        styleRowHeader.Font.FontSize = 11;
        styleRowHeader.Font.Bold = true;
        styleRowHeader.Alignment.Horizontal = HorizontalAlignmentValues.Center;
        styleRowHeader.Alignment.Vertical = VerticalAlignmentValues.Bottom;
        styleRowHeader.SetWrapText(true);
        styleRowHeader.Border.BottomBorder.BorderStyle = BorderStyleValues.Medium;

        SLStyle styleCellRBorder = sl.CreateStyle();
        styleCellRBorder.Border.RightBorder.BorderStyle = BorderStyleValues.Thick;
        styleCellRBorder.Border.RightBorder.Color = System.Drawing.Color.Black;

        SLStyle styleDeptHeader = sl.CreateStyle();
        styleDeptHeader.Font.FontName = "Calibri";
        styleDeptHeader.Font.FontSize = 18;
        styleDeptHeader.Font.Bold = true;

        sl.MergeWorksheetCells(Row, 1, Row, 5);
        sl.SetCellValue(Row, 1, TableHeaderText);
        sl.SetCellStyle(Row, 1, styleDeptHeader);

        Row++;


        //////////////////////////////////////////
        // Start New Dept -- Add Column Headers //
        //////////////////////////////////////////                        
        sl.SetCellValue(Row, 1, "Status");
        sl.SetCellValue(Row, 2, "Count");
        sl.SetCellValue(Row, 3, "Employee");
        sl.SetCellValue(Row, 4, "Report Type");
        sl.SetCellValue(Row, 5, "Value");
        sl.SetColumnWidth("A", 10);
        sl.SetColumnWidth("B", 10);
        sl.SetColumnWidth("C", 40);
        sl.SetColumnWidth("D", 40);
        sl.SetColumnWidth("E", 10);

        sl.SetCellStyle(Row, 1, Row, 5, styleRowHeader);
    }

    protected void BuildRawData(ref SLDocument sl)
    {
        System.Text.UnicodeEncoding uniEncoding = new System.Text.UnicodeEncoding();
        if (_end.Day == 1)
            _end = _end.AddDays(-1);

        BuildRawDataPage(ref sl);
        BuildRawDataColumnHeader(ref sl, 1, "Raw Data");
        BuildRawDataTable(ref sl, 3);
    }

    private void BuildRawDataPage(ref SLDocument sl)
    {
        SLPageSettings ps = new SLPageSettings();

        SLFont ft = sl.CreateFont();
        ft.SetFont("Impact", 16);
        ps.AppendOddHeader(ft, "Safety Pays Department Submission Detail Report");
        ps.AppendEvenHeader(ft, "Safety Pays Department Submission Detail Report");

        ps.AppendOddFooter(ft, "page ");
        ps.AppendOddFooter(SLHeaderFooterFormatCodeValues.PageNumber);
        ps.AppendOddFooter(" of ");
        ps.AppendOddFooter(SLHeaderFooterFormatCodeValues.NumberOfPages);

        ps.AppendEvenFooter(ft, "page ");
        ps.AppendEvenFooter(SLHeaderFooterFormatCodeValues.PageNumber);
        ps.AppendEvenFooter(" of ");
        ps.AppendEvenFooter(SLHeaderFooterFormatCodeValues.NumberOfPages);
    }
    private void BuildRawDataColumnHeader(ref SLDocument sl, int Row, string TableHeaderText)
    {
        SLStyle styleRowHeader = sl.CreateStyle();
        styleRowHeader.Font.FontName = "Calibri";
        styleRowHeader.Font.FontSize = 11;
        styleRowHeader.Font.Bold = true;
        styleRowHeader.Alignment.Horizontal = HorizontalAlignmentValues.Center;
        styleRowHeader.Alignment.Vertical = VerticalAlignmentValues.Bottom;
        styleRowHeader.SetWrapText(true);
        styleRowHeader.Border.BottomBorder.BorderStyle = BorderStyleValues.Medium;

        SLStyle styleCellRBorder = sl.CreateStyle();
        styleCellRBorder.Border.RightBorder.BorderStyle = BorderStyleValues.Thick;
        styleCellRBorder.Border.RightBorder.Color = System.Drawing.Color.Black;

        SLStyle styleDeptHeader = sl.CreateStyle();
        styleDeptHeader.Font.FontName = "Calibri";
        styleDeptHeader.Font.FontSize = 18;
        styleDeptHeader.Font.Bold = true;

        sl.MergeWorksheetCells(Row, 1, Row, 5);
        sl.SetCellValue(Row, 1, TableHeaderText);
        sl.SetCellStyle(Row, 1, styleDeptHeader);

        Row++;


        //////////////////////////////////////////
        // Start New Dept -- Add Column Headers //
        //////////////////////////////////////////                        
        sl.SetCellValue(Row, 1, "Incident");        sl.SetColumnWidth("A", 10);
        sl.SetCellValue(Row, 2, "Status");          sl.SetColumnWidth("B", 10);
        sl.SetCellValue(Row, 3, "Report Type");     sl.SetColumnWidth("C", 35);
        sl.SetCellValue(Row, 4, "Meeting Type");    sl.SetColumnWidth("D", 13);

        sl.SetCellValue(Row, 5, "Rpt Opened");      sl.SetColumnWidth("E", 13);
        sl.SetCellValue(Row, 6, "Rpt Closed");      sl.SetColumnWidth("F", 13);
        sl.SetCellValue(Row, 7, "Award");           sl.SetColumnWidth("G", 13);
        sl.SetCellValue(Row, 8, "Rpt Incident");    sl.SetColumnWidth("H", 13);
        sl.SetCellValue(Row, 9, "Rpt Meeting");     sl.SetColumnWidth("I", 13);
        sl.SetCellValue(Row, 10, "Event Period");   sl.SetColumnWidth("J", 13);
        
        sl.SetCellValue(Row, 11, "Emp ID");         sl.SetColumnWidth("K", 6);
        sl.SetCellValue(Row, 12, "Obs ID");         sl.SetColumnWidth("L", 6);
        sl.SetCellValue(Row, 13, "Pts");            sl.SetColumnWidth("M", 6);

        sl.SetCellValue(Row, 14, "Site");           sl.SetColumnWidth("N", 13);
        sl.SetCellValue(Row, 15, "Report Text");        sl.SetColumnWidth("O", 40);
        sl.SetCellValue(Row, 16, "Initial Response");   sl.SetColumnWidth("P", 40);
        sl.SetCellValue(Row, 17, "EHS Message");        sl.SetColumnWidth("Q", 40);

        sl.SetCellStyle(Row, 1, Row, 17, styleRowHeader);

        ///////////////////////////
        // Freeze the top 2 rows //
        ///////////////////////////
        sl.FreezePanes(2, 0);
    }
    private void BuildRawDataTable(ref SLDocument sl, int row)
    {
        SLStyle styleRow = sl.CreateStyle();
        styleRow.Font.FontName = "Calibri";
        styleRow.Font.FontSize = 11;
        styleRow.Alignment.Horizontal = HorizontalAlignmentValues.Center;

        SLStyle styleColHeader = sl.CreateStyle();
        styleColHeader.Font.FontName = "Calibri";
        styleColHeader.Font.FontSize = 11;
        styleColHeader.Font.Bold = true;
        styleColHeader.Alignment.Horizontal = HorizontalAlignmentValues.Center;
        styleColHeader.Border.RightBorder.BorderStyle = BorderStyleValues.Medium;
        styleColHeader.Border.RightBorder.Color = System.Drawing.Color.Black;

        SLStyle styleCellRBorder = sl.CreateStyle();
        styleCellRBorder.Border.RightBorder.BorderStyle = BorderStyleValues.Thick;
        styleCellRBorder.Border.RightBorder.Color = System.Drawing.Color.Black;

        SLStyle styleCellDate = sl.CreateStyle();
        styleCellDate = sl.CreateStyle();
        styleCellDate.FormatCode = "mm/dd/yy";

        SLStyle wrap = sl.CreateStyle();
        wrap.SetWrapText(true);

        Dictionary<int, string> ptTypes = SqlServer_Impl.GetAutoCompletePointTypes().ToDictionary(mc => mc.UID, mc => mc.Description);

        //////////////////////////////
        // Write Monthly Table Data //
        //////////////////////////////
        foreach (var rptRcd in SqlServer_Impl.GetSafetyPaysRawDataRpt(_start, _end))
        {
            sl.SetCellValue(row, 2, "Adm Awd");

            sl.SetCellValue(row, 3, ptTypes[rptRcd.Item1.ReasonForPoints]);

            sl.SetCellValue(row, 7, rptRcd.Item1.DatePointsGiven);
            sl.SetCellStyle(row, 7, styleCellDate);

            sl.SetCellValue(row, 10, rptRcd.Item1.EventDate);
            sl.SetCellStyle(row, 10, styleCellDate);

            sl.SetCellValueNumeric(row, 11, rptRcd.Item1.Emp_No);

            sl.SetCellValueNumeric(row, 13, rptRcd.Item1.Points.ToString(CultureInfo.InvariantCulture));
                    
            sl.SetCellValue(row, 17, rptRcd.Item1.Comments);
            sl.SetCellStyle(row, 17, wrap);

            if (rptRcd.Item2 != null)
            {
                sl.SetCellValueNumeric(row, 1, rptRcd.Item2.IncidentNo.ToString(CultureInfo.InvariantCulture));

                sl.SetCellValue(row, 2, rptRcd.Item2.IncStatus);

                sl.SetCellValue(row, 3, rptRcd.Item2.IncTypeTxt);

                if (rptRcd.Item2.SafetyMeetingDate != null)
                {
                    sl.SetCellValue(row, 9, (DateTime)rptRcd.Item2.SafetyMeetingDate);                    
                    sl.SetCellValue(row, 4, rptRcd.Item2.SafetyMeetingType);
                }
                sl.SetCellStyle(row, 9, styleCellDate);

                sl.SetCellValue(row, 5, rptRcd.Item2.IncOpenTimestamp);
                sl.SetCellStyle(row, 5, styleCellDate);

                if (rptRcd.Item2.IncCloseTimestamp != null)
                    sl.SetCellValue(row, 6, (DateTime)rptRcd.Item2.IncCloseTimestamp);
                sl.SetCellStyle(row, 6, styleCellDate);

                sl.SetCellValue(row, 7, (DateTime)rptRcd.Item1.DatePointsGiven);
                sl.SetCellStyle(row, 7, styleCellDate);

                if (rptRcd.Item2.IncidentDate != null)
                    sl.SetCellValue(row, 8, (DateTime)rptRcd.Item2.IncidentDate);
                sl.SetCellStyle(row, 8, styleCellDate);

                sl.SetCellValueNumeric(row, 11, rptRcd.Item2.EmpID);
                sl.SetCellValueNumeric(row, 12, rptRcd.Item2.ObservedEmpID);

                sl.SetCellValue(row, 14, rptRcd.Item2.JobSite);
                sl.SetCellStyle(row, 14, wrap);
                sl.SetCellValue(row, 15, rptRcd.Item2.Comments);
                sl.SetCellStyle(row, 15, wrap);
                sl.SetCellValue(row, 16, rptRcd.Item2.InitialResponse);
                sl.SetCellStyle(row, 16, wrap);
                sl.SetCellValue(row, 17, rptRcd.Item2.ehsRepsonse);
                sl.SetCellStyle(row, 17, wrap);
            }
            row++;
        }
    }
}