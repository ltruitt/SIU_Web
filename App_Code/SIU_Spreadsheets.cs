using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Dynamic;
using System.Globalization;
using System.Linq;


using System.Reflection;
using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Spreadsheet;

using SpreadsheetLight;
using SpreadsheetLight.Charts;

using ShermcoYou.DataTypes;

namespace ShermcoYou
{
    public class SIU_Spreadsheets
    {
#region Incident / Accident Workbook
        public static void IncidentAccidentGenerate(System.IO.Stream ResponseStream)
        {
            //////////////////////////////////
            // Build The Document Framework //
            //////////////////////////////////
            SLDocument sl = new SLDocument
            {
                DocumentProperties =
                {
                    Creator = "Larry Truitt",
                    ContentStatus = "Generated " + DateTime.Now,
                    Title = "Incident and Accident Tracking",
                    Description = "Incident and Accident tracking report generated by SiYOU.Shermco.Com"
                }
            };

            //////////////////////
            // Setup The Sheets //
            //////////////////////
            sl.RenameWorksheet(SLDocument.DefaultFirstSheetName, "Incident Log");
            sl.AddWorksheet("Master Summary");
            sl.AddWorksheet("January");
            sl.AddWorksheet("February");
            sl.AddWorksheet("March");
            sl.AddWorksheet("April");
            sl.AddWorksheet("May");
            sl.AddWorksheet("June");
            sl.AddWorksheet("July");
            sl.AddWorksheet("August");
            sl.AddWorksheet("September");
            sl.AddWorksheet("October");
            sl.AddWorksheet("November");
            sl.AddWorksheet("December");
            sl.AddWorksheet("Dept Hours");
            sl.AddWorksheet("Hours Dtl");

            IEnumerable<object> incAccRcds = SqlServer_Impl.GetIncidentAccident();
            List<SIU_ReportingChain> oshaData = SqlServer_Impl.GetOshaDeptData();

            ///////////////////////////////////////////
            // Build The Incident Accident Worksheet //
            ///////////////////////////////////////////
            sl.SelectWorksheet("Incident Log");
            int rowCount = IncidentAccidentBuildLogData(ref sl, ref incAccRcds);
            IncidentAccidentBuildLogHeader(ref sl, rowCount);

            ///////////////////////////////////////////
            // Build The Incident Accident Worksheet //
            ///////////////////////////////////////////
            int monNo = 1;
            int startRow;
            int endRow;
            foreach (string workSheet in new List<string> { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" })
            {
                sl.SelectWorksheet(workSheet);
                startRow = 1;

                startRow = IncidentAccidentBuildSumHeader(ref sl, startRow);
                endRow = IncidentAccidentBuildMonSumData(ref sl, monNo++, ref incAccRcds, ref oshaData, startRow);
                IncidentAccidentBuildSumsRow(ref sl, startRow, endRow);
            }

            ///////////////////////////////////////////
            // Build The Incident Accident Worksheet //
            ///////////////////////////////////////////
            sl.SelectWorksheet("Master Summary");
            startRow = 1;

            startRow = IncidentAccidentBuildSumHeader(ref sl, startRow);
            endRow = IncidentAccidentBuildConsolidatedMonSumData(ref sl, ref oshaData, startRow);
            IncidentAccidentBuildSumsRow(ref sl, startRow, endRow);


            ////////////////////////
            // Build Hours Detail //
            ////////////////////////
            sl.SelectWorksheet("Hours Dtl");
            HoursDtlHeader(ref sl);
            HoursDtlData(ref sl);

            /////////////////////////////////////
            // Build Department Hourly Summary //
            /////////////////////////////////////
            sl.SelectWorksheet("Dept Hours");
            HoursDeptHeader(ref sl);
            HoursDeptData(ref sl);

            ////////////////////////////
            // Select FIrst Worksheet //
            ////////////////////////////
            sl.SelectWorksheet("Incident Log");

            /////////////////////////////////
            // And Send Back A Spreadsheet //
            /////////////////////////////////
            sl.SaveAs(ResponseStream);
        }

        public static void IncidentAccidentBuildLogHeader(ref SLDocument sl, int rowCount)
        {
            rowCount += 2;

            SLStyle styleHeaderA1 = sl.CreateStyle();
            styleHeaderA1.SetWrapText(true);
            styleHeaderA1.Font.FontName = "Arial";
            styleHeaderA1.Font.FontSize = 11;
            styleHeaderA1.Font.FontColor = System.Drawing.Color.Blue;
            styleHeaderA1.Alignment.Horizontal = HorizontalAlignmentValues.Center;
            styleHeaderA1.Alignment.Vertical = VerticalAlignmentValues.Bottom;

            sl.SetCellStyle("A1", "AG2", styleHeaderA1);

            sl.SetRowHeight(1, 30);
            sl.SetRowHeight(2, 57);

            sl.SetColumnWidth("A", 9.43);
            sl.SetColumnWidth("B", 9.43);
            sl.SetColumnWidth("C", 13);
            sl.SetColumnWidth("D", 9.43);
            sl.SetColumnWidth("E", 9.43);
            sl.SetColumnWidth("F", 13);
            sl.SetColumnWidth("G", 13);
            sl.SetColumnWidth("H", 13);
            sl.SetColumnWidth("I", 13);
            sl.SetColumnWidth("J", 11);
            sl.SetColumnWidth("K", 9.43);
            sl.SetColumnWidth("W", 50);
            sl.SetColumnWidth("X", 50);
            sl.SetColumnWidth("Y", 10);
            sl.SetColumnWidth("Z", 50);
            sl.SetColumnWidth("AA", 50);
            sl.SetColumnWidth("AB", 20);
            sl.SetColumnWidth("AC", 50);

            sl.MergeWorksheetCells("A1", "A2");
            sl.MergeWorksheetCells("B1", "B2");
            sl.MergeWorksheetCells("C1", "C2");
            sl.MergeWorksheetCells("D1", "D2");
            sl.MergeWorksheetCells("M1", "M2");
            sl.MergeWorksheetCells("R1", "R2");
            sl.MergeWorksheetCells("V1", "V2");
            sl.MergeWorksheetCells("W1", "W2");
            sl.MergeWorksheetCells("X1", "X2");
            sl.MergeWorksheetCells("Y1", "Y2");
            sl.MergeWorksheetCells("Z1", "Z2");
            sl.MergeWorksheetCells("AA1", "AA2");
            sl.MergeWorksheetCells("AB1", "AB2");
            sl.MergeWorksheetCells("AC1", "AC2");


            sl.MergeWorksheetCells("E1", "G1");
            sl.MergeWorksheetCells("H1", "L1");
            sl.MergeWorksheetCells("N1", "Q1");
            sl.MergeWorksheetCells("S1", "U1");
            sl.MergeWorksheetCells("AD1", "AG1");


            sl.SetCellValue("A1", "Shermco Number");
            sl.SetCellValue("B1", "Claim Number");
            sl.SetCellValue("C1", "Date of Occurance");
            sl.SetCellValue("D1", "Open Closed");

            sl.SetCellValue("E1", "Type of Incident");
            sl.SetCellValue("E2", "Type");
            sl.SetCellValue("F2", "Description");
            sl.SetCellValue("G2", "Location");

            sl.SetCellValue("H1", "OSHA 300 Log Information");
            sl.SetCellValue("H2", "Medically Recordable");
            sl.SetCellValue("I2", "Restricted Duty");
            sl.SetCellValue("J2", "Number of Restricted Days");
            sl.SetCellValue("K2", "Lost Time");
            sl.SetCellValue("L2", "Number of Lost Time Days");

            sl.SetCellValue("M1", "Drug / Breath Alcohol Test");

            sl.SetCellValue("N1", "Employee");
            sl.SetCellValue("N2", "Dept");
            sl.SetCellValue("O2", "Number");
            sl.SetCellValue("P2", "Last Name");
            sl.SetCellValue("Q2", "First Name");

            sl.SetCellValue("R1", "Unit Number");

            sl.SetCellValue("S1", "Supervisor");
            sl.SetCellValue("S2", "Number");
            sl.SetCellValue("T2", "Last Name");
            sl.SetCellValue("U2", "First Name");

            sl.SetCellValue("V1", "Project Number");
            sl.SetCellValue("W1", "Description of Occurance");
            sl.SetCellValue("X1", "Unsafe Act or Condition");
            sl.SetCellValue("Y1", "Discipline Issued");
            sl.SetCellValue("Z1", "Discipline Description");
            sl.SetCellValue("AA1", "Actions to Prevent ReOccurance");
            sl.SetCellValue("AB1", "Responsible Party");
            sl.SetCellValue("AC1", "Additional Comments");

            sl.SetCellValue("AD1", "Cost");
            sl.SetCellValue("AD2", "In-House");
            sl.SetCellValue("AE2", "Incurred");
            sl.SetCellValue("AF2", "Reserve");
            sl.SetCellValue("AG2", "Total");


            SLStyle styleColumnGroup1 = sl.CreateStyle();
            styleColumnGroup1.Fill.SetPatternType(PatternValues.Solid);
            styleColumnGroup1.Fill.SetPatternForegroundColor(System.Drawing.Color.FromArgb(100, 230, 230, 230));
            sl.SetCellStyle("A1", "D" + rowCount, styleColumnGroup1);
            sl.SetCellStyle("H1", "L" + rowCount, styleColumnGroup1);
            sl.SetCellStyle("N1", "Q" + rowCount, styleColumnGroup1);
            sl.SetCellStyle("S1", "U" + rowCount, styleColumnGroup1);
            sl.SetCellStyle("W1", "W" + rowCount, styleColumnGroup1);
            sl.SetCellStyle("Y1", "Z" + rowCount, styleColumnGroup1);
            sl.SetCellStyle("AC1", "AC" + rowCount, styleColumnGroup1);

            SLStyle borderAllCell = sl.CreateStyle();
            borderAllCell.Border.RightBorder.BorderStyle = BorderStyleValues.Thin;
            borderAllCell.Border.BottomBorder.BorderStyle = BorderStyleValues.Thin;
            borderAllCell.Border.RightBorder.Color = System.Drawing.Color.FromArgb(100, 192, 192, 192);
            borderAllCell.Border.BottomBorder.Color = System.Drawing.Color.FromArgb(100, 192, 192, 192);
            sl.SetCellStyle("A1", "AG" + rowCount, borderAllCell);

            SLStyle borderBottomBlack = sl.CreateStyle();
            borderBottomBlack.Border.BottomBorder.BorderStyle = BorderStyleValues.Thin;
            borderBottomBlack.Border.LeftBorder.Color = System.Drawing.Color.Black;
            sl.SetCellStyle("A1", "AG1", borderBottomBlack);

            borderBottomBlack.Border.BottomBorder.BorderStyle = BorderStyleValues.Medium;
            sl.SetCellStyle("A2", "AG2", borderBottomBlack);

            SLStyle borderRightBlack = sl.CreateStyle();
            borderRightBlack.Border.RightBorder.BorderStyle = BorderStyleValues.Medium;
            borderRightBlack.Border.LeftBorder.Color = System.Drawing.Color.Black;
            sl.SetCellStyle("D1", "D" + rowCount, borderRightBlack);
            sl.SetCellStyle("G1", "G" + rowCount, borderRightBlack);
            sl.SetCellStyle("L1", "L" + rowCount, borderRightBlack);
            sl.SetCellStyle("M1", "M" + rowCount, borderRightBlack);
            sl.SetCellStyle("Q1", "Q" + rowCount, borderRightBlack);
            sl.SetCellStyle("R1", "R" + rowCount, borderRightBlack);
            sl.SetCellStyle("R1", "R" + rowCount, borderRightBlack);
            sl.SetCellStyle("U1", "U" + rowCount, borderRightBlack);
            sl.SetCellStyle("V1", "V" + rowCount, borderRightBlack);
            sl.SetCellStyle("W1", "W" + rowCount, borderRightBlack);
            sl.SetCellStyle("X1", "X" + rowCount, borderRightBlack);
            sl.SetCellStyle("Z1", "Z" + rowCount, borderRightBlack);
            sl.SetCellStyle("AB1", "AB" + rowCount, borderRightBlack);
            sl.SetCellStyle("AC1", "AC" + rowCount, borderRightBlack);

            ///////////////////////////
            // Freeze the top 2 rows //
            ///////////////////////////
            sl.FreezePanes(2, 0);
        }
        public static int IncidentAccidentBuildLogData(ref SLDocument sl, ref IEnumerable<object> IncRcds)
        {
            //////////////////////////////////////////////////////////////////
            // Lind Of Messy But Also A Little Cool                         //
            // Linq Returning an Anonymous Object Array                     //
            // So Using An Expando Object To Break It Out Into A Dictionary //
            //////////////////////////////////////////////////////////////////
            dynamic incidentAccidentRcdDict = new ExpandoObject();
            var dict = (IDictionary<string, object>)incidentAccidentRcdDict;

            ////////////////////
            // Start at Row 3 //
            ////////////////////
            int row = 3;

            foreach (var incidentAccidentRcd in IncRcds)
            {
                foreach (PropertyInfo propertyInfo in incidentAccidentRcd.GetType().GetProperties(BindingFlags.Instance | BindingFlags.Public))
                    dict[propertyInfo.Name] = propertyInfo.GetValue(incidentAccidentRcd, null);

                //////////////////////////
                // Incident Disposition //
                //////////////////////////
                sl.SetCellValueNumeric(row, 1, (incidentAccidentRcdDict.iaList.UID).ToString());
                sl.SetCellValue(row, 2, (string)incidentAccidentRcdDict.iaList.Claim_ID);
                if (incidentAccidentRcdDict.iaList.Inc_Occur_Date != null)
                    sl.SetCellValue(row, 3, ((DateTime)incidentAccidentRcdDict.iaList.Inc_Occur_Date).ToShortDateString());
                sl.SetCellValue(row, 4, (string)incidentAccidentRcdDict.iaList.Disposition);

                /////////////////////////////
                // Incident Classification //
                /////////////////////////////
                if (incidentAccidentRcdDict.iaList.Inc_Type != null)
                    sl.SetCellValue(row, 5, (string)incidentAccidentRcdDict.iaList.Inc_Type);

                if (incidentAccidentRcdDict.iaList.Inc_Type_Sub != null)
                    sl.SetCellValue(row, 6, (string)incidentAccidentRcdDict.iaList.Inc_Type_Sub);

                if (incidentAccidentRcdDict.iaList.Inc_Loc != null)
                    sl.SetCellValue(row, 7, (string)incidentAccidentRcdDict.iaList.Inc_Loc);

                if (incidentAccidentRcdDict.iaList.Inc_Desc != null)
                    sl.SetCellValue(row, 23, (string)incidentAccidentRcdDict.iaList.Inc_Desc);

                if (incidentAccidentRcdDict.iaList.Inc_Unsafe_Act_or_Condition != null)
                    sl.SetCellValue(row, 24, (string)incidentAccidentRcdDict.iaList.Inc_Unsafe_Act_or_Condition);

                //////////
                // OSHA //
                //////////
                if (incidentAccidentRcdDict.iaList.Osha_Record_Med != null)
                    sl.SetCellValue(row, 8, ((bool)incidentAccidentRcdDict.iaList.Osha_Record_Med) ? "Yes" : "No");

                if (incidentAccidentRcdDict.iaList.Osha_Restrict_Duty != null)
                    sl.SetCellValue(row, 9, ((incidentAccidentRcdDict.iaList.Osha_Restrict_Duty) ? "Yes" : "No"));

                if (incidentAccidentRcdDict.iaList.Osha_Restrict_Days != null)
                    sl.SetCellValueNumeric(row, 10, incidentAccidentRcdDict.iaList.Osha_Restrict_Days.ToString());

                if (incidentAccidentRcdDict.iaList.Osha_Lost_Time != null)
                    sl.SetCellValue(row, 11, ((incidentAccidentRcdDict.iaList.Osha_Lost_Time) ? "Yes" : "No"));

                if (incidentAccidentRcdDict.iaList.Osha_Lost_Days != null)
                    sl.SetCellValueNumeric(row, 12, incidentAccidentRcdDict.iaList.Osha_Lost_Days.ToString());

                ///////////////
                // Drug Test //
                ///////////////
                if (incidentAccidentRcdDict.iaList.Emp_Drug_Alchol_Test != null)
                    sl.SetCellValue(row, 13, ((incidentAccidentRcdDict.iaList.Emp_Drug_Alchol_Test) ? "Yes" : "No"));


                //////////////
                // Employee //
                //////////////
                if (incidentAccidentRcdDict.EmpNo != null)
                {
                    sl.SetCellValueNumeric(row, 14, incidentAccidentRcdDict.EmpDept);
                    sl.SetCellValueNumeric(row, 15, incidentAccidentRcdDict.EmpNo);
                    sl.SetCellValue(row, 16, incidentAccidentRcdDict.EmpLast);
                    sl.SetCellValue(row, 17, incidentAccidentRcdDict.EmpFirst);
                }

                ////////////////////
                // Unit / Vehicle //
                ////////////////////
                if (incidentAccidentRcdDict.iaList.Emp_Veh_Involved != null)
                    sl.SetCellValue(row, 18, (string)incidentAccidentRcdDict.iaList.Emp_Veh_Involved);

                //////////
                // Supr //
                //////////
                if (incidentAccidentRcdDict.SuprNo != null)
                {
                    sl.SetCellValueNumeric(row, 19, incidentAccidentRcdDict.SuprNo);
                    sl.SetCellValue(row, 20, incidentAccidentRcdDict.SuprLast);
                    sl.SetCellValue(row, 21, incidentAccidentRcdDict.SuprFirst);
                }

                ////////////
                // Job No //
                ////////////
                if (incidentAccidentRcdDict.iaList.Emp_Job_No != null)
                    sl.SetCellValue(row, 22, (string)incidentAccidentRcdDict.iaList.Emp_Job_No);

                ////////////////
                // Discipline //
                ////////////////
                if (incidentAccidentRcdDict.iaList.Follow_Discipline_Issued_Flag != null)
                    sl.SetCellValue(row, 25, ((incidentAccidentRcdDict.iaList.Follow_Discipline_Issued_Flag) ? "Yes" : "No"));

                if (incidentAccidentRcdDict.iaList.Follow_Discipline != null)
                    sl.SetCellValue(row, 26, (string)incidentAccidentRcdDict.iaList.Follow_Discipline);

                /////////////////
                // Reoccurance //
                /////////////////
                if (incidentAccidentRcdDict.iaList.Follow_Prevent_Reoccur != null)
                    sl.SetCellValue(row, 27, (string)incidentAccidentRcdDict.iaList.Follow_Prevent_Reoccur);

                if (incidentAccidentRcdDict.iaList.Follow_Responsible != null)
                    sl.SetCellValue(row, 28, (string)incidentAccidentRcdDict.iaList.Follow_Responsible);

                //////////////////////
                // CLosing Comments //
                //////////////////////
                if (incidentAccidentRcdDict.iaList.Follow_Comments != null)
                    sl.SetCellValue(row, 29, (string)incidentAccidentRcdDict.iaList.Follow_Comments);

                //////////
                // Cost //
                //////////
                if (incidentAccidentRcdDict.iaList.Cost_inHouse != null)
                    sl.SetCellValueNumeric(row, 30, incidentAccidentRcdDict.iaList.Cost_inHouse.ToString());

                if (incidentAccidentRcdDict.iaList.Cost_Incurred != null)
                    sl.SetCellValueNumeric(row, 31, incidentAccidentRcdDict.iaList.Cost_Incurred.ToString());

                if (incidentAccidentRcdDict.iaList.Cost_Reserve != null)
                    sl.SetCellValueNumeric(row, 32, incidentAccidentRcdDict.iaList.Cost_Reserve.ToString());

                string xxx = string.Format("=SUM({0})", SLConvert.ToCellRange(row, 30, row, 32));
                sl.SetCellValue(row, 33, xxx);

                dict.Clear();
                row++;
            }

            SLStyle styleDataCenter = sl.CreateStyle();
            styleDataCenter.Font.FontName = "Arial";
            styleDataCenter.Font.FontSize = 11;
            styleDataCenter.Font.FontColor = System.Drawing.Color.Black;
            styleDataCenter.Alignment.Horizontal = HorizontalAlignmentValues.Center;
            styleDataCenter.Alignment.Vertical = VerticalAlignmentValues.Center;
            styleDataCenter.SetWrapText(true);
            sl.SetCellStyle("A3", "AG" + row, styleDataCenter);

            SLStyle styleDataLeft = sl.CreateStyle();
            styleDataLeft.Alignment.Horizontal = HorizontalAlignmentValues.Left;
            styleDataLeft.SetWrapText(true);
            sl.SetCellStyle("W3", "W" + row, styleDataLeft);
            sl.SetCellStyle("X3", "X" + row, styleDataLeft);
            sl.SetCellStyle("Z3", "Z" + row, styleDataLeft);
            sl.SetCellStyle("AC3", "AC" + row, styleDataLeft);

            return row - 3;
        }

        public static int IncidentAccidentBuildSumHeader(ref SLDocument sl, int rowCount)
        {
            rowCount += 2;

            //////////////////////////////
            // Setup Header Row Heights //
            //////////////////////////////
            sl.SetRowHeight(1, 20);
            sl.SetRowHeight(2, 57);

            ////////////////////////
            // Set Columns Widths //
            ////////////////////////
            sl.SetWorksheetDefaultColumnWidth(13);
            sl.SetColumnWidth("A", 13);
            sl.SetColumnWidth("B", 18);
            sl.SetColumnWidth("C", 13);
            sl.SetColumnWidth("D", 9.43);
            sl.SetColumnWidth("E", 9.43);


            ////////////////////////////////////
            // Merge Some Cells Horiz or Vert //
            ////////////////////////////////////
            sl.MergeWorksheetCells("A1", "A2");
            sl.MergeWorksheetCells("B1", "B2");
            sl.MergeWorksheetCells("C1", "C2");
            sl.MergeWorksheetCells("D1", "D2");
            sl.MergeWorksheetCells("E1", "E2");
            sl.MergeWorksheetCells("Q1", "Q2");
            sl.MergeWorksheetCells("R1", "R2");
            sl.MergeWorksheetCells("Y1", "Y2");

            sl.MergeWorksheetCells("F1", "P1");
            sl.MergeWorksheetCells("S1", "U1");
            sl.MergeWorksheetCells("V1", "X1");

            SLStyle styleColumnGroup1 = sl.CreateStyle();
            styleColumnGroup1.Fill.SetPatternType(PatternValues.Solid);
            styleColumnGroup1.Fill.SetPatternForegroundColor(System.Drawing.Color.Yellow);
            sl.SetCellStyle("F1", "P2", styleColumnGroup1);


            ////////////////////////////
            // Add Header Text Values //
            ////////////////////////////
            sl.SetCellValue("F1", "OSHA REQUIRED INFORMATION");
            sl.SetCellValue("S1", "Injury Cost");
            sl.SetCellValue("V1", "Vehicle Cost");

            sl.SetCellValue("A1", "Department Number");
            sl.SetCellValue("B1", "Department Name");
            sl.SetCellValue("C1", "NAICS Code");
            sl.SetCellValue("D1", "Total Hours Worked");
            sl.SetCellValue("E1", "First Aid Cases");
            sl.SetCellValue("F2", "Other Recordable Incidents");
            sl.SetCellValue("G2", "Total Recordable Incident Rate (TRIR)");
            sl.SetCellValue("H2", "BLS 2011 National Average");
            sl.SetCellValue("I2", "Job Transfer / Restricted Duty Incidents");
            sl.SetCellValue("J2", "Job Transfer / Restricted Duty Rate (RIR)");
            sl.SetCellValue("K2", "BLS 2011 National Average");
            sl.SetCellValue("L2", "Days Away from Work Incidents");
            sl.SetCellValue("M2", "Days Away from Work Incident Rate (LTRIR)");
            sl.SetCellValue("N2", "BLS 2011 National Average");
            sl.SetCellValue("O2", "Days Away, Restricted, Transferred (DART) Rate");
            sl.SetCellValue("P2", "BLS 2011 National Average");
            sl.SetCellValue("T2", "In-House");
            sl.SetCellValue("S2", "Incurred");
            sl.SetCellValue("U2", "Reserved");
            sl.SetCellValue("T2", "In-House");
            sl.SetCellValue("S2", "Incurred");
            sl.SetCellValue("U2", "Reserved");
            sl.SetCellValue("Q1", "Vehicle Incidents");
            sl.SetCellValue("R1", "Vehicle Incident Rate");
            sl.SetCellValue("Y1", "Cost / Man Hour");


            //////////////////////////////
            // Create Soft Cell Borders //
            //////////////////////////////
            SLStyle borderAllCell = sl.CreateStyle();
            borderAllCell.Border.RightBorder.BorderStyle = BorderStyleValues.Thin;
            borderAllCell.Border.BottomBorder.BorderStyle = BorderStyleValues.Thin;
            borderAllCell.Border.RightBorder.Color = System.Drawing.Color.FromArgb(100, 192, 192, 192);
            borderAllCell.Border.BottomBorder.Color = System.Drawing.Color.FromArgb(100, 192, 192, 192);
            sl.SetCellStyle("A1", "W" + rowCount, borderAllCell);

            /////////////////////////////
            // Create Hard Row Borders //
            /////////////////////////////
            SLStyle borderBottomBlack = sl.CreateStyle();
            borderBottomBlack.Border.BottomBorder.BorderStyle = BorderStyleValues.Thin;
            borderBottomBlack.Border.LeftBorder.Color = System.Drawing.Color.Black;
            sl.SetCellStyle("A1", "Y1", borderBottomBlack);

            borderBottomBlack.Border.BottomBorder.BorderStyle = BorderStyleValues.Medium;
            sl.SetCellStyle("A2", "Y2", borderBottomBlack);


            ////////////////////////////////
            // Create Hard Column Borders //
            ////////////////////////////////
            SLStyle borderRightBlack = sl.CreateStyle();
            borderRightBlack.Border.RightBorder.BorderStyle = BorderStyleValues.Medium;
            borderRightBlack.Border.LeftBorder.Color = System.Drawing.Color.Black;
            sl.SetCellStyle("A1", "E" + rowCount, borderRightBlack);
            sl.SetCellStyle("H1", "H" + rowCount, borderRightBlack);
            sl.SetCellStyle("K1", "K" + rowCount, borderRightBlack);
            sl.SetCellStyle("N1", "N" + rowCount, borderRightBlack);
            sl.SetCellStyle("P1", "P" + rowCount, borderRightBlack);
            sl.SetCellStyle("R1", "R" + rowCount, borderRightBlack);
            sl.SetCellStyle("U1", "U" + rowCount, borderRightBlack);
            sl.SetCellStyle("X1", "X" + rowCount, borderRightBlack);
            sl.SetCellStyle("Y1", "Y" + rowCount, borderRightBlack);

            ///////////////////////////
            // Freeze the top 2 rows //
            ///////////////////////////
            sl.FreezePanes(2, 0);


            /////////////////////////
            // Setup Header Styles //
            /////////////////////////
            SLStyle styleHeaderNormal = sl.CreateStyle();
            styleHeaderNormal.SetWrapText(true);
            styleHeaderNormal.Font.FontName = "Arial";
            styleHeaderNormal.Font.FontSize = 10;
            styleHeaderNormal.Font.FontColor = System.Drawing.Color.Blue;
            styleHeaderNormal.Alignment.Horizontal = HorizontalAlignmentValues.Center;
            styleHeaderNormal.Alignment.Vertical = VerticalAlignmentValues.Bottom;
            sl.SetCellStyle("A1", "Y2", styleHeaderNormal);

            SLStyle styleHeaderBold = styleHeaderNormal;
            styleHeaderBold.Font.Bold = true;
            sl.SetCellStyle("F1", "P2", styleHeaderBold);



            return rowCount;
        }
        public static int IncidentAccidentBuildMonSumData(ref SLDocument sl, int rptMon, ref IEnumerable<object> IncRcds, ref List<SIU_ReportingChain> oshaData, int rowCount)
        {
            //////////////////////////
            // Setup Data Row Style //
            //////////////////////////
            SLStyle styleDataCenter = sl.CreateStyle();
            styleDataCenter.Font.FontName = "Arial";
            styleDataCenter.Font.FontSize = 11;
            styleDataCenter.Font.FontColor = System.Drawing.Color.Black;
            styleDataCenter.Alignment.Horizontal = HorizontalAlignmentValues.Center;
            styleDataCenter.Alignment.Vertical = VerticalAlignmentValues.Center;
            styleDataCenter.SetWrapText(true);

            ////////////////////////////////
            // Create Hard Column Borders //
            ////////////////////////////////
            SLStyle borderRightBlack = sl.CreateStyle();
            borderRightBlack.Border.RightBorder.BorderStyle = BorderStyleValues.Medium;
            borderRightBlack.Border.LeftBorder.Color = System.Drawing.Color.Black;

            //////////////////////////////////////////////////////////////////
            // kind Of Messy But Also A Little Cool                         //
            // Linq Returning an Anonymous Object Array                     //
            // So Using An Expando Object To Break It Out Into A Dictionary //
            //////////////////////////////////////////////////////////////////
            dynamic incidentAccidentRcdDict = new ExpandoObject();
            var dict = (IDictionary<string, object>)incidentAccidentRcdDict;

            /////////////////////////////////////////////////////////////////////////
            // Working Record Pulled From Dictionary Or Built To Add To Dictionary //
            /////////////////////////////////////////////////////////////////////////
            sumRcd thisSumRcd;

            ///////////////////////////////////////////////
            // Dictionary Of ThisSumRcds indexed by Dept //
            ///////////////////////////////////////////////
            var sumRcds = new Dictionary<string, sumRcd>();

            /////////////////////////////////////////////////////
            // Build Dictionary Of Departments With Basic Osha //
            // Nat Stats Pulled From Reporting Chain Table     //
            /////////////////////////////////////////////////////
            foreach (SIU_ReportingChain rcr in oshaData)
            {
                thisSumRcd = new sumRcd
                {
                    Dept = rcr.Dept,
                    OSHA_NAICS = rcr.OSHA_NAICS_Code ?? "0",
                    DeptName = rcr.DeptDesc ?? "",
                    OSHA_TRIR_NAT_AVG = (rcr.OSHA_TRIR_NAT_AVG != null) ? (float)rcr.OSHA_TRIR_NAT_AVG : 0,
                    OSHA_RIR_NAT_AVG = (rcr.OSHA_RIR_NAT_AVG != null) ? (float)rcr.OSHA_RIR_NAT_AVG : 0,
                    OSHA_LTIR_NAT_AVG = (rcr.OSHA_LRIR_NAT_AVG != null) ? (float)rcr.OSHA_LRIR_NAT_AVG : 0,
                    OSHA_DART_NAT_AVG = (rcr.OSHA_DART_NAT_AVG != null) ? (float)rcr.OSHA_DART_NAT_AVG : 0,
                };

                //////////////////////////////////
                // Add New Record To Dictionary //
                //////////////////////////////////
                sumRcds.Add(rcr.Dept, thisSumRcd);
            }


            ////////////////////////////////////////////////////////////////////////////
            // Now Walk Through Each Incident Record And Accumulate Reporting Numbers //
            ////////////////////////////////////////////////////////////////////////////
            foreach (var incidentAccidentRcd in IncRcds)
            {
                ///////////////////////////////////////////////////////////////////////
                // I Pulled LInq Data From Multiple Tables And Returned As An Object //
                // So I Use Reflection To Break Eqach Data Field Into A Dictionary   //
                ///////////////////////////////////////////////////////////////////////
                foreach (PropertyInfo propertyInfo in incidentAccidentRcd.GetType().GetProperties(BindingFlags.Instance | BindingFlags.Public))
                    dict[propertyInfo.Name] = propertyInfo.GetValue(incidentAccidentRcd, null);

                ////////////////////////////////////////////////////////////////////////////////////////////
                // Get The Month Of This Incident Date So We Know If We Should Include Data On This Sheet //
                ////////////////////////////////////////////////////////////////////////////////////////////
                int incDate = -1;
                if (incidentAccidentRcdDict.iaList.Inc_Occur_Date != null)
                    incDate = incidentAccidentRcdDict.iaList.Inc_Occur_Date.Month;

                ///////////////////////////////////////////////////////////////////////////
                // Update Counters / Totals If this Event Occured In The Reporting Month //
                ///////////////////////////////////////////////////////////////////////////
                if (incDate == rptMon)
                {
                    /////////////////////////////////////////////////////////
                    // Can't process Records With No Associated Department //
                    // Department Comes From Employee                      //
                    /////////////////////////////////////////////////////////
                    if (incidentAccidentRcdDict.EmpNo != null)
                    {
                        thisSumRcd = sumRcds[incidentAccidentRcdDict.EmpDept];

                        if (((string)incidentAccidentRcdDict.iaList.Inc_Type).ToLower() == "first aid")
                            thisSumRcd.TotFirAidClasses++;

                        if (incidentAccidentRcdDict.iaList.Osha_Lost_Days != null)
                            thisSumRcd.TotLostDays += incidentAccidentRcdDict.iaList.Osha_Lost_Days;

                        if (incidentAccidentRcdDict.iaList.Emp_Veh_Involved != null)
                            thisSumRcd.TotVehIncidents++;


                        if (incidentAccidentRcdDict.iaList.Cost_inHouse != null)
                            thisSumRcd.TotInjInHouseCost += incidentAccidentRcdDict.iaList.Cost_inHouse;

                        if (incidentAccidentRcdDict.iaList.Cost_Incurred != null)
                            thisSumRcd.TotInjIncurredCost += incidentAccidentRcdDict.iaList.Cost_Incurred;

                        if (incidentAccidentRcdDict.iaList.Cost_Reserve != null)
                            thisSumRcd.TotInjReservedCost += incidentAccidentRcdDict.iaList.Cost_Reserve;


                        if (incidentAccidentRcdDict.iaList.Osha_Restrict_Days != null)
                            thisSumRcd.TotRestrictDays += incidentAccidentRcdDict.iaList.Osha_Restrict_Days;

                        if (incidentAccidentRcdDict.iaList.Osha_Lost_Days != null)
                            thisSumRcd.TotRestrictDays += incidentAccidentRcdDict.iaList.Osha_Lost_Days;

                        if (incidentAccidentRcdDict.iaList.Osha_Record_Med != null && incidentAccidentRcdDict.iaList.Osha_Record_Med)
                            thisSumRcd.TotMedRecordable++;

                        //////////////////////////////
                        // Update Dictionary Record //
                        //////////////////////////////
                        if (!sumRcds.ContainsKey(incidentAccidentRcdDict.EmpDept))
                            sumRcds.Add(incidentAccidentRcdDict.EmpDept, thisSumRcd);
                    }



                }

                dict.Clear();

            }

            /////////////////////////////////
            // Put Result Into Spreadsheet //
            /////////////////////////////////
            foreach (sumRcd rcd in sumRcds.Values)
            {
                sl.SetCellValueNumeric(rowCount, 1, rcd.Dept);
                sl.SetCellValue(rowCount, 2, rcd.DeptName);
                sl.SetCellValueNumeric(rowCount, 4, rcd.TotHours.ToString(CultureInfo.InvariantCulture));

                sl.SetCellValueNumeric(rowCount, 5, rcd.TotFirAidClasses.ToString(CultureInfo.InvariantCulture));
                sl.SetCellValueNumeric(rowCount, 6, rcd.TotMedRecordable.ToString(CultureInfo.InvariantCulture));
                sl.SetCellValueNumeric(rowCount, 9, rcd.TotRestrictDays.ToString(CultureInfo.InvariantCulture));
                sl.SetCellValueNumeric(rowCount, 12, rcd.TotLostDays.ToString(CultureInfo.InvariantCulture));

                if (rcd.OSHA_NAICS != null)
                    sl.SetCellValueNumeric(rowCount, 3, rcd.OSHA_NAICS.ToString(CultureInfo.InvariantCulture));
                sl.SetCellValueNumeric(rowCount, 8, rcd.OSHA_TRIR_NAT_AVG.ToString(CultureInfo.InvariantCulture));
                sl.SetCellValueNumeric(rowCount, 11, rcd.OSHA_RIR_NAT_AVG.ToString(CultureInfo.InvariantCulture));
                sl.SetCellValueNumeric(rowCount, 14, rcd.OSHA_LTIR_NAT_AVG.ToString(CultureInfo.InvariantCulture));
                sl.SetCellValueNumeric(rowCount, 16, rcd.OSHA_DART_NAT_AVG.ToString(CultureInfo.InvariantCulture));

                string trir = string.Format("=SUM({0})", "(" +
                                                            SLConvert.ToCellReference(rowCount, 6) + "+" +
                                                            SLConvert.ToCellReference(rowCount, 9) + "+" +
                                                            SLConvert.ToCellReference(rowCount, 12) + ") * 200000/" +
                                                            SLConvert.ToCellReference(rowCount, 4));
                sl.SetCellValue(rowCount, 7, trir);



                string rir = string.Format("=SUM({0})", SLConvert.ToCellReference(rowCount, 9) + " * 200000 / " +
                                                            SLConvert.ToCellReference(rowCount, 4));
                sl.SetCellValue(rowCount, 10, rir);




                string ltir = string.Format("=SUM({0})", SLConvert.ToCellReference(rowCount, 12) + " * 200000 / " +
                                                            SLConvert.ToCellReference(rowCount, 4));
                sl.SetCellValue(rowCount, 13, ltir);


                string dart = string.Format("=SUM({0})", "(" +
                                                            SLConvert.ToCellReference(rowCount, 9) + "+" +
                                                            SLConvert.ToCellReference(rowCount, 12) + ") * 200000/" +
                                                            SLConvert.ToCellReference(rowCount, 4));

                sl.SetCellValue(rowCount, 15, dart);


                sl.SetCellValueNumeric(rowCount, 17, rcd.TotVehIncidents.ToString(CultureInfo.InvariantCulture));
                string vr = string.Format("=SUM({0})", SLConvert.ToCellReference(rowCount, 17) + " * 100000 / " +
                                                        SLConvert.ToCellReference(rowCount, 4));
                sl.SetCellValue(rowCount, 18, vr);



                sl.SetCellValueNumeric(rowCount, 19, rcd.TotInjInHouseCost.ToString(CultureInfo.InvariantCulture));
                sl.SetCellValueNumeric(rowCount, 20, rcd.TotInjIncurredCost.ToString(CultureInfo.InvariantCulture));
                sl.SetCellValueNumeric(rowCount, 21, rcd.TotInjReservedCost.ToString(CultureInfo.InvariantCulture));

                string cmh = string.Format("=SUM({0})", "(" +
                                                        SLConvert.ToCellReference(rowCount, 19) + "+" +
                                                        SLConvert.ToCellReference(rowCount, 20) + "+" +
                                                        SLConvert.ToCellReference(rowCount, 21) + "+" +
                                                        SLConvert.ToCellReference(rowCount, 22) + "+" +
                                                        SLConvert.ToCellReference(rowCount, 23) + "+" +
                                                        SLConvert.ToCellReference(rowCount, 24) + ") / " +
                                                        SLConvert.ToCellReference(rowCount, 4));
                sl.SetCellValue(rowCount, 25, cmh);

                sl.SetCellStyle(rowCount, 1, rowCount, 25, styleDataCenter);
                sl.SetCellStyle(rowCount, 1, rowCount, 5, borderRightBlack);
                sl.SetCellStyle(rowCount, 8, rowCount, 8, borderRightBlack);
                sl.SetCellStyle(rowCount, 11, rowCount, 11, borderRightBlack);
                sl.SetCellStyle(rowCount, 14, rowCount, 14, borderRightBlack);
                sl.SetCellStyle(rowCount, 16, rowCount, 16, borderRightBlack);
                sl.SetCellStyle(rowCount, 18, rowCount, 18, borderRightBlack);
                sl.SetCellStyle(rowCount, 21, rowCount, 21, borderRightBlack);
                sl.SetCellStyle(rowCount, 24, rowCount, 24, borderRightBlack);
                sl.SetCellStyle(rowCount, 25, rowCount, 25, borderRightBlack);
                rowCount++;
            }

            return rowCount;
        }
        public static int IncidentAccidentBuildConsolidatedMonSumData(ref SLDocument sl, ref List<SIU_ReportingChain> oshaData, int rowCount)
        {
            //////////////////////////
            // Setup Data Row Style //
            //////////////////////////
            SLStyle styleDataCenter = sl.CreateStyle();
            styleDataCenter.Font.FontName = "Arial";
            styleDataCenter.Font.FontSize = 11;
            styleDataCenter.Font.FontColor = System.Drawing.Color.Black;
            styleDataCenter.Alignment.Horizontal = HorizontalAlignmentValues.Center;
            styleDataCenter.Alignment.Vertical = VerticalAlignmentValues.Center;
            styleDataCenter.SetWrapText(true);

            ////////////////////////////////
            // Create Hard Column Borders //
            ////////////////////////////////
            SLStyle borderRightBlack = sl.CreateStyle();
            borderRightBlack.Border.RightBorder.BorderStyle = BorderStyleValues.Medium;
            borderRightBlack.Border.LeftBorder.Color = System.Drawing.Color.Black;

            //////////////////////////////////////////////////////////////////
            // kind Of Messy But Also A Little Cool                         //
            // Linq Returning an Anonymous Object Array                     //
            // So Using An Expando Object To Break It Out Into A Dictionary //
            //////////////////////////////////////////////////////////////////
            //dynamic incidentAccidentRcdDict = new ExpandoObject();
            //var dict = (IDictionary<string, object>)incidentAccidentRcdDict;

            /////////////////////////////////////////////////////////////////////////
            // Working Record Pulled From Dictionary Or Built To Add To Dictionary //
            /////////////////////////////////////////////////////////////////////////
            sumRcd ThisSumRcd;

            ///////////////////////////////////////////////
            // Dictionary Of ThisSumRcds indexed by Dept //
            ///////////////////////////////////////////////
            var sumRcds = new Dictionary<string, sumRcd>();

            /////////////////////////////////////////////////////
            // Build Dictionary Of Departments With Basic Osha //
            // Nat Stats Pulled From Reporting Chain Table     //
            /////////////////////////////////////////////////////
            foreach (SIU_ReportingChain rcr in oshaData)
            {
                ThisSumRcd = new sumRcd
                {
                    Dept = rcr.Dept,
                    OSHA_NAICS = rcr.OSHA_NAICS_Code ?? "0",
                    DeptName = rcr.DeptDesc ?? "",
                    OSHA_TRIR_NAT_AVG = (rcr.OSHA_TRIR_NAT_AVG != null) ? (float)rcr.OSHA_TRIR_NAT_AVG : 0,
                    OSHA_RIR_NAT_AVG = (rcr.OSHA_RIR_NAT_AVG != null) ? (float)rcr.OSHA_RIR_NAT_AVG : 0,
                    OSHA_LTIR_NAT_AVG = (rcr.OSHA_LRIR_NAT_AVG != null) ? (float)rcr.OSHA_LRIR_NAT_AVG : 0,
                    OSHA_DART_NAT_AVG = (rcr.OSHA_DART_NAT_AVG != null) ? (float)rcr.OSHA_DART_NAT_AVG : 0,
                };

                //////////////////////////////////
                // Add New Record To Dictionary //
                //////////////////////////////////
                sumRcds.Add(rcr.Dept, ThisSumRcd);
            }




            /////////////////////////////////
            // Put Result Into Spreadsheet //
            /////////////////////////////////
            foreach (sumRcd rcd in sumRcds.Values)
            {
                sl.SetCellValueNumeric(rowCount, 1, rcd.Dept);

                sl.SetCellValue(rowCount, 2, rcd.DeptName);

                if (rcd.OSHA_NAICS != null)
                    sl.SetCellValueNumeric(rowCount, 3, rcd.OSHA_NAICS.ToString(CultureInfo.InvariantCulture));

                sl.SetCellValueNumeric(rowCount, 4, rcd.TotHours.ToString(CultureInfo.InvariantCulture));

                string worksheetSum = string.Format("=SUM(January!{0}+February!{0}+March!{0}+April!{0}+May!{0}+June!{0}+July!{0}+August!{0}+September!{0}+October!{0}+November!{0}+December!{0})",
                                                SLConvert.ToCellReference(rowCount, 4));
                sl.SetCellValue(rowCount, 4, worksheetSum);

                worksheetSum = string.Format("=SUM(January!{0}+February!{0}+March!{0}+April!{0}+May!{0}+June!{0}+July!{0}+August!{0}+September!{0}+October!{0}+November!{0}+December!{0})",
                                                SLConvert.ToCellReference(rowCount, 5));
                sl.SetCellValue(rowCount, 5, worksheetSum);

                worksheetSum = string.Format("=SUM(January!{0}+February!{0}+March!{0}+April!{0}+May!{0}+June!{0}+July!{0}+August!{0}+September!{0}+October!{0}+November!{0}+December!{0})",
                                                SLConvert.ToCellReference(rowCount, 6));
                sl.SetCellValue(rowCount, 6, worksheetSum);

                string trir = string.Format("=SUM({0})", "(" +
                                                            SLConvert.ToCellReference(rowCount, 6) + "+" +
                                                            SLConvert.ToCellReference(rowCount, 9) + "+" +
                                                            SLConvert.ToCellReference(rowCount, 12) + ") * 200000/" +
                                                            SLConvert.ToCellReference(rowCount, 4));
                sl.SetCellValue(rowCount, 7, trir);

                sl.SetCellValueNumeric(rowCount, 8, rcd.OSHA_TRIR_NAT_AVG.ToString(CultureInfo.InvariantCulture));

                worksheetSum = string.Format("=SUM(January!{0}+February!{0}+March!{0}+April!{0}+May!{0}+June!{0}+July!{0}+August!{0}+September!{0}+October!{0}+November!{0}+December!{0})",
                                                SLConvert.ToCellReference(rowCount, 9));
                sl.SetCellValue(rowCount, 9, worksheetSum);

                string rir = string.Format("=SUM({0})", SLConvert.ToCellReference(rowCount, 9) + " * 200000 / " +
                                                            SLConvert.ToCellReference(rowCount, 4));
                sl.SetCellValue(rowCount, 10, rir);

                sl.SetCellValueNumeric(rowCount, 11, rcd.OSHA_RIR_NAT_AVG.ToString(CultureInfo.InvariantCulture));

                worksheetSum = string.Format("=SUM(January!{0}+February!{0}+March!{0}+April!{0}+May!{0}+June!{0}+July!{0}+August!{0}+September!{0}+October!{0}+November!{0}+December!{0})",
                                                SLConvert.ToCellReference(rowCount, 12));
                sl.SetCellValue(rowCount, 12, worksheetSum);

                string ltir = string.Format("=SUM({0})", SLConvert.ToCellReference(rowCount, 12) + " * 200000 / " +
                                                            SLConvert.ToCellReference(rowCount, 4));
                sl.SetCellValue(rowCount, 13, ltir);

                sl.SetCellValueNumeric(rowCount, 14, rcd.OSHA_LTIR_NAT_AVG.ToString(CultureInfo.InvariantCulture));

                string dart = string.Format("=SUM({0})", "(" +
                                                            SLConvert.ToCellReference(rowCount, 9) + "+" +
                                                            SLConvert.ToCellReference(rowCount, 12) + ") * 200000/" +
                                                            SLConvert.ToCellReference(rowCount, 4));

                sl.SetCellValue(rowCount, 15, dart);

                sl.SetCellValueNumeric(rowCount, 16, rcd.OSHA_DART_NAT_AVG.ToString(CultureInfo.InvariantCulture));

                worksheetSum = string.Format("=SUM(January!{0}+February!{0}+March!{0}+April!{0}+May!{0}+June!{0}+July!{0}+August!{0}+September!{0}+October!{0}+November!{0}+December!{0})",
                                                SLConvert.ToCellReference(rowCount, 17));
                sl.SetCellValue(rowCount, 17, worksheetSum);

                //string vr = string.Format("=SUM({0})", SLConvert.ToCellReference(rowCount, 17) + " * 100000 / " +
                //                                        SLConvert.ToCellReference(rowCount, 4));
                string vr = string.Format("=SUM({0})", SLConvert.ToCellReference(rowCount, 17) + " * " + SLConvert.ToCellReference(rowCount, 4) + " / 100000");
                sl.SetCellValue(rowCount, 18, vr);

                worksheetSum = string.Format("=SUM(January!{0}+February!{0}+March!{0}+April!{0}+May!{0}+June!{0}+July!{0}+August!{0}+September!{0}+October!{0}+November!{0}+December!{0})",
                                                SLConvert.ToCellReference(rowCount, 19));
                sl.SetCellValue(rowCount, 19, worksheetSum);

                worksheetSum = string.Format("=SUM(January!{0}+February!{0}+March!{0}+April!{0}+May!{0}+June!{0}+July!{0}+August!{0}+September!{0}+October!{0}+November!{0}+December!{0})",
                                                SLConvert.ToCellReference(rowCount, 20));
                sl.SetCellValue(rowCount, 20, worksheetSum);

                worksheetSum = string.Format("=SUM(January!{0}+February!{0}+March!{0}+April!{0}+May!{0}+June!{0}+July!{0}+August!{0}+September!{0}+October!{0}+November!{0}+December!{0})",
                                                SLConvert.ToCellReference(rowCount, 21));
                sl.SetCellValue(rowCount, 21, worksheetSum);

                worksheetSum = string.Format("=SUM(January!{0}+February!{0}+March!{0}+April!{0}+May!{0}+June!{0}+July!{0}+August!{0}+September!{0}+October!{0}+November!{0}+December!{0})",
                                                SLConvert.ToCellReference(rowCount, 21));
                sl.SetCellValue(rowCount, 22, worksheetSum);

                worksheetSum = string.Format("=SUM(January!{0}+February!{0}+March!{0}+April!{0}+May!{0}+June!{0}+July!{0}+August!{0}+September!{0}+October!{0}+November!{0}+December!{0})",
                                                SLConvert.ToCellReference(rowCount, 21));
                sl.SetCellValue(rowCount, 23, worksheetSum);

                worksheetSum = string.Format("=SUM(January!{0}+February!{0}+March!{0}+April!{0}+May!{0}+June!{0}+July!{0}+August!{0}+September!{0}+October!{0}+November!{0}+December!{0})",
                                                SLConvert.ToCellReference(rowCount, 21));
                sl.SetCellValue(rowCount, 24, worksheetSum);


                string cmh = string.Format("=SUM({0})", "(" +
                                                        SLConvert.ToCellReference(rowCount, 19) + "+" +
                                                        SLConvert.ToCellReference(rowCount, 20) + "+" +
                                                        SLConvert.ToCellReference(rowCount, 21) + "+" +
                                                        SLConvert.ToCellReference(rowCount, 22) + "+" +
                                                        SLConvert.ToCellReference(rowCount, 23) + "+" +
                                                        SLConvert.ToCellReference(rowCount, 24) + ") / " +
                                                        SLConvert.ToCellReference(rowCount, 4));
                sl.SetCellValue(rowCount, 25, cmh);

                sl.SetCellStyle(rowCount, 1, rowCount, 25, styleDataCenter);
                sl.SetCellStyle(rowCount, 1, rowCount, 5, borderRightBlack);
                sl.SetCellStyle(rowCount, 8, rowCount, 8, borderRightBlack);
                sl.SetCellStyle(rowCount, 11, rowCount, 11, borderRightBlack);
                sl.SetCellStyle(rowCount, 14, rowCount, 14, borderRightBlack);
                sl.SetCellStyle(rowCount, 16, rowCount, 16, borderRightBlack);
                sl.SetCellStyle(rowCount, 18, rowCount, 18, borderRightBlack);
                sl.SetCellStyle(rowCount, 21, rowCount, 21, borderRightBlack);
                sl.SetCellStyle(rowCount, 24, rowCount, 24, borderRightBlack);
                sl.SetCellStyle(rowCount, 25, rowCount, 25, borderRightBlack);
                rowCount++;
            }

            return rowCount;
        }
        public static void IncidentAccidentBuildSumsRow(ref SLDocument sl, int firstDataRow, int lastDataRow)
        {
            SLStyle styleHeaderBold = new SLStyle
            {
                Alignment = {Horizontal = HorizontalAlignmentValues.Center, Vertical = VerticalAlignmentValues.Center},
                Font = {Bold = true},
                Border =
                {
                    TopBorder = {BorderStyle = BorderStyleValues.Double},
                    BottomBorder = {BorderStyle = BorderStyleValues.Thick}
                }
            };
            sl.SetCellStyle(lastDataRow, 1, lastDataRow, 25, styleHeaderBold);

            ////////////////////////////////
            // Create Hard Column Borders //
            ////////////////////////////////
            SLStyle borderRightBlack = sl.CreateStyle();
            borderRightBlack.Border.RightBorder.BorderStyle = BorderStyleValues.Medium;
            borderRightBlack.Border.LeftBorder.Color = System.Drawing.Color.Black;
            sl.SetCellStyle(lastDataRow, 1, lastDataRow, 5, borderRightBlack);
            sl.SetCellStyle(lastDataRow, 8, lastDataRow, 8, borderRightBlack);
            sl.SetCellStyle(lastDataRow, 11, lastDataRow, 11, borderRightBlack);
            sl.SetCellStyle(lastDataRow, 14, lastDataRow, 14, borderRightBlack);
            sl.SetCellStyle(lastDataRow, 16, lastDataRow, 16, borderRightBlack);
            sl.SetCellStyle(lastDataRow, 18, lastDataRow, 18, borderRightBlack);
            sl.SetCellStyle(lastDataRow, 21, lastDataRow, 21, borderRightBlack);
            sl.SetCellStyle(lastDataRow, 24, lastDataRow, 24, borderRightBlack);
            sl.SetCellStyle(lastDataRow, 25, lastDataRow, 25, borderRightBlack);

            SLStyle greyBackground = sl.CreateStyle();
            greyBackground.Fill.SetPatternType(PatternValues.Solid);
            greyBackground.Fill.SetPatternForegroundColor(System.Drawing.Color.Black);

            sl.MergeWorksheetCells(lastDataRow, 1, lastDataRow, 3);
            sl.SetCellValue(lastDataRow, 1, "Grand Totals");


            for (int col = 4; col <= 25; col++)
            {
                string sum = string.Format("=SUM({0})", SLConvert.ToCellReference(firstDataRow, col) + " : " + SLConvert.ToCellReference(lastDataRow - 1, col));
                sl.SetCellValue(lastDataRow, col, sum);
            }
            sl.SetCellValue(lastDataRow, 8, "");
            sl.SetCellStyle(lastDataRow, 8, lastDataRow, 8, greyBackground);

            sl.SetCellValue(lastDataRow, 11, "");
            sl.SetCellStyle(lastDataRow, 11, lastDataRow, 11, greyBackground);

            sl.SetCellValue(lastDataRow, 14, "");
            sl.SetCellStyle(lastDataRow, 14, lastDataRow, 14, greyBackground);

            sl.SetCellValue(lastDataRow, 16, "");
            sl.SetCellStyle(lastDataRow, 16, lastDataRow, 16, greyBackground);

        }
#endregion Incident / Accident Workbook

#region Safety Pays
        public static void BuildSpWorkbook(System.IO.Stream ResponseStream, DateTime _start, DateTime _end, StringCollection sessionVar)
        {
            //////////////////////////////////
            // Build The Document Framework //
            //////////////////////////////////
            SLDocument sl = new SLDocument
            {
                DocumentProperties =
                {
                    Creator = "Larry Truitt",
                    ContentStatus = "Generated " + DateTime.Now,
                    Title = "Safety Pays Tabulations",
                    Description = "Safety Pays Tracking Report generated by SiYOU.Shermco.Com"
                }
            };

            ////////////////////////////////
            // List Of Months  < 1, "1" > //
            ////////////////////////////////
            Dictionary<int, string> months = new Dictionary<int, string>();
            _PrjPts pts;
            Dictionary<int, string> ptTypes = SqlServer_Impl.GetAutoCompletePointTypes().ToDictionary(mc => mc.UID, mc => mc.Description);

            ////////////////////////////////////////
            // Get List Of Non Employee Employees //
            ////////////////////////////////////////
            List<Shermco_Employee> non_emps = SqlServer_Impl.Get_Non_Employees();


            /////////////////////////////////////////
            // If the said 1/1/13 through 4/1/13   //
            // they meant  1/1/13 through 3/31/13  //     
            /////////////////////////////////////////
            if (_end.Day == 1)
                _end = _end.AddDays(-1);

            ////////////////////////////////////
            // Build Points Projection Tables //
            ////////////////////////////////////
            pts = new _PrjPts(_start, _end);

            //////////////////////
            // Setup The Sheets //
            //////////////////////
            sl.RenameWorksheet(SLDocument.DefaultFirstSheetName, "By Dept");
            sl.AddWorksheet("By Emp");
            sl.AddWorksheet("Bar Graph");

            if (sessionVar != null)
                if (sessionVar.Contains("ShermcoYou_Safety_Pays"))
                {
                    sl.AddWorksheet("Prj Pts Calc");
                    sl.AddWorksheet("Std Prj Pts");
                    sl.AddWorksheet("Pts by Type");
                    sl.AddWorksheet("Sum By Emp");
                    sl.AddWorksheet("Sum By Type");
                    sl.AddWorksheet("Dtl Submissions");
                }

            //////////////////////////
            // Get Data For Reports //
            //////////////////////////
            var data = SqlServer_Impl.GetAdminPointsRptEmpPointsFromProd(_start, _end);

            ///////////////////////////////////////////////////
            // Build A List Of Months Involved In The Report //
            ///////////////////////////////////////////////////
            foreach (SIU_Points_Rpt rptRcd in data.OrderBy("EmpDept"))
            {
                if (!months.ContainsKey(rptRcd.EventDate.Month))
                    if (rptRcd.EventDate != DateTime.MinValue)
                        months.Add(rptRcd.EventDate.Month, rptRcd.EventDate.Month.ToString(CultureInfo.InvariantCulture));
                months = months.OrderBy(x => x.Value).ToDictionary(x => x.Key, x => x.Value);
            }

            ///////////////////////////////////////////////
            // Build The Summary By Department Worksheet //
            ///////////////////////////////////////////////
            sl.SelectWorksheet("By Dept");
            SP_BuildDeptData(ref sl, ref data, ref months, ref pts, _start, _end, non_emps);


            ////////////////////////////////////////////
            // Build The Detail By Employee Worksheet //
            ////////////////////////////////////////////
            sl.SelectWorksheet("By Emp");
            SP_BuildEmpDtlData(ref sl, ref data, ref ptTypes, _start, _end);


            /////////////////////////
            // Show Points By Type //
            /////////////////////////
            sl.SelectWorksheet("Pts by Type");
            SP_BuildPtTypeData(ref sl);



            if (sessionVar != null)
                if (sessionVar.Contains("ShermcoYou_Safety_Pays"))
                {
                    List<Tuple<SIU_SafetyPays_Point, SIU_SafetyPaysReport>> rawData = SqlServer_Impl.GetSafetyPaysRawDataRpt(_start, _end);

                    /////////////////////////////////////////////////////////////////////////
                    // Build A Worksheet Showing Calculated Projected Points Over A Period //
                    /////////////////////////////////////////////////////////////////////////
                    sl.SelectWorksheet("Prj Pts Calc");
                    SP_BuildPrjDtlData(ref sl, ref ptTypes, ref pts, _start, _end);

                    /////////////////////////////////////////////////////////
                    // Build A Worksheet Showing Default Projection Points //
                    /////////////////////////////////////////////////////////
                    sl.SelectWorksheet("Std Prj Pts");
                    SP_BuildPrjStdData(ref sl, ref ptTypes, _start, _end);

                    ///////////////////////////////////////////////
                    // Build Deptartment Managers Summary Report //
                    ///////////////////////////////////////////////
                    sl.SelectWorksheet("Sum By Emp");
                    SP_BuildDeptSumData(ref sl, _start, _end);

                    ///////////////////////////////////////////////
                    // Build Deptartment Managers Summary Report //
                    ///////////////////////////////////////////////
                    sl.SelectWorksheet("Sum By Type");
                    SP_BuildTypeSum(ref sl, ref ptTypes, ref rawData, ref months);

                    ///////////////////
                    // Raw Data Dump //
                    ///////////////////
                    sl.SelectWorksheet("Dtl Submissions");
                    SP_BuildRawData(ref sl, ref ptTypes, ref rawData);
                }

            sl.SelectWorksheet("By Dept");

            /////////////////////////////////
            // And Send Back A Spreadsheet //
            /////////////////////////////////
            sl.SaveAs(ResponseStream);
        }

        public static void SP_BuildDeptData(ref SLDocument sl, ref List<SIU_Points_Rpt> data, ref Dictionary<int, string> months, ref _PrjPts pts, DateTime _start, DateTime _end, List<Shermco_Employee> non_emps)
        {
            EmpByMon sumEmpPts;                                                             // Array [14] (One For Each Month  [0] For Sum 
            Dictionary<string, EmpByMon> sumEmpMon = new Dictionary<string, EmpByMon>();    // Sum By Emp  <"empNo",  Array[14] As Above

            int startRowCnt = 1;
            int endRowCnt = 1;

            /////////////////////////
            // Build Sheet Outline //
            /////////////////////////
            SP_BuildDeptPage(ref sl, _start, _end);

            ///////////////////////////////////////////////////////////
            // Build A Summary Array For Each Employee For Each Dept //
            //////////////////////////////////////////////////////////
            foreach (SIU_Points_Rpt rptRcd in data.OrderBy("EmpDept"))
            {
                if (sumEmpMon.ContainsKey(rptRcd.Emp_No))
                {
                    sumEmpPts = sumEmpMon[rptRcd.Emp_No];
                    if (rptRcd.EventDate != DateTime.MinValue)
                        sumEmpPts.Months[rptRcd.EventDate.Month] += rptRcd.Points;
                    sumEmpPts.Months[13] += rptRcd.Points;
                }
                else
                {
                    sumEmpPts = new EmpByMon();
                    if (rptRcd.EventDate != DateTime.MinValue)
                        sumEmpPts.Months[rptRcd.EventDate.Month] = rptRcd.Points;

                    sumEmpPts.Months[13] = rptRcd.Points;
                    sumEmpMon.Add(rptRcd.Emp_No, sumEmpPts);
                }
            }

            string prevDept = "FIRSTRCD";
            string prevEmp = "FIRSTRCD";
            int deptSum = 0;

            ///////////////////////////////////////////////////////////////////
            // Walking Back Through The Data Of Emp Detail Rcds By Dept, Emp //
            ///////////////////////////////////////////////////////////////////
            foreach (SIU_Points_Rpt rptRcd in data)
            {
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////
                // First Time We See An Emp -- Grab Summary Record From Above (sumEmpMon) And Produce A  Dept Detail Line //
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////
                if (prevEmp != rptRcd.Emp_No)
                {
                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    // But If We Switched To A New Department -- Write Out Summary Row, Then New Deaprtment Header, Then Column Headers //
                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    if (prevDept != rptRcd.EmpDept)
                    {
                        deptSum = Convert.ToInt32(pts.GetPrjSumForDept(rptRcd.EmpDept)[0]);

                        ////////////////////////////////
                        // Add Sum Row For Department //
                        ////////////////////////////////
                        if (prevDept != "FIRSTRCD")
                        {
                            ////////////////////////////////
                            // Build Summary Row For Dept //
                            ////////////////////////////////
                            SP_BuildDeptSum(ref sl, startRowCnt, endRowCnt, ref months);

                            //////////////////////////////////
                            // Skip 2 Rows Before Next Dept //
                            //////////////////////////////////
                            startRowCnt = endRowCnt + 2;
                            endRowCnt = startRowCnt;
                        }

                        /////////////////////////////////
                        // Header For Next Deptartment //
                        /////////////////////////////////
                        SP_BuildDeptHeader(ref sl, endRowCnt, rptRcd);
                        endRowCnt++;

                        //////////////////////////
                        // Table Column Headers //
                        //////////////////////////
                        SP_BuildDeptColumnHeader(ref sl, endRowCnt, ref months);
                        endRowCnt++;

                        prevDept = rptRcd.EmpDept;
                    }

                    ///////////////////////////////////////
                    // Write Out Employee Summary Record //
                    ///////////////////////////////////////
                    sumEmpPts = sumEmpMon[rptRcd.Emp_No];

                    //////////////////////////////////////////////////////////
                    // If This Is A Contractor, as needed, or temp employee //
                    // There Are no points expectation                      //
                    //////////////////////////////////////////////////////////
                    int tdeptSum = deptSum;
                    var non_emp = (from ne in non_emps where rptRcd.Emp_No == ne.No_ select ne).SingleOrDefault();
                    if (non_emp != null)
                        tdeptSum = 0;

                    SP_BuildDeptDtl(ref sl, endRowCnt, rptRcd.EmpName, ref sumEmpPts, tdeptSum, ref months);

                    prevEmp = rptRcd.Emp_No;
                    endRowCnt++;
                }
            }

            /////////////////////////////////////
            // Build Summary Row For Last Dept //
            /////////////////////////////////////
            SP_BuildDeptSum(ref sl, startRowCnt, endRowCnt, ref months);
        }
        private static void SP_BuildDeptPage(ref SLDocument sl, DateTime _start, DateTime _end)
        {
            SLPageSettings ps = new SLPageSettings();

            SLFont ft = sl.CreateFont();
            ft.SetFont("Impact", 16);
            ps.AppendOddHeader(ft, "Points Calculated For " + _start.ToShortDateString() + " - " + _end.ToShortDateString());
            ps.AppendEvenHeader(ft, "Points Calculated For " + _start.ToShortDateString() + " - " + _end.ToShortDateString());

            ps.AppendOddFooter(ft, "page ");
            ps.AppendOddFooter(SLHeaderFooterFormatCodeValues.PageNumber);
            ps.AppendOddFooter(" of ");
            ps.AppendOddFooter(SLHeaderFooterFormatCodeValues.NumberOfPages);

            ps.AppendEvenFooter(ft, "page ");
            ps.AppendEvenFooter(SLHeaderFooterFormatCodeValues.PageNumber);
            ps.AppendEvenFooter(" of ");
            ps.AppendEvenFooter(SLHeaderFooterFormatCodeValues.NumberOfPages);

            //ps.View = SheetViewValues.PageLayout;

            sl.SetPageSettings(ps);


            sl.SetColumnWidth("A", 20);
            sl.SetColumnWidth("B", 9);
            sl.SetColumnWidth("C", 9);
        }
        private static void SP_BuildDeptHeader(ref SLDocument sl, int Row, SIU_Points_Rpt rptRcd)
        {
            SLStyle styleDeptHeader = sl.CreateStyle();
            styleDeptHeader.Font.FontName = "Calibri";
            styleDeptHeader.Font.FontSize = 18;
            styleDeptHeader.Font.Bold = true;

            sl.MergeWorksheetCells(Row, 1, Row, 2);
            sl.SetCellValue(Row, 1, "Department " + ((rptRcd.EmpDept.Length > 0) ? rptRcd.EmpDept : "Missing"));
            sl.SetCellStyle(Row, 1, styleDeptHeader);

            sl.MergeWorksheetCells(Row, 3, Row, 7);
        }
        private static void SP_BuildDeptColumnHeader(ref SLDocument sl, int Row, ref Dictionary<int, string> months)
        {
            SLStyle styleRowHeader = sl.CreateStyle();
            styleRowHeader.Font.FontName = "Calibri";
            styleRowHeader.Font.FontSize = 11;
            styleRowHeader.Font.Bold = true;
            styleRowHeader.Alignment.Horizontal = HorizontalAlignmentValues.Center;
            styleRowHeader.SetWrapText(true);

            //////////////////////////////////////////
            // Start New Dept -- Add Column Headers //
            //////////////////////////////////////////                        
            sl.SetCellValue(Row, 1, "Name");
            sl.SetCellValue(Row, 2, "Points");
            sl.SetCellValue(Row, 3, "Planned Points");

            int col = 4;
            foreach (KeyValuePair<int, string> pair in months)
            {
                sl.SetColumnWidth(col, 11);
                sl.SetCellValue(Row, col++, CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(pair.Key));
            }
            sl.SetCellValue(Row, col, "Plan Pct");

            sl.SetCellStyle(Row, 1, Row, col, styleRowHeader);
        }
        private static void SP_BuildDeptSum(ref SLDocument sl, int startRowCnt, int endRowCnt, ref Dictionary<int, string> months)
        {
            int deptHeadRow = startRowCnt;

            SLStyle styleRowSum = sl.CreateStyle();
            styleRowSum.Font.FontName = "Calibri";
            styleRowSum.Font.FontSize = 12;
            styleRowSum.Font.Bold = true;
            styleRowSum.Font.FontColor = System.Drawing.Color.White;
            styleRowSum.Fill.SetPatternType(PatternValues.Solid);
            styleRowSum.Fill.SetPatternForegroundColor(System.Drawing.Color.Black);
            styleRowSum.Alignment.Horizontal = HorizontalAlignmentValues.Center;

            ////////////////////////////////////////////////////////////////////////////////////////////////
            // Get Projections For Department (Summed Across Reporting Period -- Applies To Each Employee //
            ////////////////////////////////////////////////////////////////////////////////////////////////

            sl.SetCellValue(endRowCnt, 1, "Total");

            ////////////////////////////////
            // Sum Column Points For Dept //
            ////////////////////////////////
            string s1 = string.Format("=SUM({0})", SLConvert.ToCellRange(startRowCnt + 2, 2, endRowCnt - 1, 2));
            sl.SetCellValue(endRowCnt, 2, s1);

            ///////////////////////////////////////
            // Sum Column Panned Points for Dept //
            ///////////////////////////////////////
            string s2 = string.Format("=SUM({0})", SLConvert.ToCellRange(startRowCnt + 2, 3, endRowCnt - 1, 3));
            sl.SetCellValue(endRowCnt, 3, s2);

            ////////////////////////////////////////////
            // Sum The By-Point-Type Columns For Dept //
            ////////////////////////////////////////////
            int col = 4;
            foreach (KeyValuePair<int, string> pair in months)
            {
                string s3 = string.Format("=SUM({0})", SLConvert.ToCellRange(startRowCnt + 2, col, endRowCnt - 1, col));
                sl.SetCellValue(endRowCnt, col++, s3);
            }

            /////////////////////////////////
            // Formula For % Plan for Dept //
            /////////////////////////////////
            //string s4 = "=TEXT( (B" + (endRowCnt) + "/C" + (endRowCnt) + "),\"#%\")";
            string s4 = "=(B" + endRowCnt + "/C" + endRowCnt + ") * 100";
            sl.SetCellValue(endRowCnt, col, s4);

            ////////////////////////
            // Format The Sum Row //
            ////////////////////////
            sl.SetCellStyle(endRowCnt, 1, endRowCnt, col, styleRowSum);

            ///////////////////////////////////////////
            // Create Collapsed Group Of Detail Rows //
            ///////////////////////////////////////////
            sl.GroupRows(deptHeadRow + 1, endRowCnt - 1);
            sl.CollapseRows(endRowCnt);


            ////////////////////////////////////
            // Add Dept Pct of Plan Bar Chart //
            ////////////////////////////////////
            string s6 = "=G" + endRowCnt;
            sl.SetCellValue(deptHeadRow, 3, s6);

            SLConditionalFormatting cf = new SLConditionalFormatting(deptHeadRow, 3, deptHeadRow, 3);
            cf.SetCustomDataBar(true, 0, 100,
                SLConditionalFormatMinMaxValues.Number, "0",
                SLConditionalFormatMinMaxValues.Number, "100",
                System.Drawing.Color.Blue);
            sl.AddConditionalFormatting(cf);
        }
        private static void SP_BuildDeptDtl(ref SLDocument sl, int Row, string EmpName, ref EmpByMon sumEmpPts, int deptSum, ref Dictionary<int, string> months)
        {
            SLStyle styleRow = sl.CreateStyle();
            styleRow.Font.FontName = "Calibri";
            styleRow.Font.FontSize = 11;
            styleRow.Alignment.Horizontal = HorizontalAlignmentValues.Center;

            sl.SetCellValue(Row, 1, EmpName);
            sl.SetCellValue(Row, 2, sumEmpPts.Months[13]);
            sl.SetCellValue(Row, 3, deptSum);

            int col = 4;
            foreach (KeyValuePair<int, string> pair in months)
                sl.SetCellValue(Row, col++, sumEmpPts.Months[pair.Key]);

            //string s5 = "=TEXT( (B" + (Row) + "/C" + (Row) + "),\"#%\")";
            string s5 = "=(B" + Row + "/C" + Row + ") * 100";
            if (deptSum == 0) s5 = "0";
            sl.SetCellValue(Row, col, s5);
            sl.SetCellStyle(Row, 2, Row, col, styleRow);

            ///////////////////////////////////////////////
            // Add Pct of Plan Bar Chart Into Line Items //
            ///////////////////////////////////////////////
            SLConditionalFormatting cf = new SLConditionalFormatting(Row, 7, Row, 7);
            cf.SetCustomDataBar(false, 0, 100,
                SLConditionalFormatMinMaxValues.Number, "0",
                SLConditionalFormatMinMaxValues.Number, "100",
                System.Drawing.Color.Blue);
            sl.AddConditionalFormatting(cf);
        }

        public static void SP_BuildEmpDtlData(ref SLDocument sl, ref List<SIU_Points_Rpt> data, ref Dictionary<int, string> ptTypes, DateTime _start, DateTime _end)
        {
            //////////////////////////////////////////////////////////////////////////////////////////
            // Buid Dict To Hold Freq Used Conversion of PointsType Index to PointsType Description //
            //////////////////////////////////////////////////////////////////////////////////////////
            EmpDtl ed = new EmpDtl { ReasonPts = new int[ptTypes.Count] };
            SIU_Points_Rpt prevRcd = new SIU_Points_Rpt { Emp_No = "FIRSTRCD" };

            SP_BuildEmpPage(ref sl, _start, _end);
            SP_BuildEmpColumnHeader(ref sl, 1, ref ptTypes);

            int row = 2;
            int deptStartRow = 2;

            ////////////////////////////////
            // Walk Through Eash Data Row //
            ////////////////////////////////
            foreach (SIU_Points_Rpt rptRcd in data)
            {
                /////////////////////////////////////////////////////////////////////////////
                // For Each Data Record For A Given Employee, Write The Cell To The  Table //
                /////////////////////////////////////////////////////////////////////////////
                if (prevRcd.Emp_No != rptRcd.Emp_No && prevRcd.Emp_No != "FIRSTRCD")
                {
                    SP_BuildEmpDtl(ref sl, row++, "(" + prevRcd.Emp_No + ") " + prevRcd.EmpName, prevRcd.EmpDept, ref ed);
                    ed.ReasonPts = new int[ptTypes.Count];

                    if (prevRcd.EmpDept != rptRcd.EmpDept)
                    {
                        SP_BuildEmpSum(ref sl, deptStartRow, row - 1, 4, ptTypes.Count + 5, prevRcd.EmpDept + " Totals");
                        row += 2;
                        deptStartRow = row;
                    }
                }

                if (rptRcd.EventDate != DateTime.MinValue)
                    ed.ReasonPts[rptRcd.ReasonForPoints - 1] += rptRcd.Points;
                prevRcd = rptRcd;
            }
            SP_BuildEmpDtl(ref sl, row++, "(" + prevRcd.Emp_No + ") " + prevRcd.EmpName, prevRcd.EmpDept, ref ed);
            SP_BuildEmpSum(ref sl, deptStartRow, row - 1, 4, ptTypes.Count + 5, prevRcd.EmpDept + " Totals");

        }
        private static void SP_BuildEmpPage(ref SLDocument sl, DateTime _start, DateTime _end)
        {
            SLPageSettings ps = new SLPageSettings();

            SLFont ft = sl.CreateFont();
            ft.SetFont("Impact", 16);
            ps.AppendOddHeader(ft, "Points Calculated For " + _start.ToShortDateString() + " - " + _end.ToShortDateString());
            ps.AppendEvenHeader(ft, "Points Calculated For " + _start.ToShortDateString() + " - " + _end.ToShortDateString());

            ps.AppendOddFooter(ft, "page ");
            ps.AppendOddFooter(SLHeaderFooterFormatCodeValues.PageNumber);
            ps.AppendOddFooter(" of ");
            ps.AppendOddFooter(SLHeaderFooterFormatCodeValues.NumberOfPages);

            ps.AppendEvenFooter(ft, "page ");
            ps.AppendEvenFooter(SLHeaderFooterFormatCodeValues.PageNumber);
            ps.AppendEvenFooter(" of ");
            ps.AppendEvenFooter(SLHeaderFooterFormatCodeValues.NumberOfPages);

            sl.SetColumnWidth("A", 25);
        }
        private static void SP_BuildEmpColumnHeader(ref SLDocument sl, int Row, ref Dictionary<int, string> ptTypes)
        {
            SLStyle styleRowHeader = sl.CreateStyle();
            styleRowHeader.Font.FontName = "Calibri";
            styleRowHeader.Font.FontSize = 11;
            styleRowHeader.Font.Bold = true;
            styleRowHeader.Alignment.Horizontal = HorizontalAlignmentValues.Center;
            styleRowHeader.Alignment.Vertical = VerticalAlignmentValues.Bottom;
            styleRowHeader.SetWrapText(true);
            styleRowHeader.Border.BottomBorder.BorderStyle = BorderStyleValues.Medium;
            styleRowHeader.Border.RightBorder.Color = System.Drawing.Color.Black;

            SLStyle styleCellRBorder = sl.CreateStyle();
            styleCellRBorder.Border.RightBorder.BorderStyle = BorderStyleValues.Medium;
            styleCellRBorder.Border.RightBorder.Color = System.Drawing.Color.Black;

            //////////////////////////////////////////
            // Start New Dept -- Add Column Headers //
            //////////////////////////////////////////                        
            sl.SetCellValue(Row, 1, "Name");
            sl.SetCellValue(Row, 2, "Dept");
            sl.SetCellValue(Row, 3, "Eligibility");

            int col = 4;
            foreach (KeyValuePair<int, string> pair in ptTypes)
            {
                sl.SetColumnWidth(col, 11);
                sl.SetCellValue(Row, col++, pair.Value);
            }
            sl.SetCellValue(Row, col, "Total");

            sl.SetCellStyle(Row, 1, Row, col, styleRowHeader);
            sl.SetCellStyle(Row, 3, styleCellRBorder);

            ///////////////////////////
            // Freeze the top 2 rows //
            ///////////////////////////
            sl.FreezePanes(1, 1);
        }
        private static void SP_BuildEmpDtl(ref SLDocument sl, int row, string EmpName, string EmpDept, ref EmpDtl SumPtByType)
        {
            SLStyle styleRow = sl.CreateStyle();
            styleRow.Font.FontName = "Calibri";
            styleRow.Font.FontSize = 11;
            styleRow.Alignment.Horizontal = HorizontalAlignmentValues.Center;

            sl.SetCellValue(row, 1, EmpName);
            sl.SetCellValue(row, 2, EmpDept);
            sl.SetCellValue(row, 3, "-");

            int col = 4;
            foreach (var ptCnt in SumPtByType.ReasonPts)
                sl.SetCellValueNumeric(row, col++, ((ptCnt > 0) ? ptCnt.ToString(CultureInfo.InvariantCulture) : ""));

            string s1 = "=SUM(" + SLConvert.ToCellRange(row, 4, row, col - 1) + ")";
            sl.SetCellValue(row, col, s1);

            sl.SetCellStyle(row, 2, row, col, styleRow);
        }
        private static void SP_BuildEmpSum(ref SLDocument sl, int startRowCnt, int endRowCnt, int startCol, int endCol, string totTxt)
        {
            SLStyle styleRowSum = sl.CreateStyle();
            styleRowSum.Font.FontName = "Calibri";
            styleRowSum.Font.FontSize = 12;
            styleRowSum.Font.Bold = true;
            styleRowSum.Font.FontColor = System.Drawing.Color.White;
            styleRowSum.Fill.SetPatternType(PatternValues.Solid);
            styleRowSum.Fill.SetPatternForegroundColor(System.Drawing.Color.Black);
            styleRowSum.Alignment.Horizontal = HorizontalAlignmentValues.Center;

            sl.SetCellValue(endRowCnt + 1, 1, totTxt);

            ///////////////////////
            // Sum Column Points //
            ///////////////////////
            for (int col = startCol; col < endCol; col++)
            {
                string s1 = "=SUM(" + SLConvert.ToCellRange(startRowCnt, col, endRowCnt, col) + ")";
                sl.SetCellValue(endRowCnt + 1, col, s1);
            }

            ////////////////////////
            // Format The Sum Row //
            ////////////////////////
            sl.SetCellStyle(endRowCnt + 1, 1, endRowCnt + 1, endCol, styleRowSum);

            ///////////////////////////////////////////
            // Create Collapsed Group Of Detail Rows //
            ///////////////////////////////////////////
            sl.GroupRows(startRowCnt, endRowCnt);
        }

        public static void SP_BuildPrjDtlData(ref SLDocument sl, ref Dictionary<int, string> ptTypes, ref _PrjPts pts, DateTime _start, DateTime _end)
        {
            SP_BuildPrjPage(ref sl, _start, _end);

            int row = SP_BuildPrjSumTable(ref sl, 1, ref ptTypes, ref pts);
            SP_BuildPrjMonTable(ref sl, row, ref ptTypes, ref pts);

        }
        private static void SP_BuildPrjPage(ref SLDocument sl, DateTime _start, DateTime _end)
        {
            SLPageSettings ps = new SLPageSettings();

            SLFont ft = sl.CreateFont();
            ft.SetFont("Impact", 16);
            ps.AppendOddHeader(ft, "Points Calculated For " + _start.ToShortDateString() + " - " + _end.ToShortDateString());
            ps.AppendEvenHeader(ft, "Points Calculated For " + _start.ToShortDateString() + " - " + _end.ToShortDateString());

            ps.AppendOddFooter(ft, "page ");
            ps.AppendOddFooter(SLHeaderFooterFormatCodeValues.PageNumber);
            ps.AppendOddFooter(" of ");
            ps.AppendOddFooter(SLHeaderFooterFormatCodeValues.NumberOfPages);

            ps.AppendEvenFooter(ft, "page ");
            ps.AppendEvenFooter(SLHeaderFooterFormatCodeValues.PageNumber);
            ps.AppendEvenFooter(" of ");
            ps.AppendEvenFooter(SLHeaderFooterFormatCodeValues.NumberOfPages);
        }
        private static void SP_BuildPrjColumnHeader(ref SLDocument sl, int Row, string TableHeaderText, ref Dictionary<int, string> ptTypes)
        {
            SLStyle styleRowHeader = sl.CreateStyle();
            styleRowHeader.Font.FontName = "Calibri";
            styleRowHeader.Font.FontSize = 11;
            styleRowHeader.Font.Bold = true;
            styleRowHeader.Alignment.Horizontal = HorizontalAlignmentValues.Center;
            styleRowHeader.Alignment.Vertical = VerticalAlignmentValues.Bottom;
            styleRowHeader.SetWrapText(true);
            styleRowHeader.Border.BottomBorder.BorderStyle = BorderStyleValues.Medium;

            SLStyle styleCellRBorder = sl.CreateStyle();
            styleCellRBorder.Border.RightBorder.BorderStyle = BorderStyleValues.Thick;
            styleCellRBorder.Border.RightBorder.Color = System.Drawing.Color.Black;

            SLStyle styleDeptHeader = sl.CreateStyle();
            styleDeptHeader.Font.FontName = "Calibri";
            styleDeptHeader.Font.FontSize = 18;
            styleDeptHeader.Font.Bold = true;

            sl.MergeWorksheetCells(Row, 1, Row, 7);
            sl.SetCellValue(Row, 1, TableHeaderText);
            sl.SetCellStyle(Row, 1, styleDeptHeader);

            Row++;


            //////////////////////////////////////////
            // Start New Dept -- Add Column Headers //
            //////////////////////////////////////////                        
            sl.SetCellValue(Row, 1, "Dept");
            sl.SetCellValue(Row, 2, "Total");
            sl.SetColumnWidth("A", 9);
            sl.SetColumnWidth("B", 9);

            int col = 3;
            foreach (KeyValuePair<int, string> pair in ptTypes)
            {
                sl.SetColumnWidth(col, 11);
                sl.SetCellValue(Row, col++, pair.Value);
            }

            sl.SetCellStyle(Row, 1, Row, col, styleRowHeader);
            sl.SetCellStyle(Row, 2, styleCellRBorder);

            ////////////////////////////////////////
            // Freeze the top row, left 2 columns //
            ////////////////////////////////////////
            sl.FreezePanes(1, 2);
        }
        private static int SP_BuildPrjSumTable(ref SLDocument sl, int row, ref Dictionary<int, string> ptTypes, ref _PrjPts pts)
        {
            int firstRow = row + 1;
            int col = 1;

            SLStyle styleRow = sl.CreateStyle();
            styleRow.Font.FontName = "Calibri";
            styleRow.Font.FontSize = 11;
            styleRow.Alignment.Horizontal = HorizontalAlignmentValues.Center;

            SLStyle styleColHeader = sl.CreateStyle();
            styleColHeader.Font.FontName = "Calibri";
            styleColHeader.Font.FontSize = 11;
            styleColHeader.Font.Bold = true;
            styleColHeader.Alignment.Horizontal = HorizontalAlignmentValues.Center;
            styleColHeader.Border.RightBorder.BorderStyle = BorderStyleValues.Medium;
            styleColHeader.Border.RightBorder.Color = System.Drawing.Color.Black;

            SLStyle styleCellRBorder = sl.CreateStyle();
            styleCellRBorder.Border.RightBorder.BorderStyle = BorderStyleValues.Thick;
            styleCellRBorder.Border.RightBorder.Color = System.Drawing.Color.Black;

            SP_BuildPrjColumnHeader(ref sl, row, "TOTAL", ref ptTypes);
            row += 2;

            //////////////////////////////
            // Write Summary Table Data //
            //////////////////////////////
            foreach (var sumRptRcd in pts.GetPrjSumDict())
            {
                /////////////////////////////////////////////
                // Build Column Header (Department Number) //
                /////////////////////////////////////////////
                sl.SetCellValue(row, 1, ((sumRptRcd.Key.Length > 0) ? sumRptRcd.Key : "----"));
                sl.SetCellStyle(row, 1, row, 2, styleColHeader);

                ////////////////////////////////////////////////////////////////////////
                // Build Row Detail Values (Total Prj Points By Category Over Period) //
                ////////////////////////////////////////////////////////////////////////
                col = 3;
                foreach (double ptCnt in sumRptRcd.Value.Skip(1))
                    sl.SetCellValueNumeric(row, col++, ((ptCnt > 0) ? ptCnt.ToString(CultureInfo.InvariantCulture) : "0"));
                sl.SetCellStyle(row, 2, row, col - 1, styleRow);

                /////////////////////////////////////////////////////////////////////////////
                // Add A Summary Column Showing Expected Point For Deptartment Over Period //
                /////////////////////////////////////////////////////////////////////////////
                string s1 = "=ROUND(SUM(" + SLConvert.ToCellRange(row, 3, row, col - 1) + "),0)";
                sl.SetCellValue(row, 2, s1);
                sl.SetCellStyle(row, 2, styleCellRBorder);

                row++;
            }


            SLStyle styleBgr = sl.CreateStyle();
            styleBgr.Fill.SetPatternType(PatternValues.Solid);
            styleBgr.Fill.SetPatternForegroundColor(System.Drawing.Color.BlanchedAlmond);
            sl.SetCellStyle(firstRow, 1, row - 1, col, styleBgr);

            SLStyle styleBorderTop = sl.CreateStyle();
            styleBorderTop.SetTopBorder(BorderStyleValues.Medium, System.Drawing.Color.Black);
            sl.SetCellStyle(firstRow, 1, firstRow, col, styleBorderTop);

            SLStyle styleBorderBottom = sl.CreateStyle();
            styleBorderBottom.SetBottomBorder(BorderStyleValues.Medium, System.Drawing.Color.Black);
            sl.SetCellStyle(row - 1, 1, row - 1, col, styleBorderBottom);

            SLStyle styleBorderRight = sl.CreateStyle();
            styleBorderRight.SetRightBorder(BorderStyleValues.Medium, System.Drawing.Color.Black);
            sl.SetCellStyle(firstRow, col, row - 1, col, styleBorderRight);

            return row;
        }
        private static void SP_BuildPrjMonTable(ref SLDocument sl, int row, ref Dictionary<int, string> ptTypes, ref _PrjPts pts)
        {
            int col = 1;

            SLStyle styleRow = sl.CreateStyle();
            styleRow.Font.FontName = "Calibri";
            styleRow.Font.FontSize = 11;
            styleRow.Alignment.Horizontal = HorizontalAlignmentValues.Center;

            SLStyle styleColHeader = sl.CreateStyle();
            styleColHeader.Font.FontName = "Calibri";
            styleColHeader.Font.FontSize = 11;
            styleColHeader.Font.Bold = true;
            styleColHeader.Alignment.Horizontal = HorizontalAlignmentValues.Center;
            styleColHeader.Border.RightBorder.BorderStyle = BorderStyleValues.Medium;
            styleColHeader.Border.RightBorder.Color = System.Drawing.Color.Black;

            SLStyle styleCellRBorder = sl.CreateStyle();
            styleCellRBorder.Border.RightBorder.BorderStyle = BorderStyleValues.Thick;
            styleCellRBorder.Border.RightBorder.Color = System.Drawing.Color.Black;


            ///////////////////////////////////////////
            // Get List Of Months Included In Report //
            ///////////////////////////////////////////
            foreach (var rptMonths in pts.GetDatesDict())
            {
                int firstRow = row + 3;
                row += 2;

                string monthName = (rptMonths.Value).ToString("MMM", CultureInfo.InvariantCulture);
                SP_BuildPrjColumnHeader(ref sl, row++, monthName, ref ptTypes);
                row++;

                //////////////////////////////
                // Write Monthly Table Data //
                //////////////////////////////
                foreach (var monRptRcd in pts.GetMonthlyDict(rptMonths.Value))
                {
                    /////////////////////////////////////////////
                    // Build Column Header (Department Number) //
                    /////////////////////////////////////////////
                    sl.SetCellValue(row, 1, ((monRptRcd.Key.Length > 0) ? monRptRcd.Key : "----"));
                    sl.SetCellStyle(row, 1, row, 2, styleColHeader);

                    //////////////////////////////////////////////////////////////////////
                    // Build Row Detail Values (Total Prj Points By Category For Month) //
                    //////////////////////////////////////////////////////////////////////
                    col = 3;
                    foreach (double ptCnt in monRptRcd.Value.Skip(1))
                        sl.SetCellValueNumeric(row, col++, ((ptCnt > 0) ? ptCnt.ToString(CultureInfo.InvariantCulture) : "0"));
                    sl.SetCellStyle(row, 2, row, col - 1, styleRow);

                    ///////////////////////////////////////////////////////////////////////////
                    // Add A Summary Column Showing Expected Point For Deptartment For Month //
                    ///////////////////////////////////////////////////////////////////////////
                    string s1 = "=ROUND(SUM(" + SLConvert.ToCellRange(row, 3, row, col - 1) + "),0)";
                    sl.SetCellValue(row, 2, s1);
                    sl.SetCellStyle(row, 2, styleCellRBorder);

                    row++;
                }

                SLStyle styleBgr = sl.CreateStyle();
                styleBgr.Fill.SetPatternType(PatternValues.Solid);
                styleBgr.Fill.SetPatternForegroundColor(System.Drawing.Color.BlanchedAlmond);
                sl.SetCellStyle(firstRow, 1, row - 1, col, styleBgr);

                SLStyle styleBorderTop = sl.CreateStyle();
                styleBorderTop.SetTopBorder(BorderStyleValues.Medium, System.Drawing.Color.Black);
                sl.SetCellStyle(firstRow, 1, firstRow, col, styleBorderTop);

                SLStyle styleBorderBottom = sl.CreateStyle();
                styleBorderBottom.SetBottomBorder(BorderStyleValues.Medium, System.Drawing.Color.Black);
                sl.SetCellStyle(row - 1, 1, row - 1, col, styleBorderBottom);

                SLStyle styleBorderRight = sl.CreateStyle();
                styleBorderRight.SetRightBorder(BorderStyleValues.Medium, System.Drawing.Color.Black);
                sl.SetCellStyle(firstRow, col, row - 1, col, styleBorderRight);
            }
        }

        public static void SP_BuildPrjStdData(ref SLDocument sl, ref Dictionary<int, string> ptTypes, DateTime _start, DateTime _end)
        {
            SP_BuildPrjStdPage(ref sl, _start, _end);
            SP_BuildPrjStdTable(ref sl, 1, ref ptTypes);

        }
        private static void SP_BuildPrjStdPage(ref SLDocument sl, DateTime _start, DateTime _end)
        {
            SLPageSettings ps = new SLPageSettings();

            SLFont ft = sl.CreateFont();
            ft.SetFont("Impact", 16);
            ps.AppendOddHeader(ft, "Points Calculated For " + _start.ToShortDateString() + " - " + _end.ToShortDateString());
            ps.AppendEvenHeader(ft, "Points Calculated For " + _start.ToShortDateString() + " - " + _end.ToShortDateString());

            ps.AppendOddFooter(ft, "page ");
            ps.AppendOddFooter(SLHeaderFooterFormatCodeValues.PageNumber);
            ps.AppendOddFooter(" of ");
            ps.AppendOddFooter(SLHeaderFooterFormatCodeValues.NumberOfPages);

            ps.AppendEvenFooter(ft, "page ");
            ps.AppendEvenFooter(SLHeaderFooterFormatCodeValues.PageNumber);
            ps.AppendEvenFooter(" of ");
            ps.AppendEvenFooter(SLHeaderFooterFormatCodeValues.NumberOfPages);
        }
        private static void SP_BuildPrjStdColumnHeader(ref SLDocument sl, int Row, string TableHeaderText, ref Dictionary<int, string> ptTypes)
        {
            SLStyle styleRowHeader = sl.CreateStyle();
            styleRowHeader.Font.FontName = "Calibri";
            styleRowHeader.Font.FontSize = 11;
            styleRowHeader.Font.Bold = true;
            styleRowHeader.Alignment.Horizontal = HorizontalAlignmentValues.Center;
            styleRowHeader.Alignment.Vertical = VerticalAlignmentValues.Bottom;
            styleRowHeader.SetWrapText(true);
            styleRowHeader.Border.BottomBorder.BorderStyle = BorderStyleValues.Medium;

            SLStyle styleCellRBorder = sl.CreateStyle();
            styleCellRBorder.Border.RightBorder.BorderStyle = BorderStyleValues.Thick;
            styleCellRBorder.Border.RightBorder.Color = System.Drawing.Color.Black;

            SLStyle styleDeptHeader = sl.CreateStyle();
            styleDeptHeader.Font.FontName = "Calibri";
            styleDeptHeader.Font.FontSize = 18;
            styleDeptHeader.Font.Bold = true;

            sl.MergeWorksheetCells(Row, 1, Row, 7);
            sl.SetCellValue(Row, 1, TableHeaderText);
            sl.SetCellStyle(Row, 1, styleDeptHeader);

            Row++;


            //////////////////////////////////////////
            // Start New Dept -- Add Column Headers //
            //////////////////////////////////////////                        
            sl.SetCellValue(Row, 1, "Dept");
            sl.SetCellValue(Row, 2, "Total");
            sl.SetColumnWidth("A", 9);
            sl.SetColumnWidth("B", 9);

            int col = 3;

            foreach (KeyValuePair<int, string> pair in ptTypes)
            {
                sl.SetColumnWidth(col, 11);
                sl.SetCellValue(Row, col++, pair.Value);
            }

            sl.SetCellStyle(Row, 1, Row, col, styleRowHeader);
            sl.SetCellStyle(Row, 2, styleCellRBorder);

            ////////////////////////////////////////
            // Freeze the top row, left 2 columns //
            ////////////////////////////////////////
            //sl.FreezePanes(1, 2);
        }
        private static void SP_BuildPrjStdTable(ref SLDocument sl, int row, ref Dictionary<int, string> ptTypes)
        {
            int FirstRow = row + 1;
            int col = 1;

            SLStyle styleRow = sl.CreateStyle();
            styleRow.Font.FontName = "Calibri";
            styleRow.Font.FontSize = 11;
            styleRow.Alignment.Horizontal = HorizontalAlignmentValues.Center;

            SLStyle styleColHeader = sl.CreateStyle();
            styleColHeader.Font.FontName = "Calibri";
            styleColHeader.Font.FontSize = 11;
            styleColHeader.Font.Bold = true;
            styleColHeader.Alignment.Horizontal = HorizontalAlignmentValues.Center;
            styleColHeader.Border.RightBorder.BorderStyle = BorderStyleValues.Medium;
            styleColHeader.Border.RightBorder.Color = System.Drawing.Color.Black;

            SLStyle styleCellRBorder = sl.CreateStyle();
            styleCellRBorder.Border.RightBorder.BorderStyle = BorderStyleValues.Thick;
            styleCellRBorder.Border.RightBorder.Color = System.Drawing.Color.Black;


            SP_BuildPrjStdColumnHeader(ref sl, row++, "Default Projection Values", ref ptTypes);
            row++;

            //////////////////////////////
            // Write Monthly Table Data //
            //////////////////////////////
            foreach (var sumRptRcd in new _StdPrjPts().GetPrjSumDict())
            {
                /////////////////////////////////////////////
                // Build Column Header (Department Number) //
                /////////////////////////////////////////////
                sl.SetCellValue(row, 1, ((sumRptRcd.Key.Length > 0) ? sumRptRcd.Key : "----"));
                sl.SetCellStyle(row, 1, row, 2, styleColHeader);

                //////////////////////////////////////////////////////////////////////
                // Build Row Detail Values (Total Prj Points By Category For Month) //
                //////////////////////////////////////////////////////////////////////
                col = 3;
                foreach (double ptCnt in sumRptRcd.Value.Skip(1))
                    sl.SetCellValueNumeric(row, col++, ((ptCnt > 0) ? ptCnt.ToString(CultureInfo.InvariantCulture) : "0"));
                sl.SetCellStyle(row, 2, row, col - 1, styleRow);

                ///////////////////////////////////////////////////////////////////////////
                // Add A Summary Column Showing Expected Point For Deptartment For Month //
                ///////////////////////////////////////////////////////////////////////////
                string s1 = "=ROUND(SUM(" + SLConvert.ToCellRange(row, 3, row, col - 1) + "),0)";
                sl.SetCellValue(row, 2, s1);
                sl.SetCellStyle(row, 2, styleCellRBorder);

                row++;
            }

            SLStyle styleBgr = sl.CreateStyle();
            styleBgr.Fill.SetPatternType(PatternValues.Solid);
            styleBgr.Fill.SetPatternForegroundColor(System.Drawing.Color.BlanchedAlmond);
            sl.SetCellStyle(FirstRow, 1, row - 1, col, styleBgr);

            SLStyle styleBorderTop = sl.CreateStyle();
            styleBorderTop.SetTopBorder(BorderStyleValues.Medium, System.Drawing.Color.Black);
            sl.SetCellStyle(FirstRow, 1, FirstRow, col, styleBorderTop);

            SLStyle styleBorderBottom = sl.CreateStyle();
            styleBorderBottom.SetBottomBorder(BorderStyleValues.Medium, System.Drawing.Color.Black);
            sl.SetCellStyle(row - 1, 1, row - 1, col, styleBorderBottom);

            SLStyle styleBorderRight = sl.CreateStyle();
            styleBorderRight.SetRightBorder(BorderStyleValues.Medium, System.Drawing.Color.Black);
            sl.SetCellStyle(FirstRow, col, row - 1, col, styleBorderRight);
        }

        public static void SP_BuildPtTypeData(ref SLDocument sl)
        {
            SP_BuildPtTypePage(ref sl);
            SP_BuildPtTypeTable(ref sl, 1);
        }
        private static void SP_BuildPtTypePage(ref SLDocument sl)
        {
            SLPageSettings ps = new SLPageSettings();

            SLFont ft = sl.CreateFont();
            ft.SetFont("Impact", 16);
            ps.AppendOddHeader(ft, "Default Point Values");
            ps.AppendEvenHeader(ft, "Default Point Values");

            ps.AppendOddFooter(ft, "page ");
            ps.AppendOddFooter(SLHeaderFooterFormatCodeValues.PageNumber);
            ps.AppendOddFooter(" of ");
            ps.AppendOddFooter(SLHeaderFooterFormatCodeValues.NumberOfPages);

            ps.AppendEvenFooter(ft, "page ");
            ps.AppendEvenFooter(SLHeaderFooterFormatCodeValues.PageNumber);
            ps.AppendEvenFooter(" of ");
            ps.AppendEvenFooter(SLHeaderFooterFormatCodeValues.NumberOfPages);
        }
        private static void SP_BuildPtTypeColumnHeader(ref SLDocument sl, int Row, string TableHeaderText)
        {
            SLStyle styleRowHeader = sl.CreateStyle();
            styleRowHeader.Font.FontName = "Calibri";
            styleRowHeader.Font.FontSize = 11;
            styleRowHeader.Font.Bold = true;
            styleRowHeader.Alignment.Horizontal = HorizontalAlignmentValues.Center;
            styleRowHeader.Alignment.Vertical = VerticalAlignmentValues.Bottom;
            styleRowHeader.SetWrapText(true);
            styleRowHeader.Border.BottomBorder.BorderStyle = BorderStyleValues.Medium;

            SLStyle styleCellRBorder = sl.CreateStyle();
            styleCellRBorder.Border.RightBorder.BorderStyle = BorderStyleValues.Thick;
            styleCellRBorder.Border.RightBorder.Color = System.Drawing.Color.Black;

            SLStyle styleDeptHeader = sl.CreateStyle();
            styleDeptHeader.Font.FontName = "Calibri";
            styleDeptHeader.Font.FontSize = 18;
            styleDeptHeader.Font.Bold = true;

            sl.MergeWorksheetCells(Row, 1, Row, 3);
            sl.SetCellValue(Row, 1, TableHeaderText);
            sl.SetCellStyle(Row, 1, styleDeptHeader);

            Row++;


            //////////////////////////////////////////
            // Start New Dept -- Add Column Headers //
            //////////////////////////////////////////                        
            sl.SetCellValue(Row, 1, "ID");
            sl.SetCellValue(Row, 2, "Points Type");
            sl.SetCellValue(Row, 3, "Dafault Value");
            sl.SetColumnWidth("B", 40);
            sl.SetColumnWidth("C", 13);

            sl.SetCellStyle(Row, 1, Row, 3, styleRowHeader);
            //sl.SetCellStyle(Row, 1, styleCellRBorder);

            ////////////////////////////////////////
            // Freeze the top row, left 2 columns //
            ////////////////////////////////////////
            //sl.FreezePanes(1, 2);
        }
        private static void SP_BuildPtTypeTable(ref SLDocument sl, int row)
        {
            int firstRow = row + 1;
            const int col = 3;

            SLStyle styleRow = sl.CreateStyle();
            styleRow.Font.FontName = "Calibri";
            styleRow.Font.FontSize = 11;
            styleRow.Alignment.Horizontal = HorizontalAlignmentValues.Center;

            SLStyle styleColHeader = sl.CreateStyle();
            styleColHeader.Font.FontName = "Calibri";
            styleColHeader.Font.FontSize = 11;
            styleColHeader.Font.Bold = true;
            styleColHeader.Alignment.Horizontal = HorizontalAlignmentValues.Center;
            styleColHeader.Border.RightBorder.BorderStyle = BorderStyleValues.Medium;
            styleColHeader.Border.RightBorder.Color = System.Drawing.Color.Black;

            SLStyle styleCellRBorder = sl.CreateStyle();
            styleCellRBorder.Border.RightBorder.BorderStyle = BorderStyleValues.Thick;
            styleCellRBorder.Border.RightBorder.Color = System.Drawing.Color.Black;


            SP_BuildPtTypeColumnHeader(ref sl, row++, "Point Types And Devault Value");
            row++;

            foreach (var pt in SqlServer_Impl.GetAutoCompletePointTypes())
            {
                sl.SetCellValueNumeric(row, 1, pt.UID.ToString());
                sl.SetCellValue(row, 2, pt.Description);
                sl.SetCellValue(row, 3, pt.PointsCount);
                sl.SetCellStyle(row, 1, row, 3, styleColHeader);

                row++;
            }


            SLStyle styleBgr = sl.CreateStyle();
            styleBgr.Fill.SetPatternType(PatternValues.Solid);
            styleBgr.Fill.SetPatternForegroundColor(System.Drawing.Color.BlanchedAlmond);
            sl.SetCellStyle(firstRow, 1, row - 1, col, styleBgr);

            SLStyle styleBorderTop = sl.CreateStyle();
            styleBorderTop.SetTopBorder(BorderStyleValues.Medium, System.Drawing.Color.Black);
            sl.SetCellStyle(firstRow, 1, firstRow, col, styleBorderTop);

            SLStyle styleBorderBottom = sl.CreateStyle();
            styleBorderBottom.SetBottomBorder(BorderStyleValues.Medium, System.Drawing.Color.Black);
            sl.SetCellStyle(row - 1, 1, row - 1, col, styleBorderBottom);

            SLStyle styleBorderRight = sl.CreateStyle();
            styleBorderRight.SetRightBorder(BorderStyleValues.Medium, System.Drawing.Color.Black);
            sl.SetCellStyle(firstRow, col, row - 1, col, styleBorderRight);
        }

        public static void SP_BuildDeptSumData(ref SLDocument sl, DateTime _start, DateTime _end)
        {
            SP_BuildDeptSumPage(ref sl);
            SP_BuildDeptSumTable(ref sl, 1, _start, _end);
        }
        private static void SP_BuildDeptSumPage(ref SLDocument sl)
        {
            SLPageSettings ps = new SLPageSettings();

            SLFont ft = sl.CreateFont();
            ft.SetFont("Impact", 16);
            ps.AppendOddHeader(ft, "Safety Pays Department Submission Summary Report");
            ps.AppendEvenHeader(ft, "Safety Pays Department Submission Summary Report");

            ps.AppendOddFooter(ft, "page ");
            ps.AppendOddFooter(SLHeaderFooterFormatCodeValues.PageNumber);
            ps.AppendOddFooter(" of ");
            ps.AppendOddFooter(SLHeaderFooterFormatCodeValues.NumberOfPages);

            ps.AppendEvenFooter(ft, "page ");
            ps.AppendEvenFooter(SLHeaderFooterFormatCodeValues.PageNumber);
            ps.AppendEvenFooter(" of ");
            ps.AppendEvenFooter(SLHeaderFooterFormatCodeValues.NumberOfPages);
        }
        private static void SP_BuildDeptSumTable(ref SLDocument sl, int row, DateTime _start, DateTime _end)
        {
            string Dept = "";

            SLStyle styleRow = sl.CreateStyle();
            styleRow.Font.FontName = "Calibri";
            styleRow.Font.FontSize = 11;
            styleRow.Alignment.Horizontal = HorizontalAlignmentValues.Center;

            SLStyle styleColHeader = sl.CreateStyle();
            styleColHeader.Font.FontName = "Calibri";
            styleColHeader.Font.FontSize = 11;
            styleColHeader.Font.Bold = true;
            styleColHeader.Alignment.Horizontal = HorizontalAlignmentValues.Center;
            styleColHeader.Border.RightBorder.BorderStyle = BorderStyleValues.Medium;
            styleColHeader.Border.RightBorder.Color = System.Drawing.Color.Black;

            SLStyle styleCellRBorder = sl.CreateStyle();
            styleCellRBorder.Border.RightBorder.BorderStyle = BorderStyleValues.Thick;
            styleCellRBorder.Border.RightBorder.Color = System.Drawing.Color.Black;


            //////////////////////////////
            // Write Monthly Table Data //
            //////////////////////////////
            foreach (var rptRcd in SqlServer_Impl.GetSafetyPaysDeptRpt(_start, _end))
            {
                if (Dept != rptRcd.Global_Dimension_1_Code)
                {
                    if (Dept.Length > 0)
                        row += 2;

                    Dept = rptRcd.Global_Dimension_1_Code;
                    SP_BuildDeptSumColumnHeader(ref sl, row++, "Department " + Dept);
                    row++;
                }

                sl.SetCellValue(row, 1, rptRcd.IncStatus);
                sl.SetCellValueNumeric(row, 2, rptRcd.cnt.ToString());
                sl.SetCellValue(row, 3, rptRcd.Name);
                sl.SetCellValue(row, 4, rptRcd.IncTypeTxt);
                sl.SetCellValueNumeric(row, 5, rptRcd.PointsAssigned.ToString());

                row++;
            }
        }
        private static void SP_BuildDeptSumColumnHeader(ref SLDocument sl, int Row, string TableHeaderText)
        {
            SLStyle styleRowHeader = sl.CreateStyle();
            styleRowHeader.Font.FontName = "Calibri";
            styleRowHeader.Font.FontSize = 11;
            styleRowHeader.Font.Bold = true;
            styleRowHeader.Alignment.Horizontal = HorizontalAlignmentValues.Center;
            styleRowHeader.Alignment.Vertical = VerticalAlignmentValues.Bottom;
            styleRowHeader.SetWrapText(true);
            styleRowHeader.Border.BottomBorder.BorderStyle = BorderStyleValues.Medium;

            SLStyle styleCellRBorder = sl.CreateStyle();
            styleCellRBorder.Border.RightBorder.BorderStyle = BorderStyleValues.Thick;
            styleCellRBorder.Border.RightBorder.Color = System.Drawing.Color.Black;

            SLStyle styleDeptHeader = sl.CreateStyle();
            styleDeptHeader.Font.FontName = "Calibri";
            styleDeptHeader.Font.FontSize = 18;
            styleDeptHeader.Font.Bold = true;

            sl.MergeWorksheetCells(Row, 1, Row, 5);
            sl.SetCellValue(Row, 1, TableHeaderText);
            sl.SetCellStyle(Row, 1, styleDeptHeader);

            Row++;


            //////////////////////////////////////////
            // Start New Dept -- Add Column Headers //
            //////////////////////////////////////////                        
            sl.SetCellValue(Row, 1, "Status");
            sl.SetCellValue(Row, 2, "Count");
            sl.SetCellValue(Row, 3, "Employee");
            sl.SetCellValue(Row, 4, "Report Type");
            sl.SetCellValue(Row, 5, "Value");
            sl.SetColumnWidth("A", 10);
            sl.SetColumnWidth("B", 10);
            sl.SetColumnWidth("C", 40);
            sl.SetColumnWidth("D", 40);
            sl.SetColumnWidth("E", 10);

            sl.SetCellStyle(Row, 1, Row, 5, styleRowHeader);
        }

        public static void SP_BuildTypeSum(ref SLDocument sl, ref Dictionary<int, string> ptTypes, ref List<Tuple<SIU_SafetyPays_Point, SIU_SafetyPaysReport>> rawData, ref Dictionary<int, string> months)
        {
            SP_BuildTypeSumPage(ref sl);
            SP_BuildTypeSumColumnHeader(ref sl, 1, "Type Sum");
            SP_BuildTypeSumTable(ref sl, 3, ref ptTypes, ref rawData, ref months);
        }
        private static void SP_BuildTypeSumPage(ref SLDocument sl)
        {
            SLPageSettings ps = new SLPageSettings();

            SLFont ft = sl.CreateFont();
            ft.SetFont("Impact", 16);
            ps.AppendOddHeader(ft, "Safety Pays Department Submission Summary Report By Type");
            ps.AppendEvenHeader(ft, "Safety Pays Department Submission Summary Report By Type");

            ps.AppendOddFooter(ft, "page ");
            ps.AppendOddFooter(SLHeaderFooterFormatCodeValues.PageNumber);
            ps.AppendOddFooter(" of ");
            ps.AppendOddFooter(SLHeaderFooterFormatCodeValues.NumberOfPages);

            ps.AppendEvenFooter(ft, "page ");
            ps.AppendEvenFooter(SLHeaderFooterFormatCodeValues.PageNumber);
            ps.AppendEvenFooter(" of ");
            ps.AppendEvenFooter(SLHeaderFooterFormatCodeValues.NumberOfPages);
        }
        private static void SP_BuildTypeSumColumnHeader(ref SLDocument sl, int Row, string TableHeaderText)
        {
            SLStyle styleRowHeader = sl.CreateStyle();
            styleRowHeader.Font.FontName = "Calibri";
            styleRowHeader.Font.FontSize = 11;
            styleRowHeader.Font.Bold = true;
            styleRowHeader.Alignment.Horizontal = HorizontalAlignmentValues.Center;
            styleRowHeader.Alignment.Vertical = VerticalAlignmentValues.Bottom;
            styleRowHeader.SetWrapText(true);
            styleRowHeader.Border.BottomBorder.BorderStyle = BorderStyleValues.Medium;

            SLStyle styleCellRBorder = sl.CreateStyle();
            styleCellRBorder.Border.RightBorder.BorderStyle = BorderStyleValues.Thick;
            styleCellRBorder.Border.RightBorder.Color = System.Drawing.Color.Black;

            SLStyle styleDeptHeader = sl.CreateStyle();
            styleDeptHeader.Font.FontName = "Calibri";
            styleDeptHeader.Font.FontSize = 18;
            styleDeptHeader.Font.Bold = true;

            sl.MergeWorksheetCells(Row, 1, Row, 5);
            sl.SetCellValue(Row, 1, TableHeaderText);
            sl.SetCellStyle(Row, 1, styleDeptHeader);

            Row++;


            //////////////////////////////////////////
            // Start New Dept -- Add Column Headers //
            //////////////////////////////////////////                        
            sl.SetCellValue(Row, 1, "Month"); sl.SetColumnWidth("A", 20);
            sl.SetCellValue(Row, 2, "Points Type"); sl.SetColumnWidth("B", 35);
            sl.SetCellValue(Row, 3, "Awarded"); sl.SetColumnWidth("C", 10);
            sl.SetCellValue(Row, 4, "Submitted"); sl.SetColumnWidth("D", 10);
            sl.SetCellValue(Row, 5, "Rejected"); sl.SetColumnWidth("E", 10);
            sl.SetCellValue(Row, 6, "Open"); sl.SetColumnWidth("F", 10);
            sl.SetCellValue(Row, 7, "Working"); sl.SetColumnWidth("G", 10);
            sl.SetCellValue(Row, 8, "Replaced"); sl.SetColumnWidth("H", 10);
            sl.SetCellValue(Row, 9, "Closed"); sl.SetColumnWidth("I", 10);

            sl.SetCellStyle(Row, 1, Row, 9, styleRowHeader);

            ///////////////////////////
            // Freeze the top 2 rows //
            ///////////////////////////
            sl.FreezePanes(2, 0);
        }
        private static void SP_BuildTypeSumTable(ref SLDocument sl, int row, ref Dictionary<int, string> ptTypes, ref List<Tuple<SIU_SafetyPays_Point, SIU_SafetyPaysReport>> rawData, ref Dictionary<int, string> months)
        {
            DateTimeFormatInfo mfi = new DateTimeFormatInfo();

            SLStyle styleRow = sl.CreateStyle();
            styleRow.Font.FontName = "Calibri";
            styleRow.Font.FontSize = 11;
            styleRow.Alignment.Horizontal = HorizontalAlignmentValues.Center;

            SLStyle wrap = sl.CreateStyle();
            wrap.SetWrapText(true);

            TypSumByMon typeSum;
            Dictionary<string, TypSumByMon> sumTypMon = new Dictionary<string, TypSumByMon>();

            ///////////////////////////////////
            // Effectivly Presort the report //
            ///////////////////////////////////
            foreach (int mon in months.Keys)
            {
                foreach (int ptKey in ptTypes.Keys)
                {
                    typeSum = new TypSumByMon();

                    typeSum.Month = mfi.GetMonthName(mon);
                    typeSum.Type = ptKey;

                    string key = mon + ":" + ptKey;
                    sumTypMon.Add(key, typeSum);
                }
            }

            ////////////////////////
            // Calculate the data //
            ////////////////////////
            foreach (var rptRcd in rawData)
            {
                string key = rptRcd.Item1.EventDate.Month + ":" + rptRcd.Item1.ReasonForPoints;

                typeSum = sumTypMon[key];

                typeSum.Submitted++;
                typeSum.Points += rptRcd.Item1.Points;

                if (rptRcd.Item2 != null)
                    switch (rptRcd.Item2.IncStatus)
                    {
                        case "Reject": typeSum.Rejected++; break;
                        case "Open": typeSum.Open++; break;
                        case "Closed": typeSum.Closed++; break;
                        case "Working": typeSum.Working++; break;
                        case "Replaced": typeSum.Killed++; break;
                    }
                else
                    typeSum.Closed++;
            }


            ////////////////
            // Write Data //
            ////////////////
            string prevMon = "";
            foreach (var rptRcd in sumTypMon)
            {
                if (prevMon.Length > 0 && prevMon != rptRcd.Value.Month) row++;

                sl.SetCellValue(row, 1, rptRcd.Value.Month);
                sl.SetCellValue(row, 2, ptTypes[rptRcd.Value.Type]);

                sl.SetCellValueNumeric(row, 3, rptRcd.Value.Points.ToString());
                sl.SetCellValueNumeric(row, 4, rptRcd.Value.Submitted.ToString());
                sl.SetCellValueNumeric(row, 5, rptRcd.Value.Rejected.ToString());
                sl.SetCellValueNumeric(row, 6, rptRcd.Value.Open.ToString());
                sl.SetCellValueNumeric(row, 7, rptRcd.Value.Working.ToString());
                sl.SetCellValueNumeric(row, 8, rptRcd.Value.Killed.ToString());
                sl.SetCellValueNumeric(row, 9, rptRcd.Value.Closed.ToString());

                sl.SetCellStyle(row, 3, row, 9, styleRow);
                prevMon = rptRcd.Value.Month;
                row++;
            }
        }

        public static void SP_BuildRawData(ref SLDocument sl, ref Dictionary<int, string> ptTypes, ref List<Tuple<SIU_SafetyPays_Point, SIU_SafetyPaysReport>> rawData)
        {
            SP_BuildRawDataPage(ref sl);
            SP_BuildRawDataColumnHeader(ref sl, 1, "Raw Data");
            SP_BuildRawDataTable(ref sl, 3, ref ptTypes, ref rawData);
        }
        private static void SP_BuildRawDataPage(ref SLDocument sl)
        {
            SLPageSettings ps = new SLPageSettings();

            SLFont ft = sl.CreateFont();
            ft.SetFont("Impact", 16);
            ps.AppendOddHeader(ft, "Safety Pays Department Submission Detail Report");
            ps.AppendEvenHeader(ft, "Safety Pays Department Submission Detail Report");

            ps.AppendOddFooter(ft, "page ");
            ps.AppendOddFooter(SLHeaderFooterFormatCodeValues.PageNumber);
            ps.AppendOddFooter(" of ");
            ps.AppendOddFooter(SLHeaderFooterFormatCodeValues.NumberOfPages);

            ps.AppendEvenFooter(ft, "page ");
            ps.AppendEvenFooter(SLHeaderFooterFormatCodeValues.PageNumber);
            ps.AppendEvenFooter(" of ");
            ps.AppendEvenFooter(SLHeaderFooterFormatCodeValues.NumberOfPages);
        }
        private static void SP_BuildRawDataColumnHeader(ref SLDocument sl, int Row, string TableHeaderText)
        {
            SLStyle styleRowHeader = sl.CreateStyle();
            styleRowHeader.Font.FontName = "Calibri";
            styleRowHeader.Font.FontSize = 11;
            styleRowHeader.Font.Bold = true;
            styleRowHeader.Alignment.Horizontal = HorizontalAlignmentValues.Center;
            styleRowHeader.Alignment.Vertical = VerticalAlignmentValues.Bottom;
            styleRowHeader.SetWrapText(true);
            styleRowHeader.Border.BottomBorder.BorderStyle = BorderStyleValues.Medium;

            SLStyle styleCellRBorder = sl.CreateStyle();
            styleCellRBorder.Border.RightBorder.BorderStyle = BorderStyleValues.Thick;
            styleCellRBorder.Border.RightBorder.Color = System.Drawing.Color.Black;

            SLStyle styleDeptHeader = sl.CreateStyle();
            styleDeptHeader.Font.FontName = "Calibri";
            styleDeptHeader.Font.FontSize = 18;
            styleDeptHeader.Font.Bold = true;

            sl.MergeWorksheetCells(Row, 1, Row, 5);
            sl.SetCellValue(Row, 1, TableHeaderText);
            sl.SetCellStyle(Row, 1, styleDeptHeader);

            Row++;


            //////////////////////////////////////////
            // Start New Dept -- Add Column Headers //
            //////////////////////////////////////////                        
            sl.SetCellValue(Row, 1, "Incident"); sl.SetColumnWidth("A", 10);
            sl.SetCellValue(Row, 2, "Status"); sl.SetColumnWidth("B", 10);
            sl.SetCellValue(Row, 3, "Report Type"); sl.SetColumnWidth("C", 35);
            sl.SetCellValue(Row, 4, "Meeting Type"); sl.SetColumnWidth("D", 13);

            sl.SetCellValue(Row, 5, "Rpt Opened"); sl.SetColumnWidth("E", 13);
            sl.SetCellValue(Row, 6, "Rpt Closed"); sl.SetColumnWidth("F", 13);
            sl.SetCellValue(Row, 7, "Award"); sl.SetColumnWidth("G", 13);
            sl.SetCellValue(Row, 8, "Rpt Incident"); sl.SetColumnWidth("H", 13);
            sl.SetCellValue(Row, 9, "Rpt Meeting"); sl.SetColumnWidth("I", 13);
            sl.SetCellValue(Row, 10, "Event Period"); sl.SetColumnWidth("J", 13);

            sl.SetCellValue(Row, 11, "Emp ID"); sl.SetColumnWidth("K", 6);
            sl.SetCellValue(Row, 12, "Obs ID"); sl.SetColumnWidth("L", 6);
            sl.SetCellValue(Row, 13, "Pts"); sl.SetColumnWidth("M", 6);

            sl.SetCellValue(Row, 14, "Site"); sl.SetColumnWidth("N", 13);
            sl.SetCellValue(Row, 15, "Report Text"); sl.SetColumnWidth("O", 40);
            sl.SetCellValue(Row, 16, "Initial Response"); sl.SetColumnWidth("P", 40);
            sl.SetCellValue(Row, 17, "EHS Message"); sl.SetColumnWidth("Q", 40);

            sl.SetCellStyle(Row, 1, Row, 17, styleRowHeader);

            ///////////////////////////
            // Freeze the top 2 rows //
            ///////////////////////////
            sl.FreezePanes(2, 0);
        }
        private static void SP_BuildRawDataTable(ref SLDocument sl, int row, ref Dictionary<int, string> ptTypes, ref List<Tuple<SIU_SafetyPays_Point, SIU_SafetyPaysReport>> rawData)
        {
            SLStyle styleRow = sl.CreateStyle();
            styleRow.Font.FontName = "Calibri";
            styleRow.Font.FontSize = 11;
            styleRow.Alignment.Horizontal = HorizontalAlignmentValues.Center;

            SLStyle styleColHeader = sl.CreateStyle();
            styleColHeader.Font.FontName = "Calibri";
            styleColHeader.Font.FontSize = 11;
            styleColHeader.Font.Bold = true;
            styleColHeader.Alignment.Horizontal = HorizontalAlignmentValues.Center;
            styleColHeader.Border.RightBorder.BorderStyle = BorderStyleValues.Medium;
            styleColHeader.Border.RightBorder.Color = System.Drawing.Color.Black;

            SLStyle styleCellRBorder = sl.CreateStyle();
            styleCellRBorder.Border.RightBorder.BorderStyle = BorderStyleValues.Thick;
            styleCellRBorder.Border.RightBorder.Color = System.Drawing.Color.Black;

            SLStyle styleCellDate = sl.CreateStyle();
            styleCellDate = sl.CreateStyle();
            styleCellDate.FormatCode = "mm/dd/yy";

            SLStyle wrap = sl.CreateStyle();
            wrap.SetWrapText(true);

            ////////////////
            // Write Data //
            ////////////////
            foreach (var rptRcd in rawData)
            {
                sl.SetCellValue(row, 2, "Adm Awd");

                sl.SetCellValue(row, 3, ptTypes[rptRcd.Item1.ReasonForPoints]);

                sl.SetCellValue(row, 7, rptRcd.Item1.DatePointsGiven);
                sl.SetCellStyle(row, 7, styleCellDate);

                sl.SetCellValue(row, 10, rptRcd.Item1.EventDate);
                sl.SetCellStyle(row, 10, styleCellDate);

                sl.SetCellValueNumeric(row, 11, rptRcd.Item1.Emp_No);

                sl.SetCellValueNumeric(row, 13, rptRcd.Item1.Points.ToString(CultureInfo.InvariantCulture));

                sl.SetCellValue(row, 17, rptRcd.Item1.Comments);
                sl.SetCellStyle(row, 17, wrap);

                if (rptRcd.Item2 != null)
                {
                    sl.SetCellValueNumeric(row, 1, rptRcd.Item2.IncidentNo.ToString(CultureInfo.InvariantCulture));

                    sl.SetCellValue(row, 2, rptRcd.Item2.IncStatus);

                    sl.SetCellValue(row, 3, rptRcd.Item2.IncTypeTxt);

                    if (rptRcd.Item2.SafetyMeetingDate != null)
                    {
                        sl.SetCellValue(row, 9, (DateTime)rptRcd.Item2.SafetyMeetingDate);
                        sl.SetCellValue(row, 4, rptRcd.Item2.SafetyMeetingType);
                    }
                    sl.SetCellStyle(row, 9, styleCellDate);

                    sl.SetCellValue(row, 5, rptRcd.Item2.IncOpenTimestamp);
                    sl.SetCellStyle(row, 5, styleCellDate);

                    if (rptRcd.Item2.IncCloseTimestamp != null)
                        sl.SetCellValue(row, 6, (DateTime)rptRcd.Item2.IncCloseTimestamp);
                    sl.SetCellStyle(row, 6, styleCellDate);

                    sl.SetCellValue(row, 7, (DateTime)rptRcd.Item1.DatePointsGiven);
                    sl.SetCellStyle(row, 7, styleCellDate);

                    if (rptRcd.Item2.IncidentDate != null)
                        sl.SetCellValue(row, 8, (DateTime)rptRcd.Item2.IncidentDate);
                    sl.SetCellStyle(row, 8, styleCellDate);

                    sl.SetCellValueNumeric(row, 11, rptRcd.Item2.EmpID);
                    sl.SetCellValueNumeric(row, 12, rptRcd.Item2.ObservedEmpID);

                    sl.SetCellValue(row, 14, rptRcd.Item2.JobSite);
                    sl.SetCellStyle(row, 14, wrap);
                    sl.SetCellValue(row, 15, rptRcd.Item2.Comments);
                    sl.SetCellStyle(row, 15, wrap);
                    sl.SetCellValue(row, 16, rptRcd.Item2.InitialResponse);
                    sl.SetCellStyle(row, 16, wrap);
                    sl.SetCellValue(row, 17, rptRcd.Item2.ehsRepsonse);
                    sl.SetCellStyle(row, 17, wrap);
                }
                row++;
            }
        }
#endregion Safety Pays

#region Hours
        public static void HoursDtlHeader(ref SLDocument sl)
        {
            SLStyle styleHeaderA1 = sl.CreateStyle();
            styleHeaderA1.SetWrapText(true);
            styleHeaderA1.Font.FontName = "Arial";
            styleHeaderA1.Font.FontSize = 11;
            styleHeaderA1.Font.FontColor = System.Drawing.Color.Blue;
            styleHeaderA1.Alignment.Horizontal = HorizontalAlignmentValues.Center;
            styleHeaderA1.Alignment.Vertical = VerticalAlignmentValues.Bottom;

            SLStyle borderBottomBlack = sl.CreateStyle();
            borderBottomBlack.Border.LeftBorder.Color = System.Drawing.Color.Black;
            borderBottomBlack.Border.BottomBorder.BorderStyle = BorderStyleValues.Medium;

            sl.SetCellStyle("A1", "L1", borderBottomBlack);
            sl.SetCellStyle("A1", "L1", styleHeaderA1);
            sl.SetRowHeight(1, 30);

            sl.SetColumnWidth("A", 13);
            sl.SetCellValue("A1", "Department");

            sl.SetColumnWidth("B", 13);
            sl.SetCellValue("B1", "Work Date");

            sl.SetColumnWidth("C", 13);
            sl.SetCellValue("C1", "Work Week");

            sl.SetColumnWidth("D", 20);
            sl.SetCellValue("D1", "Employee");

            sl.SetColumnWidth("E", 30);
            sl.SetCellValue("E1", "Posting Account / Job");

            sl.SetColumnWidth("F", 20);
            sl.SetCellValue("F1", "Task");

            sl.SetColumnWidth("G", 13);
            sl.SetCellValue("G1", "Straight");

            sl.SetColumnWidth("H", 13);
            sl.SetCellValue("H1", "Over");

            sl.SetColumnWidth("I", 13);
            sl.SetCellValue("I1", "Double");

            sl.SetColumnWidth("J", 13);
            sl.SetCellValue("J1", "Absence");

            sl.SetColumnWidth("K", 13);
            sl.SetCellValue("K1", "Holiday");

            sl.SetColumnWidth("L", 13);
            sl.SetCellValue("L1", "Line Total");

            //SLStyle styleColumnGroup1 = sl.CreateStyle();
            //styleColumnGroup1.Fill.SetPatternType(PatternValues.Solid);
            //styleColumnGroup1.Fill.SetPatternForegroundColor(System.Drawing.Color.FromArgb(100, 230, 230, 230));
            //sl.SetCellStyle("A1", "D" + rowCount, styleColumnGroup1);
            //sl.SetCellStyle("H1", "L" + rowCount, styleColumnGroup1);
            //sl.SetCellStyle("N1", "Q" + rowCount, styleColumnGroup1);
            //sl.SetCellStyle("S1", "U" + rowCount, styleColumnGroup1);
            //sl.SetCellStyle("W1", "W" + rowCount, styleColumnGroup1);
            //sl.SetCellStyle("Y1", "Z" + rowCount, styleColumnGroup1);
            //sl.SetCellStyle("AC1", "AC" + rowCount, styleColumnGroup1);

            //SLStyle borderAllCell = sl.CreateStyle();
            //borderAllCell.Border.RightBorder.BorderStyle = BorderStyleValues.Thin;
            //borderAllCell.Border.BottomBorder.BorderStyle = BorderStyleValues.Thin;
            //borderAllCell.Border.RightBorder.Color = System.Drawing.Color.FromArgb(100, 192, 192, 192);
            //borderAllCell.Border.BottomBorder.Color = System.Drawing.Color.FromArgb(100, 192, 192, 192);
            //sl.SetCellStyle("A1", "AG" + rowCount, borderAllCell);



            //SLStyle borderRightBlack = sl.CreateStyle();
            //borderRightBlack.Border.RightBorder.BorderStyle = BorderStyleValues.Medium;
            //borderRightBlack.Border.LeftBorder.Color = System.Drawing.Color.Black;
            //sl.SetCellStyle("D1", "D" + rowCount, borderRightBlack);
            //sl.SetCellStyle("G1", "G" + rowCount, borderRightBlack);
            //sl.SetCellStyle("L1", "L" + rowCount, borderRightBlack);
            //sl.SetCellStyle("M1", "M" + rowCount, borderRightBlack);
            //sl.SetCellStyle("Q1", "Q" + rowCount, borderRightBlack);
            //sl.SetCellStyle("R1", "R" + rowCount, borderRightBlack);
            //sl.SetCellStyle("R1", "R" + rowCount, borderRightBlack);
            //sl.SetCellStyle("U1", "U" + rowCount, borderRightBlack);
            //sl.SetCellStyle("V1", "V" + rowCount, borderRightBlack);
            //sl.SetCellStyle("W1", "W" + rowCount, borderRightBlack);
            //sl.SetCellStyle("X1", "X" + rowCount, borderRightBlack);
            //sl.SetCellStyle("Z1", "Z" + rowCount, borderRightBlack);
            //sl.SetCellStyle("AB1", "AB" + rowCount, borderRightBlack);
            //sl.SetCellStyle("AC1", "AC" + rowCount, borderRightBlack);

            ///////////////////////////
            // Freeze the top 2 rows //
            ///////////////////////////
            sl.FreezePanes(1, 0);
        }
        public static void HoursDtlData(ref SLDocument sl)
        {
            return;
            int row = 2;
            foreach ( SIU_Hours HoursSumRcd in SqlServer_Impl.GetTimesheetRawHours( DateTime.Parse("1/1/2013"), DateTime.Parse("2/1/2013").AddDays(-1) ))
            {
                sl.SetCellValue(row, 1,  HoursSumRcd.Dept);
                sl.SetCellValue(row, 2, ((DateTime)HoursSumRcd.WorkDate).ToShortDateString());
                sl.SetCellValueNumeric(row, 3, HoursSumRcd.WOY.ToString());
                sl.SetCellValue(row, 4, HoursSumRcd.EID);
                sl.SetCellValue(row, 5, HoursSumRcd.Pay_Posting_Group + HoursSumRcd.Job);

                sl.SetCellValue(row, 6, HoursSumRcd.Task);
                if (HoursSumRcd.ST > 0 ) sl.SetCellValueNumeric(row, 7, HoursSumRcd.ST.ToString());
                if (HoursSumRcd.OT > 0) sl.SetCellValueNumeric(row, 8, HoursSumRcd.OT.ToString());
                if (HoursSumRcd.DT > 0) sl.SetCellValueNumeric(row, 9, HoursSumRcd.DT.ToString());
                if (HoursSumRcd.AB > 0) sl.SetCellValueNumeric(row, 10, HoursSumRcd.AB.ToString());
                if (HoursSumRcd.HT > 0) sl.SetCellValueNumeric(row, 11, HoursSumRcd.HT.ToString());
                sl.SetCellValueNumeric(row, 12, HoursSumRcd.DTL_SUM.ToString());

                row++;
            }
        }
        public static void HoursDeptHeader(ref SLDocument sl)
        {

            SLStyle styleHeaderA1 = sl.CreateStyle();
            styleHeaderA1.SetWrapText(true);
            styleHeaderA1.Font.FontName = "Arial";
            styleHeaderA1.Font.FontSize = 11;
            styleHeaderA1.Font.FontColor = System.Drawing.Color.Blue;
            styleHeaderA1.Alignment.Horizontal = HorizontalAlignmentValues.Center;
            styleHeaderA1.Alignment.Vertical = VerticalAlignmentValues.Bottom;
            styleHeaderA1.Border.LeftBorder.Color = System.Drawing.Color.Black;
            styleHeaderA1.Border.BottomBorder.BorderStyle = BorderStyleValues.Medium;
            

            sl.SetCellStyle("A1", "M1", styleHeaderA1);
            sl.SetRowHeight(1, 30);


            sl.SetColumnWidth("A", 13);
            sl.SetCellValue("A1", "Department");

            sl.SetColumnWidth("B", 13);
            sl.SetCellValue("B1", "January");
            
            sl.SetColumnWidth("C", 13);
            sl.SetCellValue("C1", "Feberuary");

            sl.SetColumnWidth("D", 13);
            sl.SetCellValue("D1", "March");

            sl.SetColumnWidth("E", 13);
            sl.SetCellValue("E1", "April");

            sl.SetColumnWidth("F", 13);
            sl.SetCellValue("F1", "May");

            sl.SetColumnWidth("G", 13);
            sl.SetCellValue("G1", "June");

            sl.SetColumnWidth("H", 13);
            sl.SetCellValue("H1", "July");

            sl.SetColumnWidth("I", 13);
            sl.SetCellValue("I1", "August");

            sl.SetColumnWidth("J", 13);
            sl.SetCellValue("J1", "September");

            sl.SetColumnWidth("K", 13);
            sl.SetCellValue("K1", "October");

            sl.SetColumnWidth("L", 13);
            sl.SetCellValue("L1", "November");

            sl.SetColumnWidth("M", 13);
            sl.SetCellValue("M1", "December");

            ///////////////////////////
            // Freeze the top 2 rows //
            ///////////////////////////
            sl.FreezePanes(1, 0);
        }
        public static void HoursDeptData(ref SLDocument sl)
        {
            Dictionary<string, decimal[]> Sums = new Dictionary<string, decimal[]>();
            decimal[] DeptSums = new decimal[12];

            /////////////////////////////////////
            // Build Dictionary Of Departments //
            /////////////////////////////////////
            List<SIU_ReportingChain> oshaData = SqlServer_Impl.GetOshaDeptData();
            int row;
            foreach (SIU_ReportingChain rcr in oshaData)
            {
                row = 2;
                sl.SetCellValue(row, 1, rcr.Dept + " " + rcr.DeptDesc);

                Sums.Add(rcr.Dept, DeptSums);
            }

            ///////////////////////////////////////////////////////////////////
            // Get Hours Sum By Dept For Each Month And Load Into Dictionary //
            ///////////////////////////////////////////////////////////////////
            int[] numbers = { 1, 2, 3, 4, 5, 6 ,7, 8, 9, 10, 11 };
            
            foreach (int intMon in numbers)
            {
                IQueryable<SIU_Hours> HoursSumRcds = SqlServer_Impl.GetTimesheetRawHours(DateTime.Parse( intMon.ToString() + "/1/2013"),   DateTime.Parse( (intMon + 1).ToString() + "/1/2013").AddDays(-1));
                IQueryable<SIU_Hours> HoursDeptRcds = SqlServer_Impl.SumRawHoursByDept(HoursSumRcds);

                foreach (SIU_Hours HoursDeptRcd in HoursDeptRcds)
                {
                    if (Sums.ContainsKey(HoursDeptRcd.Dept))
                        DeptSums = Sums[HoursDeptRcd.Dept];

                    DeptSums[intMon] = (decimal)HoursDeptRcd.DEPT_SUM;
                }
            }

            row = 2;
            foreach (var dataRcd in Sums)
            {
                sl.SetCellValueNumeric(row, 1, dataRcd.Key);   
                DeptSums = dataRcd.Value;

                for ( int i = 1; i < 12; i++)
                    sl.SetCellValueNumeric(row, i+ 1, DeptSums[i].ToString());

                row++;
            }

        }
#endregion Hours

    }
}